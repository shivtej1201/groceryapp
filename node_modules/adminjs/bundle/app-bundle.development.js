var AdminJS = (function (styledComponents, React$1, require$$3, reactRouterDom, reactRouter, DesignSystem, require$$1, require$$0$1) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n.default = e;
    return Object.freeze(n);
  }

  function _mergeNamespaces(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  var React__default$1 = /*#__PURE__*/_interopDefault(React$1);
  var require$$3__default = /*#__PURE__*/_interopDefault(require$$3);
  var DesignSystem__namespace = /*#__PURE__*/_interopNamespace(DesignSystem);
  var require$$1__default = /*#__PURE__*/_interopDefault(require$$1);
  var require$$0__default = /*#__PURE__*/_interopDefault(require$$0$1);

  function _typeof$3(obj) {
    "@babel/helpers - typeof";

    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$3(obj);
  }

  function _toPrimitive$1(input, hint) {
    if (_typeof$3(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof$3(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  function _toPropertyKey$1(arg) {
    var key = _toPrimitive$1(arg, "string");
    return _typeof$3(key) === "symbol" ? key : String(key);
  }

  function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey$1(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  /**
   * This file automatically generated from `pre-publish.js`.
   * Do not manually edit.
   */

  var voidElements = {
    "area": true,
    "base": true,
    "br": true,
    "col": true,
    "embed": true,
    "hr": true,
    "img": true,
    "input": true,
    "link": true,
    "meta": true,
    "param": true,
    "source": true,
    "track": true,
    "wbr": true
  };

  var e,t=(e=voidElements)&&"object"==typeof e&&"default"in e?e.default:e,n=/\s([^'"/\s><]+?)[\s/>]|([^\s=]+)=\s?(".*?"|'.*?')/g;function r(e){var r={type:"tag",name:"",voidElement:!1,attrs:{},children:[]},i=e.match(/<\/?([^\s]+?)[/\s>]/);if(i&&(r.name=i[1],(t[i[1]]||"/"===e.charAt(e.length-2))&&(r.voidElement=!0),r.name.startsWith("!--"))){var s=e.indexOf("--\x3e");return {type:"comment",comment:-1!==s?e.slice(4,s):""}}for(var c=new RegExp(n),a=null;null!==(a=c.exec(e));)if(a[0].trim())if(a[1]){var o=a[1].trim(),u=[o,""];o.indexOf("=")>-1&&(u=o.split("=")),r.attrs[u[0]]=u[1],c.lastIndex--;}else a[2]&&(r.attrs[a[2]]=a[3].trim().substring(1,a[3].length-1));return r}var i$1=/<[a-zA-Z0-9\-\!\/](?:"[^"]*"|'[^']*'|[^'">])*>/g,s=/^\s*$/,c=Object.create(null);function a(e,t){switch(t.type){case"text":return e+t.content;case"tag":return e+="<"+t.name+(t.attrs?function(e){var t=[];for(var n in e)t.push(n+'="'+e[n]+'"');return t.length?" "+t.join(" "):""}(t.attrs):"")+(t.voidElement?"/>":">"),t.voidElement?e:e+t.children.reduce(a,"")+"</"+t.name+">";case"comment":return e+"\x3c!--"+t.comment+"--\x3e"}}var htmlParseStringify={parse:function(e,t){t||(t={}),t.components||(t.components=c);var n,a=[],o=[],u=-1,l=!1;if(0!==e.indexOf("<")){var m=e.indexOf("<");a.push({type:"text",content:-1===m?e:e.substring(0,m)});}return e.replace(i$1,function(i,c){if(l){if(i!=="</"+n.name+">")return;l=!1;}var m,d="/"!==i.charAt(1),f=i.startsWith("\x3c!--"),h=c+i.length,p=e.charAt(h);if(f){var v=r(i);return u<0?(a.push(v),a):((m=o[u]).children.push(v),a)}if(d&&(u++,"tag"===(n=r(i)).type&&t.components[n.name]&&(n.type="component",l=!0),n.voidElement||l||!p||"<"===p||n.children.push({type:"text",content:e.slice(h,e.indexOf("<",h))}),0===u&&a.push(n),(m=o[u-1])&&m.children.push(n),o[u]=n),(!d||n.voidElement)&&(u>-1&&(n.voidElement||n.name===i.slice(2,-1))&&(u--,n=-1===u?a:o[u]),!l&&"<"!==p&&p)){m=-1===u?a:o[u].children;var x=e.indexOf("<",h),g=e.slice(h,-1===x?void 0:x);s.test(g)&&(g=" "),(x>-1&&u+m.length>=0||" "!==g)&&m.push({type:"text",content:g});}}),a},stringify:function(e){return e.reduce(function(e,t){return e+a("",t)},"")}};


  var HTML = /*@__PURE__*/getDefaultExportFromCjs(htmlParseStringify);

  function warn() {
    if (console && console.warn) {
      var _console;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (typeof args[0] === 'string') args[0] = "react-i18next:: ".concat(args[0]);

      (_console = console).warn.apply(_console, args);
    }
  }
  var alreadyWarned = {};
  function warnOnce() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (typeof args[0] === 'string' && alreadyWarned[args[0]]) return;
    if (typeof args[0] === 'string') alreadyWarned[args[0]] = new Date();
    warn.apply(void 0, args);
  }
  function loadNamespaces(i18n, ns, cb) {
    i18n.loadNamespaces(ns, function () {
      if (i18n.isInitialized) {
        cb();
      } else {
        var initialized = function initialized() {
          setTimeout(function () {
            i18n.off('initialized', initialized);
          }, 0);
          cb();
        };

        i18n.on('initialized', initialized);
      }
    });
  }

  function oldI18nextHasLoadedNamespace(ns, i18n) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var lng = i18n.languages[0];
    var fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
    var lastLng = i18n.languages[i18n.languages.length - 1];
    if (lng.toLowerCase() === 'cimode') return true;

    var loadNotPending = function loadNotPending(l, n) {
      var loadState = i18n.services.backendConnector.state["".concat(l, "|").concat(n)];
      return loadState === -1 || loadState === 2;
    };

    if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;
    if (i18n.hasResourceBundle(lng, ns)) return true;
    if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }

  function hasLoadedNamespace(ns, i18n) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!i18n.languages || !i18n.languages.length) {
      warnOnce('i18n.languages were undefined or empty', i18n.languages);
      return true;
    }

    var isNewerI18next = i18n.options.ignoreJSONStructure !== undefined;

    if (!isNewerI18next) {
      return oldI18nextHasLoadedNamespace(ns, i18n, options);
    }

    return i18n.hasLoadedNamespace(ns, {
      precheck: function precheck(i18nInstance, loadNotPending) {
        if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18nInstance.services.backendConnector.backend && i18nInstance.isLanguageChangingTo && !loadNotPending(i18nInstance.isLanguageChangingTo, ns)) return false;
      }
    });
  }

  var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
  var htmlEntities = {
    '&amp;': '&',
    '&#38;': '&',
    '&lt;': '<',
    '&#60;': '<',
    '&gt;': '>',
    '&#62;': '>',
    '&apos;': "'",
    '&#39;': "'",
    '&quot;': '"',
    '&#34;': '"',
    '&nbsp;': ' ',
    '&#160;': ' ',
    '&copy;': '©',
    '&#169;': '©',
    '&reg;': '®',
    '&#174;': '®',
    '&hellip;': '…',
    '&#8230;': '…',
    '&#x2F;': '/',
    '&#47;': '/'
  };

  var unescapeHtmlEntity = function unescapeHtmlEntity(m) {
    return htmlEntities[m];
  };

  var unescape$1 = function unescape(text) {
    return text.replace(matchHtmlEntity, unescapeHtmlEntity);
  };

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var defaultOptions = {
    bindI18n: 'languageChanged',
    bindI18nStore: '',
    transEmptyNodeValue: '',
    transSupportBasicHtmlNodes: true,
    transWrapTextNodes: '',
    transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'p'],
    useSuspense: true,
    unescape: unescape$1
  };
  function setDefaults() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    defaultOptions = _objectSpread$a(_objectSpread$a({}, defaultOptions), options);
  }
  function getDefaults$2() {
    return defaultOptions;
  }

  var i18nInstance;
  function setI18n(instance) {
    i18nInstance = instance;
  }
  function getI18n() {
    return i18nInstance;
  }

  var _excluded$1 = ["format"],
      _excluded2 = ["children", "count", "parent", "i18nKey", "context", "tOptions", "values", "defaults", "components", "ns", "i18n", "t", "shouldUnescape"];

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function hasChildren(node, checkLength) {
    if (!node) return false;
    var base = node.props ? node.props.children : node.children;
    if (checkLength) return base.length > 0;
    return !!base;
  }

  function getChildren(node) {
    if (!node) return [];
    return node.props ? node.props.children : node.children;
  }

  function hasValidReactChildren(children) {
    if (Object.prototype.toString.call(children) !== '[object Array]') return false;
    return children.every(function (child) {
      return React$1.isValidElement(child);
    });
  }

  function getAsArray(data) {
    return Array.isArray(data) ? data : [data];
  }

  function mergeProps(source, target) {
    var newTarget = _objectSpread$9({}, target);

    newTarget.props = Object.assign(source.props, target.props);
    return newTarget;
  }

  function nodesToString(children, i18nOptions) {
    if (!children) return '';
    var stringNode = '';
    var childrenArray = getAsArray(children);
    var keepArray = i18nOptions.transSupportBasicHtmlNodes && i18nOptions.transKeepBasicHtmlNodesFor ? i18nOptions.transKeepBasicHtmlNodesFor : [];
    childrenArray.forEach(function (child, childIndex) {
      if (typeof child === 'string') {
        stringNode += "".concat(child);
      } else if (React$1.isValidElement(child)) {
        var childPropsCount = Object.keys(child.props).length;
        var shouldKeepChild = keepArray.indexOf(child.type) > -1;
        var childChildren = child.props.children;

        if (!childChildren && shouldKeepChild && childPropsCount === 0) {
          stringNode += "<".concat(child.type, "/>");
        } else if (!childChildren && (!shouldKeepChild || childPropsCount !== 0)) {
          stringNode += "<".concat(childIndex, "></").concat(childIndex, ">");
        } else if (child.props.i18nIsDynamicList) {
          stringNode += "<".concat(childIndex, "></").concat(childIndex, ">");
        } else if (shouldKeepChild && childPropsCount === 1 && typeof childChildren === 'string') {
          stringNode += "<".concat(child.type, ">").concat(childChildren, "</").concat(child.type, ">");
        } else {
          var content = nodesToString(childChildren, i18nOptions);
          stringNode += "<".concat(childIndex, ">").concat(content, "</").concat(childIndex, ">");
        }
      } else if (child === null) {
        warn("Trans: the passed in value is invalid - seems you passed in a null child.");
      } else if (_typeof$3(child) === 'object') {
        var format = child.format,
            clone = _objectWithoutProperties(child, _excluded$1);

        var keys = Object.keys(clone);

        if (keys.length === 1) {
          var value = format ? "".concat(keys[0], ", ").concat(format) : keys[0];
          stringNode += "{{".concat(value, "}}");
        } else {
          warn("react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.", child);
        }
      } else {
        warn("Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.", child);
      }
    });
    return stringNode;
  }

  function renderNodes(children, targetString, i18n, i18nOptions, combinedTOpts, shouldUnescape) {
    if (targetString === '') return [];
    var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];
    var emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.join('|')).test(targetString);
    if (!children && !emptyChildrenButNeedsHandling) return [targetString];
    var data = {};

    function getData(childs) {
      var childrenArray = getAsArray(childs);
      childrenArray.forEach(function (child) {
        if (typeof child === 'string') return;
        if (hasChildren(child)) getData(getChildren(child));else if (_typeof$3(child) === 'object' && !React$1.isValidElement(child)) Object.assign(data, child);
      });
    }

    getData(children);
    var ast = HTML.parse("<0>".concat(targetString, "</0>"));

    var opts = _objectSpread$9(_objectSpread$9({}, data), combinedTOpts);

    function renderInner(child, node, rootReactNode) {
      var childs = getChildren(child);
      var mappedChildren = mapAST(childs, node.children, rootReactNode);
      return hasValidReactChildren(childs) && mappedChildren.length === 0 ? childs : mappedChildren;
    }

    function pushTranslatedJSX(child, inner, mem, i, isVoid) {
      if (child.dummy) child.children = inner;
      mem.push(React$1.cloneElement(child, _objectSpread$9(_objectSpread$9({}, child.props), {}, {
        key: i
      }), isVoid ? undefined : inner));
    }

    function mapAST(reactNode, astNode, rootReactNode) {
      var reactNodes = getAsArray(reactNode);
      var astNodes = getAsArray(astNode);
      return astNodes.reduce(function (mem, node, i) {
        var translationContent = node.children && node.children[0] && node.children[0].content && i18n.services.interpolator.interpolate(node.children[0].content, opts, i18n.language);

        if (node.type === 'tag') {
          var tmp = reactNodes[parseInt(node.name, 10)];
          if (!tmp && rootReactNode.length === 1 && rootReactNode[0][node.name]) tmp = rootReactNode[0][node.name];
          if (!tmp) tmp = {};
          var child = Object.keys(node.attrs).length !== 0 ? mergeProps({
            props: node.attrs
          }, tmp) : tmp;
          var isElement = React$1.isValidElement(child);
          var isValidTranslationWithChildren = isElement && hasChildren(node, true) && !node.voidElement;
          var isEmptyTransWithHTML = emptyChildrenButNeedsHandling && _typeof$3(child) === 'object' && child.dummy && !isElement;
          var isKnownComponent = _typeof$3(children) === 'object' && children !== null && Object.hasOwnProperty.call(children, node.name);

          if (typeof child === 'string') {
            var value = i18n.services.interpolator.interpolate(child, opts, i18n.language);
            mem.push(value);
          } else if (hasChildren(child) || isValidTranslationWithChildren) {
              var inner = renderInner(child, node, rootReactNode);
              pushTranslatedJSX(child, inner, mem, i);
            } else if (isEmptyTransWithHTML) {
            var _inner = mapAST(reactNodes, node.children, rootReactNode);

            mem.push(React$1.cloneElement(child, _objectSpread$9(_objectSpread$9({}, child.props), {}, {
              key: i
            }), _inner));
          } else if (Number.isNaN(parseFloat(node.name))) {
            if (isKnownComponent) {
              var _inner2 = renderInner(child, node, rootReactNode);

              pushTranslatedJSX(child, _inner2, mem, i, node.voidElement);
            } else if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {
              if (node.voidElement) {
                mem.push(React$1.createElement(node.name, {
                  key: "".concat(node.name, "-").concat(i)
                }));
              } else {
                var _inner3 = mapAST(reactNodes, node.children, rootReactNode);

                mem.push(React$1.createElement(node.name, {
                  key: "".concat(node.name, "-").concat(i)
                }, _inner3));
              }
            } else if (node.voidElement) {
              mem.push("<".concat(node.name, " />"));
            } else {
              var _inner4 = mapAST(reactNodes, node.children, rootReactNode);

              mem.push("<".concat(node.name, ">").concat(_inner4, "</").concat(node.name, ">"));
            }
          } else if (_typeof$3(child) === 'object' && !isElement) {
            var content = node.children[0] ? translationContent : null;
            if (content) mem.push(content);
          } else if (node.children.length === 1 && translationContent) {
            mem.push(React$1.cloneElement(child, _objectSpread$9(_objectSpread$9({}, child.props), {}, {
              key: i
            }), translationContent));
          } else {
            mem.push(React$1.cloneElement(child, _objectSpread$9(_objectSpread$9({}, child.props), {}, {
              key: i
            })));
          }
        } else if (node.type === 'text') {
          var wrapTextNodes = i18nOptions.transWrapTextNodes;

          var _content = shouldUnescape ? i18nOptions.unescape(i18n.services.interpolator.interpolate(node.content, opts, i18n.language)) : i18n.services.interpolator.interpolate(node.content, opts, i18n.language);

          if (wrapTextNodes) {
            mem.push(React$1.createElement(wrapTextNodes, {
              key: "".concat(node.name, "-").concat(i)
            }, _content));
          } else {
            mem.push(_content);
          }
        }

        return mem;
      }, []);
    }

    var result = mapAST([{
      dummy: true,
      children: children || []
    }], ast, getAsArray(children || []));
    return getChildren(result[0]);
  }

  function Trans$1(_ref) {
    var children = _ref.children,
        count = _ref.count,
        parent = _ref.parent,
        i18nKey = _ref.i18nKey,
        context = _ref.context,
        _ref$tOptions = _ref.tOptions,
        tOptions = _ref$tOptions === void 0 ? {} : _ref$tOptions,
        values = _ref.values,
        defaults = _ref.defaults,
        components = _ref.components,
        ns = _ref.ns,
        i18nFromProps = _ref.i18n,
        tFromProps = _ref.t,
        shouldUnescape = _ref.shouldUnescape,
        additionalProps = _objectWithoutProperties(_ref, _excluded2);

    var i18n = i18nFromProps || getI18n();

    if (!i18n) {
      warnOnce('You will need to pass in an i18next instance by using i18nextReactModule');
      return children;
    }

    var t = tFromProps || i18n.t.bind(i18n) || function (k) {
      return k;
    };

    if (context) tOptions.context = context;

    var reactI18nextOptions = _objectSpread$9(_objectSpread$9({}, getDefaults$2()), i18n.options && i18n.options.react);

    var namespaces = ns || t.ns || i18n.options && i18n.options.defaultNS;
    namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];
    var defaultValue = defaults || nodesToString(children, reactI18nextOptions) || reactI18nextOptions.transEmptyNodeValue || i18nKey;
    var hashTransKey = reactI18nextOptions.hashTransKey;
    var key = i18nKey || (hashTransKey ? hashTransKey(defaultValue) : defaultValue);
    var interpolationOverride = values ? tOptions.interpolation : {
      interpolation: _objectSpread$9(_objectSpread$9({}, tOptions.interpolation), {}, {
        prefix: '#$?',
        suffix: '?$#'
      })
    };

    var combinedTOpts = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, tOptions), {}, {
      count: count
    }, values), interpolationOverride), {}, {
      defaultValue: defaultValue,
      ns: namespaces
    });

    var translation = key ? t(key, combinedTOpts) : defaultValue;
    var content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts, shouldUnescape);
    var useAsParent = parent !== undefined ? parent : reactI18nextOptions.defaultTransParent;
    return useAsParent ? React$1.createElement(useAsParent, additionalProps, content) : content;
  }

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
    }
  }
  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  var initReactI18next = {
    type: '3rdParty',
    init: function init(instance) {
      setDefaults(instance.options.react);
      setI18n(instance);
    }
  };

  var I18nContext = React$1.createContext();
  var ReportNamespaces = function () {
    function ReportNamespaces() {
      _classCallCheck$1(this, ReportNamespaces);

      this.usedNamespaces = {};
    }

    _createClass$1(ReportNamespaces, [{
      key: "addUsedNamespaces",
      value: function addUsedNamespaces(namespaces) {
        var _this = this;

        namespaces.forEach(function (ns) {
          if (!_this.usedNamespaces[ns]) _this.usedNamespaces[ns] = true;
        });
      }
    }, {
      key: "getUsedNamespaces",
      value: function getUsedNamespaces() {
        return Object.keys(this.usedNamespaces);
      }
    }]);

    return ReportNamespaces;
  }();

  var _excluded = ["children", "count", "parent", "i18nKey", "context", "tOptions", "values", "defaults", "components", "ns", "i18n", "t", "shouldUnescape"];

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  function Trans(_ref) {
    var children = _ref.children,
        count = _ref.count,
        parent = _ref.parent,
        i18nKey = _ref.i18nKey,
        context = _ref.context,
        _ref$tOptions = _ref.tOptions,
        tOptions = _ref$tOptions === void 0 ? {} : _ref$tOptions,
        values = _ref.values,
        defaults = _ref.defaults,
        components = _ref.components,
        ns = _ref.ns,
        i18nFromProps = _ref.i18n,
        tFromProps = _ref.t,
        shouldUnescape = _ref.shouldUnescape,
        additionalProps = _objectWithoutProperties(_ref, _excluded);

    var _ref2 = React$1.useContext(I18nContext) || {},
        i18nFromContext = _ref2.i18n,
        defaultNSFromContext = _ref2.defaultNS;

    var i18n = i18nFromProps || i18nFromContext || getI18n();
    var t = tFromProps || i18n && i18n.t.bind(i18n);
    return Trans$1(_objectSpread$8({
      children: children,
      count: count,
      parent: parent,
      i18nKey: i18nKey,
      context: context,
      tOptions: tOptions,
      values: values,
      defaults: defaults,
      components: components,
      ns: ns || t && t.ns || defaultNSFromContext || i18n && i18n.options && i18n.options.defaultNS,
      i18n: i18n,
      t: tFromProps,
      shouldUnescape: shouldUnescape
    }, additionalProps));
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var usePrevious$1 = function usePrevious(value, ignore) {
    var ref = React$1.useRef();
    React$1.useEffect(function () {
      ref.current = ignore ? ref.current : value;
    }, [value, ignore]);
    return ref.current;
  };

  function useTranslation$1(ns) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var i18nFromProps = props.i18n;

    var _ref = React$1.useContext(I18nContext) || {},
        i18nFromContext = _ref.i18n,
        defaultNSFromContext = _ref.defaultNS;

    var i18n = i18nFromProps || i18nFromContext || getI18n();
    if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();

    if (!i18n) {
      warnOnce('You will need to pass in an i18next instance by using initReactI18next');

      var notReadyT = function notReadyT(k, optsOrDefaultValue) {
        if (typeof optsOrDefaultValue === 'string') return optsOrDefaultValue;
        if (optsOrDefaultValue && _typeof$3(optsOrDefaultValue) === 'object' && typeof optsOrDefaultValue.defaultValue === 'string') return optsOrDefaultValue.defaultValue;
        return Array.isArray(k) ? k[k.length - 1] : k;
      };

      var retNotReady = [notReadyT, {}, false];
      retNotReady.t = notReadyT;
      retNotReady.i18n = {};
      retNotReady.ready = false;
      return retNotReady;
    }

    if (i18n.options.react && i18n.options.react.wait !== undefined) warnOnce('It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.');

    var i18nOptions = _objectSpread$7(_objectSpread$7(_objectSpread$7({}, getDefaults$2()), i18n.options.react), props);

    var useSuspense = i18nOptions.useSuspense,
        keyPrefix = i18nOptions.keyPrefix;
    var namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
    namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];
    if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);
    var ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(function (n) {
      return hasLoadedNamespace(n, i18n, i18nOptions);
    });

    function getT() {
      return i18n.getFixedT(null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
    }

    var _useState = React$1.useState(getT),
        _useState2 = _slicedToArray(_useState, 2),
        t = _useState2[0],
        setT = _useState2[1];

    var joinedNS = namespaces.join();
    var previousJoinedNS = usePrevious$1(joinedNS);
    var isMounted = React$1.useRef(true);
    React$1.useEffect(function () {
      var bindI18n = i18nOptions.bindI18n,
          bindI18nStore = i18nOptions.bindI18nStore;
      isMounted.current = true;

      if (!ready && !useSuspense) {
        loadNamespaces(i18n, namespaces, function () {
          if (isMounted.current) setT(getT);
        });
      }

      if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
        setT(getT);
      }

      function boundReset() {
        if (isMounted.current) setT(getT);
      }

      if (bindI18n && i18n) i18n.on(bindI18n, boundReset);
      if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);
      return function () {
        isMounted.current = false;
        if (bindI18n && i18n) bindI18n.split(' ').forEach(function (e) {
          return i18n.off(e, boundReset);
        });
        if (bindI18nStore && i18n) bindI18nStore.split(' ').forEach(function (e) {
          return i18n.store.off(e, boundReset);
        });
      };
    }, [i18n, joinedNS]);
    var isInitial = React$1.useRef(true);
    React$1.useEffect(function () {
      if (isMounted.current && !isInitial.current) {
        setT(getT);
      }

      isInitial.current = false;
    }, [i18n, keyPrefix]);
    var ret = [t, i18n, ready];
    ret.t = t;
    ret.i18n = i18n;
    ret.ready = ready;
    if (ready) return ret;
    if (!ready && !useSuspense) return ret;
    throw new Promise(function (resolve) {
      loadNamespaces(i18n, namespaces, function () {
        resolve();
      });
    });
  }

  function I18nextProvider(_ref) {
    var i18n = _ref.i18n,
        defaultNS = _ref.defaultNS,
        children = _ref.children;
    var value = React$1.useMemo(function () {
      return {
        i18n: i18n,
        defaultNS: defaultNS
      };
    }, [i18n, defaultNS]);
    return React$1.createElement(I18nContext.Provider, {
      value: value
    }, children);
  }

  let globalAny$2 = {};
  try {
    globalAny$2 = window;
  } catch (error) {
    if (error.message !== 'window is not defined') {
      throw error;
    }
  }

  /**
   * Base Params for a any function
   * @alias ActionParams
   * @memberof ViewHelpers
   */

  /**
   * Params for a record action
   * @alias RecordActionParams
   * @extends ActionParams
   * @memberof ViewHelpers
   */

  /**
   * Params for a bulk action
   * @alias BulkActionParams
   * @extends ActionParams
   * @memberof ViewHelpers
   */

  /**
   * Params for a resource action
   * @alias ResourceActionParams
   * @extends ActionParams
   * @memberof ViewHelpers
   */

  const runDate = new Date();

  /**
   * Collection of helper methods available in the views
   */
  class ViewHelpers {
    constructor({
      options
    } = {}) {
      let opts = ViewHelpers.getPaths(options);
      opts = opts || {
        rootPath: '/admin'
      };

      // when ViewHelpers are used on the frontend, paths are taken from global Redux State
      this.options = opts;
    }
    static getPaths(options) {
      return options || globalAny$2.REDUX_STATE?.paths;
    }

    /**
     * To each related path adds rootPath passed by the user, as well as a query string
     * @private
     * @param  {Array<string>} [paths]      list of parts of the url
     * @return {string}       path
     * @return {query}        [search=''] query string which can be fetch
     *                                    from `location.search`
     */
    urlBuilder(paths = [], search = '') {
      const separator = '/';
      const replace = new RegExp(`${separator}{1,}`, 'g');
      let {
        rootPath
      } = this.options;
      if (!rootPath.startsWith(separator)) {
        rootPath = `${separator}${rootPath}`;
      }
      const parts = [rootPath, ...paths];
      return `${parts.join(separator).replace(replace, separator)}${search}`;
    }

    /**
     * Returns login URL
     * @return {string}
     */
    loginUrl() {
      return this.options.loginPath;
    }

    /**
     * Returns logout URL
     * @return {string}
     */
    logoutUrl() {
      return this.options.logoutPath;
    }

    /**
     * Returns URL for the dashboard
     * @return {string}
     */
    dashboardUrl() {
      return this.options.rootPath;
    }

    /**
     * Returns URL for given page name
     * @param {string} pageName       page name which is a unique key specified in
     *                                {@link AdminJSOptions}
     * @return {string}
     */
    pageUrl(pageName) {
      return this.urlBuilder(['pages', pageName]);
    }

    /**
     * Returns url for a `edit` action in given Resource. Uses {@link recordActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {string} recordId    id to the record
     * @param {string} [search]        optional query string
     */
    editUrl(resourceId, recordId, search) {
      return this.recordActionUrl({
        resourceId,
        recordId,
        actionName: 'edit',
        search
      });
    }

    /**
     * Returns url for a `show` action in given Resource. Uses {@link recordActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {string} recordId    id to the record
     * @param {string} [search]        optional query string
     */
    showUrl(resourceId, recordId, search) {
      return this.recordActionUrl({
        resourceId,
        recordId,
        actionName: 'show',
        search
      });
    }

    /**
     * Returns url for a `delete` action in given Resource. Uses {@link recordActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {string} recordId    id to the record
     * @param {string} [search]        optional query string
     */
    deleteUrl(resourceId, recordId, search) {
      return this.recordActionUrl({
        resourceId,
        recordId,
        actionName: 'delete',
        search
      });
    }

    /**
     * Returns url for a `new` action in given Resource. Uses {@link resourceActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {string} [search]        optional query string
     */
    newUrl(resourceId, search) {
      return this.resourceActionUrl({
        resourceId,
        actionName: 'new',
        search
      });
    }

    /**
     * Returns url for a `list` action in given Resource. Uses {@link resourceActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {string} [search]        optional query string
     */
    listUrl(resourceId, search) {
      return this.resourceActionUrl({
        resourceId,
        actionName: 'list',
        search
      });
    }

    /**
     * Returns url for a `bulkDelete` action in given Resource. Uses {@link bulkActionUrl}
     *
     * @param {string} resourceId  id to the resource
     * @param {Array<string>} recordIds   separated by comma records
     * @param {string} [search]        optional query string
     */
    bulkDeleteUrl(resourceId, recordIds, search) {
      return this.bulkActionUrl({
        resourceId,
        recordIds,
        actionName: 'bulkDelete',
        search
      });
    }

    /**
     * Returns resourceAction url
     *
     * @param   {ResourceActionParams}  options
     * @param   {string}  options.resourceId
     * @param   {string}  options.actionName
     * @param   {string}  [options.search]        optional query string
     *
     * @return  {string}
     */
    resourceActionUrl({
      resourceId,
      actionName,
      search
    }) {
      return this.urlBuilder(['resources', resourceId, 'actions', actionName], search);
    }
    resourceUrl({
      resourceId,
      search
    }) {
      return this.urlBuilder(['resources', resourceId], search);
    }

    /**
     * Returns recordAction url
     *
     * @param   {RecordActionParams}  options
     * @param   {string}  options.resourceId
     * @param   {string}  options.recordId
     * @param   {string}  options.actionName
     *
     * @return  {string}
     */
    recordActionUrl({
      resourceId,
      recordId,
      actionName,
      search
    }) {
      return this.urlBuilder(['resources', resourceId, 'records', recordId, actionName], search);
    }

    /**
     * Returns bulkAction url
     *
     * @param   {BulkActionParams}  options
     * @param   {string}  options.resourceId
     * @param   {Array<string>}  [options.recordIds]
     * @param   {string}  options.actionName
     *
     * @return  {string}
     */
    bulkActionUrl({
      resourceId,
      recordIds,
      actionName,
      search
    }) {
      const url = this.urlBuilder(['resources', resourceId, 'bulk', actionName]);
      if (recordIds && recordIds.length) {
        const query = new URLSearchParams(search);
        query.set('recordIds', recordIds.join(','));
        return `${url}?${query.toString()}`;
      }
      return `${url}${search || ''}`;
    }

    /**
     * Returns absolute path to a given asset.
     * @private
     *
     * @param  {string} asset
     * @param  {Assets | undefined} assetsConfig
     * @return {string}
     */
    assetPath(asset, assetsConfig) {
      if (this.options.assetsCDN) {
        const pathname = assetsConfig?.coreScripts?.[asset] ?? asset;
        const url = new URL(pathname, this.options.assetsCDN).href;

        // adding timestamp to the href invalidates the CDN cache
        return `${url}?date=${runDate.getTime()}`;
      }
      return this.urlBuilder(['frontend', 'assets', asset]);
    }
  }

  var flat$1 = flatten$2;
  flatten$2.flatten = flatten$2;
  flatten$2.unflatten = unflatten;

  function isBuffer$6 (obj) {
    return obj &&
      obj.constructor &&
      (typeof obj.constructor.isBuffer === 'function') &&
      obj.constructor.isBuffer(obj)
  }

  function keyIdentity (key) {
    return key
  }

  function flatten$2 (target, opts) {
    opts = opts || {};

    const delimiter = opts.delimiter || '.';
    const maxDepth = opts.maxDepth;
    const transformKey = opts.transformKey || keyIdentity;
    const output = {};

    function step (object, prev, currentDepth) {
      currentDepth = currentDepth || 1;
      Object.keys(object).forEach(function (key) {
        const value = object[key];
        const isarray = opts.safe && Array.isArray(value);
        const type = Object.prototype.toString.call(value);
        const isbuffer = isBuffer$6(value);
        const isobject = (
          type === '[object Object]' ||
          type === '[object Array]'
        );

        const newKey = prev
          ? prev + delimiter + transformKey(key)
          : transformKey(key);

        if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
          (!opts.maxDepth || currentDepth < maxDepth)) {
          return step(value, newKey, currentDepth + 1)
        }

        output[newKey] = value;
      });
    }

    step(target);

    return output
  }

  function unflatten (target, opts) {
    opts = opts || {};

    const delimiter = opts.delimiter || '.';
    const overwrite = opts.overwrite || false;
    const transformKey = opts.transformKey || keyIdentity;
    const result = {};

    const isbuffer = isBuffer$6(target);
    if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
      return target
    }

    // safely ensure that the key is
    // an integer.
    function getkey (key) {
      const parsedKey = Number(key);

      return (
        isNaN(parsedKey) ||
        key.indexOf('.') !== -1 ||
        opts.object
      ) ? key
        : parsedKey
    }

    function addKeys (keyPrefix, recipient, target) {
      return Object.keys(target).reduce(function (result, key) {
        result[keyPrefix + delimiter + key] = target[key];

        return result
      }, recipient)
    }

    function isEmpty (val) {
      const type = Object.prototype.toString.call(val);
      const isArray = type === '[object Array]';
      const isObject = type === '[object Object]';

      if (!val) {
        return true
      } else if (isArray) {
        return !val.length
      } else if (isObject) {
        return !Object.keys(val).length
      }
    }

    target = Object.keys(target).reduce(function (result, key) {
      const type = Object.prototype.toString.call(target[key]);
      const isObject = (type === '[object Object]' || type === '[object Array]');
      if (!isObject || isEmpty(target[key])) {
        result[key] = target[key];
        return result
      } else {
        return addKeys(
          key,
          result,
          flatten$2(target[key], opts)
        )
      }
    }, {});

    Object.keys(target).forEach(function (key) {
      const split = key.split(delimiter).map(transformKey);
      let key1 = getkey(split.shift());
      let key2 = getkey(split[0]);
      let recipient = result;

      while (key2 !== undefined) {
        if (key1 === '__proto__') {
          return
        }

        const type = Object.prototype.toString.call(recipient[key1]);
        const isobject = (
          type === '[object Object]' ||
          type === '[object Array]'
        );

        // do not write over falsey, non-undefined values if overwrite is false
        if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
          return
        }

        if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
          recipient[key1] = (
            typeof key2 === 'number' &&
            !opts.object ? [] : {}
          );
        }

        recipient = recipient[key1];
        if (split.length > 0) {
          key1 = getkey(split.shift());
          key2 = getkey(split[0]);
        }
      }

      // unflatten again for 'messy objects'
      recipient[key1] = unflatten(target[key], opts);
    });

    return result
  }

  var flatModule = /*@__PURE__*/getDefaultExportFromCjs(flat$1);

  const DELIMITER = '.';

  // this is the regex used to find all existing properties starting with a key

  const propertyKeyRegex = (propertyPath, options) => {
    const delimiter = new RegExp(`\\${DELIMITER}`, 'g');
    const escapedDelimiter = `\\${DELIMITER}`;
    // but for `nested.1.property.0` it will produce `nested(\.|\.\d+\.)1(\.|\.\d+\.)property.0`
    // and this is intentional because user can give an one index in property path for with deeply
    // nested arrays
    const escapedDelimiterOrIndex = `(${escapedDelimiter}|${escapedDelimiter}\\d+${escapedDelimiter})`;
    const path = options?.includeAllSiblings ? propertyPath.replace(delimiter, escapedDelimiterOrIndex) : propertyPath.replace(delimiter, escapedDelimiter);
    return new RegExp(`^${path}($|${escapedDelimiter})`, '');
  };

  /**
   * @load ./select-params.doc.md
   * @memberof module:flat
   * @param {FlattenParams} params
   * @param {string | Array<string>} properties
   * @param {GetOptions} [options]
   * @returns {FlattenParams}
   */
  const selectParams = (params, properties, options) => {
    const propertyArray = Array.isArray(properties) ? properties : [properties];
    const selected = propertyArray.filter(propertyPath => !!propertyPath).reduce((globalMemo, propertyPath) => {
      const regex = propertyKeyRegex(propertyPath, options);
      const filtered = Object.keys(params)
      // filter all keys which starts with property path
      .filter(key => key.match(regex)).reduce((memo, key) => {
        memo[key] = params[key];
        return memo;
      }, {});
      return {
        ...globalMemo,
        ...filtered
      };
    }, {});
    return selected;
  };

  /**
   * @load ./filter-out-params.doc.md
   * @memberof module:flat
   * @param {FlattenParams} params
   * @param {string | Array<string>} properties
   * @returns {FlattenParams}
   */
  const filterOutParams = (params, properties) => {
    const propertyArray = Array.isArray(properties) ? properties : [properties];
    return propertyArray.filter(propertyPath => !!propertyPath).reduce((globalFiltered, propertyPath) => {
      const regex = propertyKeyRegex(propertyPath);
      return Object.keys(globalFiltered).filter(key => !key.match(regex)).reduce((memo, key) => {
        memo[key] = params[key];
        return memo;
      }, {});
    }, params);
  };

  /**
   * @memberof module:flat
   * @alias PathToPartsOptions
   */

  /**
   * @load ./path-to-parts.doc.md
   * @param   {string}              propertyPath
   * @param   {PathToPartsOptions}  options
   * @returns  {PathParts}
   *
   * @memberof module:flat
   * @alias pathToParts
   */
  const pathToParts = (propertyPath, options = {}) => {
    let allParts = propertyPath.split('.');
    if (options.skipArrayIndexes) {
      // eslint-disable-next-line no-restricted-globals
      allParts = allParts.filter(part => isNaN(+part));
    }
    return allParts.reduce((memo, part) => {
      if (memo.length) {
        return [...memo, [memo[memo.length - 1], part].join('.')];
      }
      return [part];
    }, []);
  };

  const isObject$d = value => {
    // Node environment
    if (typeof File === 'undefined') {
      return typeof value === 'object' && value !== null;
    }
    // Window environment
    return typeof value === 'object' && !(value instanceof File) && value !== null;
  };

  /**
   * @load ./set.doc.md
   * @memberof module:flat
   * @param {FlattenParams} params
   * @param {string} propertyPath
   * @param {any} [value]       if not give function will only try to remove old keys
   * @returns {FlattenParams}
   */
  const set = (params = {}, propertyPath, value) => {
    const regex = propertyKeyRegex(propertyPath);

    // remove all existing keys
    const paramsCopy = Object.keys(params).filter(key => !key.match(regex)).reduce((memo, key) => {
      memo[key] = params[key];
      return memo;
    }, {});
    if (typeof value !== 'undefined') {
      if (isObject$d(value) && !(value instanceof Date)) {
        const flattened = flatModule.flatten(value);
        if (Object.keys(flattened).length) {
          Object.keys(flattened).forEach(key => {
            paramsCopy[`${propertyPath}${DELIMITER}${key}`] = flattened[key];
          });
        } else if (Array.isArray(value)) {
          paramsCopy[propertyPath] = [];
        } else {
          paramsCopy[propertyPath] = {};
        }
      } else {
        paramsCopy[propertyPath] = value;
      }

      // when user gave { "nested.value": "something" } and had "nested" set to `null`, then
      // nested should be removed
      const parts = pathToParts(propertyPath).slice(0, -1);
      if (parts.length) {
        return Object.keys(paramsCopy).filter(key => !parts.includes(key)).reduce((memo, key) => {
          memo[key] = paramsCopy[key];
          return memo;
        }, {});
      }
    }
    return paramsCopy;
  };

  const TEMP_HOLDING_KEY = 'TEMP_HOLDING_KEY';

  /**
   * @load ./get.doc.md
   * @memberof module:flat
   * @param {FlattenParams}   params      flatten params from which property has to be taken
   * @param {string}          [propertyPath]  name of the property
   * @param {GetOptions}      options     options
   * @returns {any}                       when property key exists directly it returns what is inside,
   *                                      otherwise it tries to find any nested objects and returns
   *                                      them
   */
  const get$3 = (params = {}, propertyPath, options) => {
    if (!propertyPath) {
      return flatModule.unflatten(params);
    }

    // when object has this key - simply return it
    // we cannot rely on typeof params[propertyPath !== 'undefined' because params can actually be
    // undefined and in such case if would pass and function would return [undefined]
    if (Object.keys(params).find(key => key === propertyPath)) {
      return params[propertyPath];
    }
    const regex = propertyKeyRegex(propertyPath, options);
    const selectedParams = selectParams(params, propertyPath, options);
    const nestedProperties = Object.keys(selectedParams).reduce((memo, key, index) => {
      let newKey = key.replace(regex, `${TEMP_HOLDING_KEY}${DELIMITER}`);

      // when user wants to take allSiblings we have to fix the indexes so nested items from
      // different siblings don't overlap
      //
      // Example for key `nested.1.el`:
      //  'nested.0.el.0.value': 'val0.0',
      //  'nested.0.el.1.value': 'val0.1',
      //  'nested.1.el.0.value': 'val1',
      //  'nested.1.el.1.value': 'val2',
      //
      // has to be changed to:
      //  'TEMP_HOLDING_KEY.0.value': 'val0.0',
      //  'TEMP_HOLDING_KEY.1.value': 'val0.1',
      //  'TEMP_HOLDING_KEY.2.value': 'val1',
      //  'TEMP_HOLDING_KEY.3.value': 'val2',
      if (options?.includeAllSiblings) {
        newKey = newKey.replace(new RegExp(`${TEMP_HOLDING_KEY}\\${DELIMITER}(\\d*)`), `${TEMP_HOLDING_KEY}${DELIMITER}${index}`);
      }
      memo[newKey] = selectedParams[key];
      return memo;
    }, {});
    if (Object.keys(nestedProperties).length) {
      return flatModule.unflatten(nestedProperties)[TEMP_HOLDING_KEY];
    }
    return undefined;
  };

  /**
   * Merges params together and returns flatten result
   *
   * @param {any} params
   * @param {Array<any>} ...mergeParams
   * @returns {FlattenParams}
   * @memberof module:flat
   */
  const merge$4 = (params = {}, ...mergeParams) => {
    const flattenParams = flatModule.flatten(params);

    // reverse because we merge from right
    return mergeParams.reverse().reduce((globalMemo, mergeParam) => Object.keys(mergeParam).reduce((memo, key) => set(memo, key, mergeParam[key]), globalMemo), flattenParams);
  };

  /**
   * @load ./remove-path.doc.md
   * @memberof module:flat
   * @param {FlattenParams} params
   * @param {...string} properties
   * @returns {FlattenParams}
   */
  const removePath = (params, path) => {
    // by default simply filter out elements from the object
    let filtered = filterOutParams(params, path);

    // reverse means that we iterate from the closes parent
    const parentPaths = pathToParts(path).reverse();

    // but if one of the parent is an array
    parentPaths.find((parentPath, parentIndex) => {
      const parent = get$3(params, parentPath);
      if (Array.isArray(parent)) {
        // previous element is stringified index like 'property.1'
        const previousPaths = parentPaths[parentIndex - 1].split(DELIMITER);
        // so this is the index: 1
        const previousPathIndex = previousPaths[previousPaths.length - 1];
        parent.splice(+previousPathIndex, 1);
        filtered = set(params, parentPath, parent);
        // this works just for the firstly found array item, because in case of removing the last one
        // it leaves `[]` as a value.
        return true;
      }
      return false;
    });
    return filtered;
  };

  /**
   * @module flat
   * @name flat
   * @new in version 3.3
   * @load ./flat.doc.md
   */
  const flat = {
    /**
     * Raw `flatten` function exported from original {@link https://www.npmjs.com/package/flat flat}
     * package.
     */
    flatten: flatModule.flatten,
    /**
     * Raw `unflatten` function exported from original {@link https://www.npmjs.com/package/flat flat}
     * package.
     */
    unflatten: flatModule.unflatten,
    set,
    get: get$3,
    selectParams,
    filterOutParams,
    removePath,
    DELIMITER,
    pathToParts,
    merge: merge$4
  };

  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  var shams = function hasSymbols() {
  	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
  	if (typeof Symbol.iterator === 'symbol') { return true; }

  	var obj = {};
  	var sym = Symbol('test');
  	var symObj = Object(sym);
  	if (typeof sym === 'string') { return false; }

  	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
  	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

  	// temp disabled per https://github.com/ljharb/object.assign/issues/17
  	// if (sym instanceof Symbol) { return false; }
  	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  	// if (!(symObj instanceof Symbol)) { return false; }

  	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
  	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  	var symVal = 42;
  	obj[sym] = symVal;
  	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
  	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

  	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

  	var syms = Object.getOwnPropertySymbols(obj);
  	if (syms.length !== 1 || syms[0] !== sym) { return false; }

  	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

  	if (typeof Object.getOwnPropertyDescriptor === 'function') {
  		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
  		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
  	}

  	return true;
  };

  var origSymbol = typeof Symbol !== 'undefined' && Symbol;
  var hasSymbolSham = shams;

  var hasSymbols$1 = function hasNativeSymbols() {
  	if (typeof origSymbol !== 'function') { return false; }
  	if (typeof Symbol !== 'function') { return false; }
  	if (typeof origSymbol('foo') !== 'symbol') { return false; }
  	if (typeof Symbol('bar') !== 'symbol') { return false; }

  	return hasSymbolSham();
  };

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice$2 = Array.prototype.slice;
  var toStr$1 = Object.prototype.toString;
  var funcType = '[object Function]';

  var implementation$1 = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice$2.call(arguments, 1);

      var bound;
      var binder = function () {
          if (this instanceof bound) {
              var result = target.apply(
                  this,
                  args.concat(slice$2.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return this;
          } else {
              return target.apply(
                  that,
                  args.concat(slice$2.call(arguments))
              );
          }
      };

      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
          boundArgs.push('$' + i);
      }

      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
      }

      return bound;
  };

  var implementation = implementation$1;

  var functionBind = Function.prototype.bind || implementation;

  var bind$2 = functionBind;

  var src = bind$2.call(Function.call, Object.prototype.hasOwnProperty);

  var undefined$1;

  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError$1 = TypeError;

  // eslint-disable-next-line consistent-return
  var getEvalledConstructor = function (expressionSyntax) {
  	try {
  		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  	} catch (e) {}
  };

  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
  	try {
  		$gOPD({}, '');
  	} catch (e) {
  		$gOPD = null; // this is IE 8, which has a broken gOPD
  	}
  }

  var throwTypeError = function () {
  	throw new $TypeError$1();
  };
  var ThrowTypeError = $gOPD
  	? (function () {
  		try {
  			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
  			arguments.callee; // IE 8 does not throw here
  			return throwTypeError;
  		} catch (calleeThrows) {
  			try {
  				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
  				return $gOPD(arguments, 'callee').get;
  			} catch (gOPDthrows) {
  				return throwTypeError;
  			}
  		}
  	}())
  	: throwTypeError;

  var hasSymbols = hasSymbols$1();

  var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

  var needsEval = {};

  var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

  var INTRINSICS = {
  	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
  	'%Array%': Array,
  	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
  	'%AsyncFromSyncIteratorPrototype%': undefined$1,
  	'%AsyncFunction%': needsEval,
  	'%AsyncGenerator%': needsEval,
  	'%AsyncGeneratorFunction%': needsEval,
  	'%AsyncIteratorPrototype%': needsEval,
  	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
  	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
  	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
  	'%Boolean%': Boolean,
  	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  	'%Date%': Date,
  	'%decodeURI%': decodeURI,
  	'%decodeURIComponent%': decodeURIComponent,
  	'%encodeURI%': encodeURI,
  	'%encodeURIComponent%': encodeURIComponent,
  	'%Error%': Error,
  	'%eval%': eval, // eslint-disable-line no-eval
  	'%EvalError%': EvalError,
  	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
  	'%Function%': $Function,
  	'%GeneratorFunction%': needsEval,
  	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  	'%isFinite%': isFinite,
  	'%isNaN%': isNaN,
  	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
  	'%Math%': Math,
  	'%Number%': Number,
  	'%Object%': Object,
  	'%parseFloat%': parseFloat,
  	'%parseInt%': parseInt,
  	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  	'%RangeError%': RangeError,
  	'%ReferenceError%': ReferenceError,
  	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  	'%RegExp%': RegExp,
  	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
  	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  	'%String%': String,
  	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,
  	'%Symbol%': hasSymbols ? Symbol : undefined$1,
  	'%SyntaxError%': $SyntaxError,
  	'%ThrowTypeError%': ThrowTypeError,
  	'%TypedArray%': TypedArray,
  	'%TypeError%': $TypeError$1,
  	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  	'%URIError%': URIError,
  	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
  	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };

  try {
  	null.error; // eslint-disable-line no-unused-expressions
  } catch (e) {
  	// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
  	var errorProto = getProto(getProto(e));
  	INTRINSICS['%Error.prototype%'] = errorProto;
  }

  var doEval = function doEval(name) {
  	var value;
  	if (name === '%AsyncFunction%') {
  		value = getEvalledConstructor('async function () {}');
  	} else if (name === '%GeneratorFunction%') {
  		value = getEvalledConstructor('function* () {}');
  	} else if (name === '%AsyncGeneratorFunction%') {
  		value = getEvalledConstructor('async function* () {}');
  	} else if (name === '%AsyncGenerator%') {
  		var fn = doEval('%AsyncGeneratorFunction%');
  		if (fn) {
  			value = fn.prototype;
  		}
  	} else if (name === '%AsyncIteratorPrototype%') {
  		var gen = doEval('%AsyncGenerator%');
  		if (gen) {
  			value = getProto(gen.prototype);
  		}
  	}

  	INTRINSICS[name] = value;

  	return value;
  };

  var LEGACY_ALIASES = {
  	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  	'%ArrayPrototype%': ['Array', 'prototype'],
  	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
  	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  	'%BooleanPrototype%': ['Boolean', 'prototype'],
  	'%DataViewPrototype%': ['DataView', 'prototype'],
  	'%DatePrototype%': ['Date', 'prototype'],
  	'%ErrorPrototype%': ['Error', 'prototype'],
  	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
  	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  	'%FunctionPrototype%': ['Function', 'prototype'],
  	'%Generator%': ['GeneratorFunction', 'prototype'],
  	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  	'%JSONParse%': ['JSON', 'parse'],
  	'%JSONStringify%': ['JSON', 'stringify'],
  	'%MapPrototype%': ['Map', 'prototype'],
  	'%NumberPrototype%': ['Number', 'prototype'],
  	'%ObjectPrototype%': ['Object', 'prototype'],
  	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  	'%PromisePrototype%': ['Promise', 'prototype'],
  	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  	'%Promise_all%': ['Promise', 'all'],
  	'%Promise_reject%': ['Promise', 'reject'],
  	'%Promise_resolve%': ['Promise', 'resolve'],
  	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
  	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  	'%RegExpPrototype%': ['RegExp', 'prototype'],
  	'%SetPrototype%': ['Set', 'prototype'],
  	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  	'%StringPrototype%': ['String', 'prototype'],
  	'%SymbolPrototype%': ['Symbol', 'prototype'],
  	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
  	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  	'%URIErrorPrototype%': ['URIError', 'prototype'],
  	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
  	'%WeakSetPrototype%': ['WeakSet', 'prototype']
  };

  var bind$1 = functionBind;
  var hasOwn$1 = src;
  var $concat$1 = bind$1.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind$1.call(Function.apply, Array.prototype.splice);
  var $replace$1 = bind$1.call(Function.call, String.prototype.replace);
  var $strSlice = bind$1.call(Function.call, String.prototype.slice);
  var $exec = bind$1.call(Function.call, RegExp.prototype.exec);

  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar$1 = /\\(\\)?/g; /** Used to match backslashes in property paths. */
  var stringToPath$2 = function stringToPath(string) {
  	var first = $strSlice(string, 0, 1);
  	var last = $strSlice(string, -1);
  	if (first === '%' && last !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  	} else if (last === '%' && first !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  	}
  	var result = [];
  	$replace$1(string, rePropName$1, function (match, number, quote, subString) {
  		result[result.length] = quote ? $replace$1(subString, reEscapeChar$1, '$1') : number || match;
  	});
  	return result;
  };
  /* end adaptation */

  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  	var intrinsicName = name;
  	var alias;
  	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
  		alias = LEGACY_ALIASES[intrinsicName];
  		intrinsicName = '%' + alias[0] + '%';
  	}

  	if (hasOwn$1(INTRINSICS, intrinsicName)) {
  		var value = INTRINSICS[intrinsicName];
  		if (value === needsEval) {
  			value = doEval(intrinsicName);
  		}
  		if (typeof value === 'undefined' && !allowMissing) {
  			throw new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  		}

  		return {
  			alias: alias,
  			name: intrinsicName,
  			value: value
  		};
  	}

  	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
  	if (typeof name !== 'string' || name.length === 0) {
  		throw new $TypeError$1('intrinsic name must be a non-empty string');
  	}
  	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
  		throw new $TypeError$1('"allowMissing" argument must be a boolean');
  	}

  	if ($exec(/^%?[^%]*%?$/, name) === null) {
  		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
  	}
  	var parts = stringToPath$2(name);
  	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

  	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  	var intrinsicRealName = intrinsic.name;
  	var value = intrinsic.value;
  	var skipFurtherCaching = false;

  	var alias = intrinsic.alias;
  	if (alias) {
  		intrinsicBaseName = alias[0];
  		$spliceApply(parts, $concat$1([0, 1], alias));
  	}

  	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
  		var part = parts[i];
  		var first = $strSlice(part, 0, 1);
  		var last = $strSlice(part, -1);
  		if (
  			(
  				(first === '"' || first === "'" || first === '`')
  				|| (last === '"' || last === "'" || last === '`')
  			)
  			&& first !== last
  		) {
  			throw new $SyntaxError('property names with quotes must have matching quotes');
  		}
  		if (part === 'constructor' || !isOwn) {
  			skipFurtherCaching = true;
  		}

  		intrinsicBaseName += '.' + part;
  		intrinsicRealName = '%' + intrinsicBaseName + '%';

  		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
  			value = INTRINSICS[intrinsicRealName];
  		} else if (value != null) {
  			if (!(part in value)) {
  				if (!allowMissing) {
  					throw new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');
  				}
  				return void undefined$1;
  			}
  			if ($gOPD && (i + 1) >= parts.length) {
  				var desc = $gOPD(value, part);
  				isOwn = !!desc;

  				// By convention, when a data property is converted to an accessor
  				// property to emulate a data property that does not suffer from
  				// the override mistake, that accessor's getter is marked with
  				// an `originalValue` property. Here, when we detect this, we
  				// uphold the illusion by pretending to see that original data
  				// property, i.e., returning the value rather than the getter
  				// itself.
  				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
  					value = desc.get;
  				} else {
  					value = value[part];
  				}
  			} else {
  				isOwn = hasOwn$1(value, part);
  				value = value[part];
  			}

  			if (isOwn && !skipFurtherCaching) {
  				INTRINSICS[intrinsicRealName] = value;
  			}
  		}
  	}
  	return value;
  };

  var callBind$1 = {exports: {}};

  (function (module) {

  	var bind = functionBind;
  	var GetIntrinsic = getIntrinsic;

  	var $apply = GetIntrinsic('%Function.prototype.apply%');
  	var $call = GetIntrinsic('%Function.prototype.call%');
  	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

  	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
  	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
  	var $max = GetIntrinsic('%Math.max%');

  	if ($defineProperty) {
  		try {
  			$defineProperty({}, 'a', { value: 1 });
  		} catch (e) {
  			// IE 8 has a broken defineProperty
  			$defineProperty = null;
  		}
  	}

  	module.exports = function callBind(originalFunction) {
  		var func = $reflectApply(bind, $call, arguments);
  		if ($gOPD && $defineProperty) {
  			var desc = $gOPD(func, 'length');
  			if (desc.configurable) {
  				// original length, plus the receiver, minus any additional arguments (after the receiver)
  				$defineProperty(
  					func,
  					'length',
  					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
  				);
  			}
  		}
  		return func;
  	};

  	var applyBind = function applyBind() {
  		return $reflectApply(bind, $apply, arguments);
  	};

  	if ($defineProperty) {
  		$defineProperty(module.exports, 'apply', { value: applyBind });
  	} else {
  		module.exports.apply = applyBind;
  	} 
  } (callBind$1));

  var callBindExports = callBind$1.exports;

  var GetIntrinsic$1 = getIntrinsic;

  var callBind = callBindExports;

  var $indexOf = callBind(GetIntrinsic$1('String.prototype.indexOf'));

  var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
  	var intrinsic = GetIntrinsic$1(name, !!allowMissing);
  	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
  		return callBind(intrinsic);
  	}
  	return intrinsic;
  };

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

  var hasMap = typeof Map === 'function' && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === 'function' && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString$2 = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
  // ie, `has-tostringtag/shams
  var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
      ? Symbol.toStringTag
      : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;

  var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
      [].__proto__ === Array.prototype // eslint-disable-line no-proto
          ? function (O) {
              return O.__proto__; // eslint-disable-line no-proto
          }
          : null
  );

  function addNumericSeparator(num, str) {
      if (
          num === Infinity
          || num === -Infinity
          || num !== num
          || (num && num > -1000 && num < 1000)
          || $test.call(/e/, str)
      ) {
          return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === 'number') {
          var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
          if (int !== num) {
              var intStr = String(int);
              var dec = $slice.call(str, intStr.length + 1);
              return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
          }
      }
      return $replace.call(str, sepRegex, '$&_');
  }

  var utilInspect = require$$0;
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol$5(inspectCustom) ? inspectCustom : null;

  var objectInspect = function inspect_(obj, options, depth, seen) {
      var opts = options || {};

      if (has$3(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
          throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (
          has$3(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
              ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
              : opts.maxStringLength !== null
          )
      ) {
          throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has$3(opts, 'customInspect') ? opts.customInspect : true;
      if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
          throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
      }

      if (
          has$3(opts, 'indent')
          && opts.indent !== null
          && opts.indent !== '\t'
          && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
      ) {
          throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has$3(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
          throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;

      if (typeof obj === 'undefined') {
          return 'undefined';
      }
      if (obj === null) {
          return 'null';
      }
      if (typeof obj === 'boolean') {
          return obj ? 'true' : 'false';
      }

      if (typeof obj === 'string') {
          return inspectString(obj, opts);
      }
      if (typeof obj === 'number') {
          if (obj === 0) {
              return Infinity / obj > 0 ? '0' : '-0';
          }
          var str = String(obj);
          return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === 'bigint') {
          var bigIntStr = String(obj) + 'n';
          return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }

      var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
      if (typeof depth === 'undefined') { depth = 0; }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
          return isArray$f(obj) ? '[Array]' : '[Object]';
      }

      var indent = getIndent(opts, depth);

      if (typeof seen === 'undefined') {
          seen = [];
      } else if (indexOf(seen, obj) >= 0) {
          return '[Circular]';
      }

      function inspect(value, from, noIndent) {
          if (from) {
              seen = $arrSlice.call(seen);
              seen.push(from);
          }
          if (noIndent) {
              var newOpts = {
                  depth: opts.depth
              };
              if (has$3(opts, 'quoteStyle')) {
                  newOpts.quoteStyle = opts.quoteStyle;
              }
              return inspect_(value, newOpts, depth + 1, seen);
          }
          return inspect_(value, opts, depth + 1, seen);
      }

      if (typeof obj === 'function' && !isRegExp$4(obj)) { // in older engines, regexes are callable
          var name = nameOf(obj);
          var keys = arrObjKeys(obj, inspect);
          return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
      }
      if (isSymbol$5(obj)) {
          var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
          return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement$1(obj)) {
          var s = '<' + $toLowerCase.call(String(obj.nodeName));
          var attrs = obj.attributes || [];
          for (var i = 0; i < attrs.length; i++) {
              s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
          }
          s += '>';
          if (obj.childNodes && obj.childNodes.length) { s += '...'; }
          s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
          return s;
      }
      if (isArray$f(obj)) {
          if (obj.length === 0) { return '[]'; }
          var xs = arrObjKeys(obj, inspect);
          if (indent && !singleLineValues(xs)) {
              return '[' + indentedJoin(xs, indent) + ']';
          }
          return '[ ' + $join.call(xs, ', ') + ' ]';
      }
      if (isError(obj)) {
          var parts = arrObjKeys(obj, inspect);
          if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
              return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
          }
          if (parts.length === 0) { return '[' + String(obj) + ']'; }
          return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
      }
      if (typeof obj === 'object' && customInspect) {
          if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
              return utilInspect(obj, { depth: maxDepth - depth });
          } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
              return obj.inspect();
          }
      }
      if (isMap(obj)) {
          var mapParts = [];
          if (mapForEach) {
              mapForEach.call(obj, function (value, key) {
                  mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
              });
          }
          return collectionOf('Map', mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
          var setParts = [];
          if (setForEach) {
              setForEach.call(obj, function (value) {
                  setParts.push(inspect(value, obj));
              });
          }
          return collectionOf('Set', setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
          return weakCollectionOf('WeakMap');
      }
      if (isWeakSet(obj)) {
          return weakCollectionOf('WeakSet');
      }
      if (isWeakRef(obj)) {
          return weakCollectionOf('WeakRef');
      }
      if (isNumber$1(obj)) {
          return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
          return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean$2(obj)) {
          return markBoxed(booleanValueOf.call(obj));
      }
      if (isString$1(obj)) {
          return markBoxed(inspect(String(obj)));
      }
      if (!isDate$1(obj) && !isRegExp$4(obj)) {
          var ys = arrObjKeys(obj, inspect);
          var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
          var protoTag = obj instanceof Object ? '' : 'null prototype';
          var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
          var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
          var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
          if (ys.length === 0) { return tag + '{}'; }
          if (indent) {
              return tag + '{' + indentedJoin(ys, indent) + '}';
          }
          return tag + '{ ' + $join.call(ys, ', ') + ' }';
      }
      return String(obj);
  };

  function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
      return quoteChar + s + quoteChar;
  }

  function quote(s) {
      return $replace.call(String(s), /"/g, '&quot;');
  }

  function isArray$f(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isDate$1(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isRegExp$4(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isString$1(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isNumber$1(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isBoolean$2(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

  // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
  function isSymbol$5(obj) {
      if (hasShammedSymbols) {
          return obj && typeof obj === 'object' && obj instanceof Symbol;
      }
      if (typeof obj === 'symbol') {
          return true;
      }
      if (!obj || typeof obj !== 'object' || !symToString) {
          return false;
      }
      try {
          symToString.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  function isBigInt(obj) {
      if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
          return false;
      }
      try {
          bigIntValueOf.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
  function has$3(obj, key) {
      return hasOwn.call(obj, key);
  }

  function toStr(obj) {
      return objectToString$2.call(obj);
  }

  function nameOf(f) {
      if (f.name) { return f.name; }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) { return m[1]; }
      return null;
  }

  function indexOf(xs, x) {
      if (xs.indexOf) { return xs.indexOf(x); }
      for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) { return i; }
      }
      return -1;
  }

  function isMap(x) {
      if (!mapSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          mapSize.call(x);
          try {
              setSize.call(x);
          } catch (s) {
              return true;
          }
          return x instanceof Map; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakMapHas.call(x, weakMapHas);
          try {
              weakSetHas.call(x, weakSetHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakRefDeref.call(x);
          return true;
      } catch (e) {}
      return false;
  }

  function isSet(x) {
      if (!setSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          setSize.call(x);
          try {
              mapSize.call(x);
          } catch (m) {
              return true;
          }
          return x instanceof Set; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakSetHas.call(x, weakSetHas);
          try {
              weakMapHas.call(x, weakMapHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isElement$1(x) {
      if (!x || typeof x !== 'object') { return false; }
      if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
          return true;
      }
      return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
  }

  function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength;
          var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
          return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      // eslint-disable-next-line no-control-regex
      var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, 'single', opts);
  }

  function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
          8: 'b',
          9: 't',
          10: 'n',
          12: 'f',
          13: 'r'
      }[n];
      if (x) { return '\\' + x; }
      return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
  }

  function markBoxed(str) {
      return 'Object(' + str + ')';
  }

  function weakCollectionOf(type) {
      return type + ' { ? }';
  }

  function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
      return type + ' (' + size + ') {' + joinedEntries + '}';
  }

  function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
          if (indexOf(xs[i], '\n') >= 0) {
              return false;
          }
      }
      return true;
  }

  function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === '\t') {
          baseIndent = '\t';
      } else if (typeof opts.indent === 'number' && opts.indent > 0) {
          baseIndent = $join.call(Array(opts.indent + 1), ' ');
      } else {
          return null;
      }
      return {
          base: baseIndent,
          prev: $join.call(Array(depth + 1), baseIndent)
      };
  }

  function indentedJoin(xs, indent) {
      if (xs.length === 0) { return ''; }
      var lineJoiner = '\n' + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
  }

  function arrObjKeys(obj, inspect) {
      var isArr = isArray$f(obj);
      var xs = [];
      if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++) {
              xs[i] = has$3(obj, i) ? inspect(obj[i], obj) : '';
          }
      }
      var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++) {
              symMap['$' + syms[k]] = syms[k];
          }
      }

      for (var key in obj) { // eslint-disable-line no-restricted-syntax
          if (!has$3(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
              // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
              continue; // eslint-disable-line no-restricted-syntax, no-continue
          } else if ($test.call(/[^\w$]/, key)) {
              xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
          } else {
              xs.push(key + ': ' + inspect(obj[key], obj));
          }
      }
      if (typeof gOPS === 'function') {
          for (var j = 0; j < syms.length; j++) {
              if (isEnumerable.call(obj, syms[j])) {
                  xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
              }
          }
      }
      return xs;
  }

  var GetIntrinsic = getIntrinsic;
  var callBound = callBound$1;
  var inspect = objectInspect;

  var $TypeError = GetIntrinsic('%TypeError%');
  var $WeakMap = GetIntrinsic('%WeakMap%', true);
  var $Map = GetIntrinsic('%Map%', true);

  var $weakMapGet = callBound('WeakMap.prototype.get', true);
  var $weakMapSet = callBound('WeakMap.prototype.set', true);
  var $weakMapHas = callBound('WeakMap.prototype.has', true);
  var $mapGet = callBound('Map.prototype.get', true);
  var $mapSet = callBound('Map.prototype.set', true);
  var $mapHas = callBound('Map.prototype.has', true);

  /*
   * This function traverses the list returning the node corresponding to the
   * given key.
   *
   * That node is also moved to the head of the list, so that if it's accessed
   * again we don't need to traverse the whole list. By doing so, all the recently
   * used nodes can be accessed relatively quickly.
   */
  var listGetNode = function (list, key) { // eslint-disable-line consistent-return
  	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
  		if (curr.key === key) {
  			prev.next = curr.next;
  			curr.next = list.next;
  			list.next = curr; // eslint-disable-line no-param-reassign
  			return curr;
  		}
  	}
  };

  var listGet = function (objects, key) {
  	var node = listGetNode(objects, key);
  	return node && node.value;
  };
  var listSet = function (objects, key, value) {
  	var node = listGetNode(objects, key);
  	if (node) {
  		node.value = value;
  	} else {
  		// Prepend the new node to the beginning of the list
  		objects.next = { // eslint-disable-line no-param-reassign
  			key: key,
  			next: objects.next,
  			value: value
  		};
  	}
  };
  var listHas = function (objects, key) {
  	return !!listGetNode(objects, key);
  };

  var sideChannel = function getSideChannel() {
  	var $wm;
  	var $m;
  	var $o;
  	var channel = {
  		assert: function (key) {
  			if (!channel.has(key)) {
  				throw new $TypeError('Side channel does not contain ' + inspect(key));
  			}
  		},
  		get: function (key) { // eslint-disable-line consistent-return
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if ($wm) {
  					return $weakMapGet($wm, key);
  				}
  			} else if ($Map) {
  				if ($m) {
  					return $mapGet($m, key);
  				}
  			} else {
  				if ($o) { // eslint-disable-line no-lonely-if
  					return listGet($o, key);
  				}
  			}
  		},
  		has: function (key) {
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if ($wm) {
  					return $weakMapHas($wm, key);
  				}
  			} else if ($Map) {
  				if ($m) {
  					return $mapHas($m, key);
  				}
  			} else {
  				if ($o) { // eslint-disable-line no-lonely-if
  					return listHas($o, key);
  				}
  			}
  			return false;
  		},
  		set: function (key, value) {
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if (!$wm) {
  					$wm = new $WeakMap();
  				}
  				$weakMapSet($wm, key, value);
  			} else if ($Map) {
  				if (!$m) {
  					$m = new $Map();
  				}
  				$mapSet($m, key, value);
  			} else {
  				if (!$o) {
  					/*
  					 * Initialize the linked list as an empty node, so that we don't have
  					 * to special-case handling of the first node: we can always refer to
  					 * it as (previous node).next, instead of something like (list).head
  					 */
  					$o = { key: {}, next: null };
  				}
  				listSet($o, key, value);
  			}
  		}
  	};
  	return channel;
  };

  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;

  var Format = {
      RFC1738: 'RFC1738',
      RFC3986: 'RFC3986'
  };

  var formats$3 = {
      'default': Format.RFC3986,
      formatters: {
          RFC1738: function (value) {
              return replace.call(value, percentTwenties, '+');
          },
          RFC3986: function (value) {
              return String(value);
          }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
  };

  var formats$2 = formats$3;

  var has$2 = Object.prototype.hasOwnProperty;
  var isArray$e = Array.isArray;

  var hexTable = (function () {
      var array = [];
      for (var i = 0; i < 256; ++i) {
          array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
      }

      return array;
  }());

  var compactQueue = function compactQueue(queue) {
      while (queue.length > 1) {
          var item = queue.pop();
          var obj = item.obj[item.prop];

          if (isArray$e(obj)) {
              var compacted = [];

              for (var j = 0; j < obj.length; ++j) {
                  if (typeof obj[j] !== 'undefined') {
                      compacted.push(obj[j]);
                  }
              }

              item.obj[item.prop] = compacted;
          }
      }
  };

  var arrayToObject$1 = function arrayToObject(source, options) {
      var obj = options && options.plainObjects ? Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
          if (typeof source[i] !== 'undefined') {
              obj[i] = source[i];
          }
      }

      return obj;
  };

  var merge$3 = function merge(target, source, options) {
      /* eslint no-param-reassign: 0 */
      if (!source) {
          return target;
      }

      if (typeof source !== 'object') {
          if (isArray$e(target)) {
              target.push(source);
          } else if (target && typeof target === 'object') {
              if ((options && (options.plainObjects || options.allowPrototypes)) || !has$2.call(Object.prototype, source)) {
                  target[source] = true;
              }
          } else {
              return [target, source];
          }

          return target;
      }

      if (!target || typeof target !== 'object') {
          return [target].concat(source);
      }

      var mergeTarget = target;
      if (isArray$e(target) && !isArray$e(source)) {
          mergeTarget = arrayToObject$1(target, options);
      }

      if (isArray$e(target) && isArray$e(source)) {
          source.forEach(function (item, i) {
              if (has$2.call(target, i)) {
                  var targetItem = target[i];
                  if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                      target[i] = merge(targetItem, item, options);
                  } else {
                      target.push(item);
                  }
              } else {
                  target[i] = item;
              }
          });
          return target;
      }

      return Object.keys(source).reduce(function (acc, key) {
          var value = source[key];

          if (has$2.call(acc, key)) {
              acc[key] = merge(acc[key], value, options);
          } else {
              acc[key] = value;
          }
          return acc;
      }, mergeTarget);
  };

  var assign$1 = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function (acc, key) {
          acc[key] = source[key];
          return acc;
      }, target);
  };

  var decode = function (str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, ' ');
      if (charset === 'iso-8859-1') {
          // unescape never throws, no try...catch needed:
          return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      // utf-8
      try {
          return decodeURIComponent(strWithoutPlus);
      } catch (e) {
          return strWithoutPlus;
      }
  };

  var encode$2 = function encode(str, defaultEncoder, charset, kind, format) {
      // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
      // It has been adapted here for stricter adherence to RFC 3986
      if (str.length === 0) {
          return str;
      }

      var string = str;
      if (typeof str === 'symbol') {
          string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== 'string') {
          string = String(str);
      }

      if (charset === 'iso-8859-1') {
          return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
              return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
          });
      }

      var out = '';
      for (var i = 0; i < string.length; ++i) {
          var c = string.charCodeAt(i);

          if (
              c === 0x2D // -
              || c === 0x2E // .
              || c === 0x5F // _
              || c === 0x7E // ~
              || (c >= 0x30 && c <= 0x39) // 0-9
              || (c >= 0x41 && c <= 0x5A) // a-z
              || (c >= 0x61 && c <= 0x7A) // A-Z
              || (format === formats$2.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
          ) {
              out += string.charAt(i);
              continue;
          }

          if (c < 0x80) {
              out = out + hexTable[c];
              continue;
          }

          if (c < 0x800) {
              out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          if (c < 0xD800 || c >= 0xE000) {
              out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          i += 1;
          c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
          /* eslint operator-linebreak: [2, "before"] */
          out += hexTable[0xF0 | (c >> 18)]
              + hexTable[0x80 | ((c >> 12) & 0x3F)]
              + hexTable[0x80 | ((c >> 6) & 0x3F)]
              + hexTable[0x80 | (c & 0x3F)];
      }

      return out;
  };

  var compact = function compact(value) {
      var queue = [{ obj: { o: value }, prop: 'o' }];
      var refs = [];

      for (var i = 0; i < queue.length; ++i) {
          var item = queue[i];
          var obj = item.obj[item.prop];

          var keys = Object.keys(obj);
          for (var j = 0; j < keys.length; ++j) {
              var key = keys[j];
              var val = obj[key];
              if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                  queue.push({ obj: obj, prop: key });
                  refs.push(val);
              }
          }
      }

      compactQueue(queue);

      return value;
  };

  var isRegExp$3 = function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  var isBuffer$5 = function isBuffer(obj) {
      if (!obj || typeof obj !== 'object') {
          return false;
      }

      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };

  var combine$1 = function combine(a, b) {
      return [].concat(a, b);
  };

  var maybeMap = function maybeMap(val, fn) {
      if (isArray$e(val)) {
          var mapped = [];
          for (var i = 0; i < val.length; i += 1) {
              mapped.push(fn(val[i]));
          }
          return mapped;
      }
      return fn(val);
  };

  var utils$3 = {
      arrayToObject: arrayToObject$1,
      assign: assign$1,
      combine: combine$1,
      compact: compact,
      decode: decode,
      encode: encode$2,
      isBuffer: isBuffer$5,
      isRegExp: isRegExp$3,
      maybeMap: maybeMap,
      merge: merge$3
  };

  var getSideChannel = sideChannel;
  var utils$2 = utils$3;
  var formats$1 = formats$3;
  var has$1 = Object.prototype.hasOwnProperty;

  var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
          return prefix + '[]';
      },
      comma: 'comma',
      indices: function indices(prefix, key) {
          return prefix + '[' + key + ']';
      },
      repeat: function repeat(prefix) {
          return prefix;
      }
  };

  var isArray$d = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function (arr, valueOrArray) {
      push.apply(arr, isArray$d(valueOrArray) ? valueOrArray : [valueOrArray]);
  };

  var toISO = Date.prototype.toISOString;

  var defaultFormat = formats$1['default'];
  var defaults$6 = {
      addQueryPrefix: false,
      allowDots: false,
      charset: 'utf-8',
      charsetSentinel: false,
      delimiter: '&',
      encode: true,
      encoder: utils$2.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats$1.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
          return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
  };

  var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
      return typeof v === 'string'
          || typeof v === 'number'
          || typeof v === 'boolean'
          || typeof v === 'symbol'
          || typeof v === 'bigint';
  };

  var sentinel = {};

  var stringify$1 = function stringify(
      object,
      prefix,
      generateArrayPrefix,
      commaRoundTrip,
      strictNullHandling,
      skipNulls,
      encoder,
      filter,
      sort,
      allowDots,
      serializeDate,
      format,
      formatter,
      encodeValuesOnly,
      charset,
      sideChannel
  ) {
      var obj = object;

      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
          // Where object last appeared in the ref tree
          var pos = tmpSc.get(object);
          step += 1;
          if (typeof pos !== 'undefined') {
              if (pos === step) {
                  throw new RangeError('Cyclic object value');
              } else {
                  findFlag = true; // Break while
              }
          }
          if (typeof tmpSc.get(sentinel) === 'undefined') {
              step = 0;
          }
      }

      if (typeof filter === 'function') {
          obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
          obj = serializeDate(obj);
      } else if (generateArrayPrefix === 'comma' && isArray$d(obj)) {
          obj = utils$2.maybeMap(obj, function (value) {
              if (value instanceof Date) {
                  return serializeDate(value);
              }
              return value;
          });
      }

      if (obj === null) {
          if (strictNullHandling) {
              return encoder && !encodeValuesOnly ? encoder(prefix, defaults$6.encoder, charset, 'key', format) : prefix;
          }

          obj = '';
      }

      if (isNonNullishPrimitive(obj) || utils$2.isBuffer(obj)) {
          if (encoder) {
              var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$6.encoder, charset, 'key', format);
              return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$6.encoder, charset, 'value', format))];
          }
          return [formatter(prefix) + '=' + formatter(String(obj))];
      }

      var values = [];

      if (typeof obj === 'undefined') {
          return values;
      }

      var objKeys;
      if (generateArrayPrefix === 'comma' && isArray$d(obj)) {
          // we need to join elements in
          if (encodeValuesOnly && encoder) {
              obj = utils$2.maybeMap(obj, encoder);
          }
          objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
      } else if (isArray$d(filter)) {
          objKeys = filter;
      } else {
          var keys = Object.keys(obj);
          objKeys = sort ? keys.sort(sort) : keys;
      }

      var adjustedPrefix = commaRoundTrip && isArray$d(obj) && obj.length === 1 ? prefix + '[]' : prefix;

      for (var j = 0; j < objKeys.length; ++j) {
          var key = objKeys[j];
          var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

          if (skipNulls && value === null) {
              continue;
          }

          var keyPrefix = isArray$d(obj)
              ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix
              : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');

          sideChannel.set(object, step);
          var valueSideChannel = getSideChannel();
          valueSideChannel.set(sentinel, sideChannel);
          pushToArray(values, stringify(
              value,
              keyPrefix,
              generateArrayPrefix,
              commaRoundTrip,
              strictNullHandling,
              skipNulls,
              generateArrayPrefix === 'comma' && encodeValuesOnly && isArray$d(obj) ? null : encoder,
              filter,
              sort,
              allowDots,
              serializeDate,
              format,
              formatter,
              encodeValuesOnly,
              charset,
              valueSideChannel
          ));
      }

      return values;
  };

  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
      if (!opts) {
          return defaults$6;
      }

      if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
          throw new TypeError('Encoder has to be a function.');
      }

      var charset = opts.charset || defaults$6.charset;
      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
          throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
      }

      var format = formats$1['default'];
      if (typeof opts.format !== 'undefined') {
          if (!has$1.call(formats$1.formatters, opts.format)) {
              throw new TypeError('Unknown format option provided.');
          }
          format = opts.format;
      }
      var formatter = formats$1.formatters[format];

      var filter = defaults$6.filter;
      if (typeof opts.filter === 'function' || isArray$d(opts.filter)) {
          filter = opts.filter;
      }

      return {
          addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults$6.addQueryPrefix,
          allowDots: typeof opts.allowDots === 'undefined' ? defaults$6.allowDots : !!opts.allowDots,
          charset: charset,
          charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$6.charsetSentinel,
          delimiter: typeof opts.delimiter === 'undefined' ? defaults$6.delimiter : opts.delimiter,
          encode: typeof opts.encode === 'boolean' ? opts.encode : defaults$6.encode,
          encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults$6.encoder,
          encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults$6.encodeValuesOnly,
          filter: filter,
          format: format,
          formatter: formatter,
          serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults$6.serializeDate,
          skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults$6.skipNulls,
          sort: typeof opts.sort === 'function' ? opts.sort : null,
          strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$6.strictNullHandling
      };
  };

  var stringify_1 = function (object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);

      var objKeys;
      var filter;

      if (typeof options.filter === 'function') {
          filter = options.filter;
          obj = filter('', obj);
      } else if (isArray$d(options.filter)) {
          filter = options.filter;
          objKeys = filter;
      }

      var keys = [];

      if (typeof obj !== 'object' || obj === null) {
          return '';
      }

      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
          arrayFormat = opts.arrayFormat;
      } else if (opts && 'indices' in opts) {
          arrayFormat = opts.indices ? 'indices' : 'repeat';
      } else {
          arrayFormat = 'indices';
      }

      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
          throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
      }
      var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;

      if (!objKeys) {
          objKeys = Object.keys(obj);
      }

      if (options.sort) {
          objKeys.sort(options.sort);
      }

      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];

          if (options.skipNulls && obj[key] === null) {
              continue;
          }
          pushToArray(keys, stringify$1(
              obj[key],
              key,
              generateArrayPrefix,
              commaRoundTrip,
              options.strictNullHandling,
              options.skipNulls,
              options.encode ? options.encoder : null,
              options.filter,
              options.sort,
              options.allowDots,
              options.serializeDate,
              options.format,
              options.formatter,
              options.encodeValuesOnly,
              options.charset,
              sideChannel
          ));
      }

      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? '?' : '';

      if (options.charsetSentinel) {
          if (options.charset === 'iso-8859-1') {
              // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
              prefix += 'utf8=%26%2310003%3B&';
          } else {
              // encodeURIComponent('✓')
              prefix += 'utf8=%E2%9C%93&';
          }
      }

      return joined.length > 0 ? prefix + joined : '';
  };

  var utils$1 = utils$3;

  var has = Object.prototype.hasOwnProperty;
  var isArray$c = Array.isArray;

  var defaults$5 = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: 'utf-8',
      charsetSentinel: false,
      comma: false,
      decoder: utils$1.decode,
      delimiter: '&',
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1000,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
  };

  var interpretNumericEntities = function (str) {
      return str.replace(/&#(\d+);/g, function ($0, numberStr) {
          return String.fromCharCode(parseInt(numberStr, 10));
      });
  };

  var parseArrayValue = function (val, options) {
      if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
          return val.split(',');
      }

      return val;
  };

  // This is what browsers will submit when the ✓ character occurs in an
  // application/x-www-form-urlencoded body and the encoding of the page containing
  // the form is iso-8859-1, or when the submitted form has an accept-charset
  // attribute of iso-8859-1. Presumably also with other charsets that do not contain
  // the ✓ character, such as us-ascii.
  var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

  // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
  var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

  var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
      var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1; // Keep track of where the utf8 sentinel was found
      var i;

      var charset = options.charset;
      if (options.charsetSentinel) {
          for (i = 0; i < parts.length; ++i) {
              if (parts[i].indexOf('utf8=') === 0) {
                  if (parts[i] === charsetSentinel) {
                      charset = 'utf-8';
                  } else if (parts[i] === isoSentinel) {
                      charset = 'iso-8859-1';
                  }
                  skipIndex = i;
                  i = parts.length; // The eslint settings do not allow break;
              }
          }
      }

      for (i = 0; i < parts.length; ++i) {
          if (i === skipIndex) {
              continue;
          }
          var part = parts[i];

          var bracketEqualsPos = part.indexOf(']=');
          var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

          var key, val;
          if (pos === -1) {
              key = options.decoder(part, defaults$5.decoder, charset, 'key');
              val = options.strictNullHandling ? null : '';
          } else {
              key = options.decoder(part.slice(0, pos), defaults$5.decoder, charset, 'key');
              val = utils$1.maybeMap(
                  parseArrayValue(part.slice(pos + 1), options),
                  function (encodedVal) {
                      return options.decoder(encodedVal, defaults$5.decoder, charset, 'value');
                  }
              );
          }

          if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
              val = interpretNumericEntities(val);
          }

          if (part.indexOf('[]=') > -1) {
              val = isArray$c(val) ? [val] : val;
          }

          if (has.call(obj, key)) {
              obj[key] = utils$1.combine(obj[key], val);
          } else {
              obj[key] = val;
          }
      }

      return obj;
  };

  var parseObject = function (chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);

      for (var i = chain.length - 1; i >= 0; --i) {
          var obj;
          var root = chain[i];

          if (root === '[]' && options.parseArrays) {
              obj = [].concat(leaf);
          } else {
              obj = options.plainObjects ? Object.create(null) : {};
              var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
              var index = parseInt(cleanRoot, 10);
              if (!options.parseArrays && cleanRoot === '') {
                  obj = { 0: leaf };
              } else if (
                  !isNaN(index)
                  && root !== cleanRoot
                  && String(index) === cleanRoot
                  && index >= 0
                  && (options.parseArrays && index <= options.arrayLimit)
              ) {
                  obj = [];
                  obj[index] = leaf;
              } else if (cleanRoot !== '__proto__') {
                  obj[cleanRoot] = leaf;
              }
          }

          leaf = obj;
      }

      return leaf;
  };

  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
          return;
      }

      // Transform dot notation to bracket notation
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

      // The regex chunks

      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;

      // Get the parent

      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;

      // Stash the parent if it exists

      var keys = [];
      if (parent) {
          // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
          if (!options.plainObjects && has.call(Object.prototype, parent)) {
              if (!options.allowPrototypes) {
                  return;
              }
          }

          keys.push(parent);
      }

      // Loop through children appending to the array until we hit depth

      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
          i += 1;
          if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
              if (!options.allowPrototypes) {
                  return;
              }
          }
          keys.push(segment[1]);
      }

      // If there's a remainder, just add whatever is left

      if (segment) {
          keys.push('[' + key.slice(segment.index) + ']');
      }

      return parseObject(keys, val, options, valuesParsed);
  };

  var normalizeParseOptions = function normalizeParseOptions(opts) {
      if (!opts) {
          return defaults$5;
      }

      if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
          throw new TypeError('Decoder has to be a function.');
      }

      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
          throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
      }
      var charset = typeof opts.charset === 'undefined' ? defaults$5.charset : opts.charset;

      return {
          allowDots: typeof opts.allowDots === 'undefined' ? defaults$5.allowDots : !!opts.allowDots,
          allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$5.allowPrototypes,
          allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults$5.allowSparse,
          arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$5.arrayLimit,
          charset: charset,
          charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$5.charsetSentinel,
          comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$5.comma,
          decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$5.decoder,
          delimiter: typeof opts.delimiter === 'string' || utils$1.isRegExp(opts.delimiter) ? opts.delimiter : defaults$5.delimiter,
          // eslint-disable-next-line no-implicit-coercion, no-extra-parens
          depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults$5.depth,
          ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
          interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$5.interpretNumericEntities,
          parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$5.parameterLimit,
          parseArrays: opts.parseArrays !== false,
          plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$5.plainObjects,
          strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$5.strictNullHandling
      };
  };

  var parse$2 = function (str, opts) {
      var options = normalizeParseOptions(opts);

      if (str === '' || str === null || typeof str === 'undefined') {
          return options.plainObjects ? Object.create(null) : {};
      }

      var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
      var obj = options.plainObjects ? Object.create(null) : {};

      // Iterate over the keys and setup the new object

      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
          obj = utils$1.merge(obj, newObj, options);
      }

      if (options.allowSparse === true) {
          return obj;
      }

      return utils$1.compact(obj);
  };

  var stringify = stringify_1;
  var parse$1 = parse$2;
  var formats = formats$3;

  var lib$2 = {
      formats: formats,
      parse: parse$1,
      stringify: stringify
  };

  function _extends$t() { _extends$t = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$t.apply(this, arguments); }
  /**
   * @private
   *
   * @classdesc
   * Overrides one of the AdminJS core components when user passes it's name to ComponentLoader
   *
   * If case of being overridden, component receives additional prop: `OriginalComponent`
   *
   * @example
   * new ComponentLoader().override('SidebarFooter', MySidebarFooter)
   */
  function allowOverride(OriginalComponent, name) {
    const WrapperComponent = props => {
      let Component = OriginalComponent;

      /**
       * @new in version 6.3
       *
       * This adds support for future theme-specific components via their "theme.bundle.js"
       *
       */
      if (typeof window !== 'undefined') {
        Component = window.AdminJS?.UserComponents?.[name] ?? window.THEME_COMPONENTS?.[name] ?? OriginalComponent;
      }
      return /*#__PURE__*/React__default$1.default.createElement(Component, _extends$t({}, props, {
        OriginalComponent: OriginalComponent
      }));
    };
    return WrapperComponent;
  }

  const actionHasDisabledComponent = action => typeof action.component !== 'undefined' && action.component === false;

  const h$3 = new ViewHelpers();
  const actionHref = (action, params) => {
    const actionName = action.name;
    if (!action.component && !action.hasHandler) {
      return null;
    }
    if (params.recordIds?.length) {
      params.recordIds = [...new Set(params.recordIds)];
    }
    const hrefMap = {
      record: () => h$3.recordActionUrl({
        ...params,
        actionName
      }),
      resource: () => h$3.resourceActionUrl({
        resourceId: params.resourceId,
        actionName,
        search: params.search
      }),
      bulk: () => h$3.bulkActionUrl({
        ...params,
        actionName
      })
    };
    if (hrefMap[action.actionType]) {
      return hrefMap[action.actionType]();
    }
    throw new Error('"actionType" should be either record, resource or bulk');
  };

  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // utils is a library of generic helper functions non-specific to axios

  const {toString: toString$6} = Object.prototype;
  const {getPrototypeOf} = Object;

  const kindOf = (cache => thing => {
      const str = toString$6.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(Object.create(null));

  const kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type
  };

  const typeOfTest = type => thing => typeof thing === type;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   *
   * @returns {boolean} True if value is an Array, otherwise false
   */
  const {isArray: isArray$b} = Array;

  /**
   * Determine if a value is undefined
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  const isUndefined = typeOfTest('undefined');

  /**
   * Determine if a value is a Buffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer$4(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && isFunction$4(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  const isArrayBuffer = kindOfTest('ArrayBuffer');


  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    let result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a String, otherwise false
   */
  const isString = typeOfTest('string');

  /**
   * Determine if a value is a Function
   *
   * @param {*} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  const isFunction$4 = typeOfTest('function');

  /**
   * Determine if a value is a Number
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Number, otherwise false
   */
  const isNumber = typeOfTest('number');

  /**
   * Determine if a value is an Object
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an Object, otherwise false
   */
  const isObject$c = (thing) => thing !== null && typeof thing === 'object';

  /**
   * Determine if a value is a Boolean
   *
   * @param {*} thing The value to test
   * @returns {boolean} True if value is a Boolean, otherwise false
   */
  const isBoolean$1 = thing => thing === true || thing === false;

  /**
   * Determine if a value is a plain Object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a plain Object, otherwise false
   */
  const isPlainObject$2 = (val) => {
    if (kindOf(val) !== 'object') {
      return false;
    }

    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };

  /**
   * Determine if a value is a Date
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Date, otherwise false
   */
  const isDate = kindOfTest('Date');

  /**
   * Determine if a value is a File
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFile = kindOfTest('File');

  /**
   * Determine if a value is a Blob
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  const isBlob = kindOfTest('Blob');

  /**
   * Determine if a value is a FileList
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFileList = kindOfTest('FileList');

  /**
   * Determine if a value is a Stream
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  const isStream = (val) => isObject$c(val) && isFunction$4(val.pipe);

  /**
   * Determine if a value is a FormData
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  const isFormData = (thing) => {
    const pattern = '[object FormData]';
    return thing && (
      (typeof FormData === 'function' && thing instanceof FormData) ||
      toString$6.call(thing) === pattern ||
      (isFunction$4(thing.toString) && thing.toString() === pattern)
    );
  };

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  const isURLSearchParams = kindOfTest('URLSearchParams');

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   *
   * @returns {String} The String freed of excess whitespace
   */
  const trim = (str) => str.trim ?
    str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   *
   * @param {Boolean} [allOwnKeys = false]
   * @returns {any}
   */
  function forEach(obj, fn, {allOwnKeys = false} = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    let i;
    let l;

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray$b(obj)) {
      // Iterate over array values
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;

      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }

  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }

  const _global = (() => {
    /*eslint no-undef:0*/
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
  })();

  const isContextDefined = (context) => !isUndefined(context) && context !== _global;

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   *
   * @returns {Object} Result of all merge properties
   */
  function merge$2(/* obj1, obj2, obj3, ... */) {
    const {caseless} = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject$2(result[targetKey]) && isPlainObject$2(val)) {
        result[targetKey] = merge$2(result[targetKey], val);
      } else if (isPlainObject$2(val)) {
        result[targetKey] = merge$2({}, val);
      } else if (isArray$b(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };

    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   *
   * @param {Boolean} [allOwnKeys]
   * @returns {Object} The resulting value of object a
   */
  const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction$4(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, {allOwnKeys});
    return a;
  };

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   *
   * @returns {string} content value without BOM
   */
  const stripBOM = (content) => {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  };

  /**
   * Inherit the prototype methods from one constructor into another
   * @param {function} constructor
   * @param {function} superConstructor
   * @param {object} [props]
   * @param {object} [descriptors]
   *
   * @returns {void}
   */
  const inherits = (constructor, superConstructor, props, descriptors) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, 'super', {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };

  /**
   * Resolve object with deep prototype chain to a flat object
   * @param {Object} sourceObj source object
   * @param {Object} [destObj]
   * @param {Function|Boolean} [filter]
   * @param {Function} [propFilter]
   *
   * @returns {Object}
   */
  const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};

    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;

    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

    return destObj;
  };

  /**
   * Determines whether a string ends with the characters of a specified string
   *
   * @param {String} str
   * @param {String} searchString
   * @param {Number} [position= 0]
   *
   * @returns {boolean}
   */
  const endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === undefined || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };


  /**
   * Returns new array from array like object or null if failed
   *
   * @param {*} [thing]
   *
   * @returns {?Array}
   */
  const toArray = (thing) => {
    if (!thing) return null;
    if (isArray$b(thing)) return thing;
    let i = thing.length;
    if (!isNumber(i)) return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };

  /**
   * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
   * thing passed in is an instance of Uint8Array
   *
   * @param {TypedArray}
   *
   * @returns {Array}
   */
  // eslint-disable-next-line func-names
  const isTypedArray$4 = (TypedArray => {
    // eslint-disable-next-line func-names
    return thing => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

  /**
   * For each entry in the object, call the function with the key and value.
   *
   * @param {Object<any, any>} obj - The object to iterate over.
   * @param {Function} fn - The function to call for each entry.
   *
   * @returns {void}
   */
  const forEachEntry = (obj, fn) => {
    const generator = obj && obj[Symbol.iterator];

    const iterator = generator.call(obj);

    let result;

    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };

  /**
   * It takes a regular expression and a string, and returns an array of all the matches
   *
   * @param {string} regExp - The regular expression to match against.
   * @param {string} str - The string to search.
   *
   * @returns {Array<boolean>}
   */
  const matchAll = (regExp, str) => {
    let matches;
    const arr = [];

    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }

    return arr;
  };

  /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
  const isHTMLForm = kindOfTest('HTMLFormElement');

  const toCamelCase = str => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };

  /* Creating a function that will check if an object has a property. */
  const hasOwnProperty$c = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

  /**
   * Determine if a value is a RegExp object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a RegExp object, otherwise false
   */
  const isRegExp$2 = kindOfTest('RegExp');

  const reduceDescriptors = (obj, reducer) => {
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};

    forEach(descriptors, (descriptor, name) => {
      if (reducer(descriptor, name, obj) !== false) {
        reducedDescriptors[name] = descriptor;
      }
    });

    Object.defineProperties(obj, reducedDescriptors);
  };

  /**
   * Makes all methods read-only
   * @param {Object} obj
   */

  const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      // skip restricted props in strict mode
      if (isFunction$4(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
        return false;
      }

      const value = obj[name];

      if (!isFunction$4(value)) return;

      descriptor.enumerable = false;

      if ('writable' in descriptor) {
        descriptor.writable = false;
        return;
      }

      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error('Can not rewrite read-only method \'' + name + '\'');
        };
      }
    });
  };

  const toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};

    const define = (arr) => {
      arr.forEach(value => {
        obj[value] = true;
      });
    };

    isArray$b(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

    return obj;
  };

  const noop$4 = () => {};

  const toFiniteNumber = (value, defaultValue) => {
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
  };

  const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

  const DIGIT = '0123456789';

  const ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };

  const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = '';
    const {length} = alphabet;
    while (size--) {
      str += alphabet[Math.random() * length|0];
    }

    return str;
  };

  /**
   * If the thing is a FormData object, return true, otherwise return false.
   *
   * @param {unknown} thing - The thing to check.
   *
   * @returns {boolean}
   */
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction$4(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
  }

  const toJSONObject = (obj) => {
    const stack = new Array(10);

    const visit = (source, i) => {

      if (isObject$c(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }

        if(!('toJSON' in source)) {
          stack[i] = source;
          const target = isArray$b(source) ? [] : {};

          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });

          stack[i] = undefined;

          return target;
        }
      }

      return source;
    };

    return visit(obj, 0);
  };

  var utils = {
    isArray: isArray$b,
    isArrayBuffer,
    isBuffer: isBuffer$4,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean: isBoolean$1,
    isObject: isObject$c,
    isPlainObject: isPlainObject$2,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp: isRegExp$2,
    isFunction: isFunction$4,
    isStream,
    isURLSearchParams,
    isTypedArray: isTypedArray$4,
    isFileList,
    forEach,
    merge: merge$2,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: hasOwnProperty$c,
    hasOwnProp: hasOwnProperty$c, // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop$4,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject
  };

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [config] The config.
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   *
   * @returns {Error} The created error.
   */
  function AxiosError(message, code, config, request, response) {
    Error.call(this);

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }

    this.message = message;
    this.name = 'AxiosError';
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
  }

  utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils.toJSONObject(this.config),
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });

  const prototype$1 = AxiosError.prototype;
  const descriptors = {};

  [
    'ERR_BAD_OPTION_VALUE',
    'ERR_BAD_OPTION',
    'ECONNABORTED',
    'ETIMEDOUT',
    'ERR_NETWORK',
    'ERR_FR_TOO_MANY_REDIRECTS',
    'ERR_DEPRECATED',
    'ERR_BAD_RESPONSE',
    'ERR_BAD_REQUEST',
    'ERR_CANCELED',
    'ERR_NOT_SUPPORT',
    'ERR_INVALID_URL'
  // eslint-disable-next-line func-names
  ].forEach(code => {
    descriptors[code] = {value: code};
  });

  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

  // eslint-disable-next-line func-names
  AxiosError.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype$1);

    utils.toFlatObject(error, axiosError, function filter(obj) {
      return obj !== Error.prototype;
    }, prop => {
      return prop !== 'isAxiosError';
    });

    AxiosError.call(axiosError, error.message, code, config, request, response);

    axiosError.cause = error;

    axiosError.name = error.name;

    customProps && Object.assign(axiosError, customProps);

    return axiosError;
  };

  // eslint-disable-next-line strict
  var httpAdapter = null;

  /**
   * Determines if the given thing is a array or js object.
   *
   * @param {string} thing - The object or array to be visited.
   *
   * @returns {boolean}
   */
  function isVisitable(thing) {
    return utils.isPlainObject(thing) || utils.isArray(thing);
  }

  /**
   * It removes the brackets from the end of a string
   *
   * @param {string} key - The key of the parameter.
   *
   * @returns {string} the key without the brackets.
   */
  function removeBrackets(key) {
    return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
  }

  /**
   * It takes a path, a key, and a boolean, and returns a string
   *
   * @param {string} path - The path to the current key.
   * @param {string} key - The key of the current object being iterated over.
   * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
   *
   * @returns {string} The path to the current key.
   */
  function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
      // eslint-disable-next-line no-param-reassign
      token = removeBrackets(token);
      return !dots && i ? '[' + token + ']' : token;
    }).join(dots ? '.' : '');
  }

  /**
   * If the array is an array and none of its elements are visitable, then it's a flat array.
   *
   * @param {Array<any>} arr - The array to check
   *
   * @returns {boolean}
   */
  function isFlatArray(arr) {
    return utils.isArray(arr) && !arr.some(isVisitable);
  }

  const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });

  /**
   * Convert a data object to FormData
   *
   * @param {Object} obj
   * @param {?Object} [formData]
   * @param {?Object} [options]
   * @param {Function} [options.visitor]
   * @param {Boolean} [options.metaTokens = true]
   * @param {Boolean} [options.dots = false]
   * @param {?Boolean} [options.indexes = false]
   *
   * @returns {Object}
   **/

  /**
   * It converts an object into a FormData object
   *
   * @param {Object<any, any>} obj - The object to convert to form data.
   * @param {string} formData - The FormData object to append to.
   * @param {Object<string, any>} options
   *
   * @returns
   */
  function toFormData(obj, formData, options) {
    if (!utils.isObject(obj)) {
      throw new TypeError('target must be an object');
    }

    // eslint-disable-next-line no-param-reassign
    formData = formData || new (FormData)();

    // eslint-disable-next-line no-param-reassign
    options = utils.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      return !utils.isUndefined(source[option]);
    });

    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
    const useBlob = _Blob && utils.isSpecCompliantForm(formData);

    if (!utils.isFunction(visitor)) {
      throw new TypeError('visitor must be a function');
    }

    function convertValue(value) {
      if (value === null) return '';

      if (utils.isDate(value)) {
        return value.toISOString();
      }

      if (!useBlob && utils.isBlob(value)) {
        throw new AxiosError('Blob is not supported. Use a Buffer instead.');
      }

      if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
        return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
      }

      return value;
    }

    /**
     * Default visitor.
     *
     * @param {*} value
     * @param {String|Number} key
     * @param {Array<String|Number>} path
     * @this {FormData}
     *
     * @returns {boolean} return true to visit the each prop of the value recursively
     */
    function defaultVisitor(value, key, path) {
      let arr = value;

      if (value && !path && typeof value === 'object') {
        if (utils.endsWith(key, '{}')) {
          // eslint-disable-next-line no-param-reassign
          key = metaTokens ? key : key.slice(0, -2);
          // eslint-disable-next-line no-param-reassign
          value = JSON.stringify(value);
        } else if (
          (utils.isArray(value) && isFlatArray(value)) ||
          ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))
          )) {
          // eslint-disable-next-line no-param-reassign
          key = removeBrackets(key);

          arr.forEach(function each(el, index) {
            !(utils.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
              convertValue(el)
            );
          });
          return false;
        }
      }

      if (isVisitable(value)) {
        return true;
      }

      formData.append(renderKey(path, key, dots), convertValue(value));

      return false;
    }

    const stack = [];

    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });

    function build(value, path) {
      if (utils.isUndefined(value)) return;

      if (stack.indexOf(value) !== -1) {
        throw Error('Circular reference detected in ' + path.join('.'));
      }

      stack.push(value);

      utils.forEach(value, function each(el, key) {
        const result = !(utils.isUndefined(el) || el === null) && visitor.call(
          formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
        );

        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });

      stack.pop();
    }

    if (!utils.isObject(obj)) {
      throw new TypeError('data must be an object');
    }

    build(obj);

    return formData;
  }

  /**
   * It encodes a string by replacing all characters that are not in the unreserved set with
   * their percent-encoded equivalents
   *
   * @param {string} str - The string to encode.
   *
   * @returns {string} The encoded string.
   */
  function encode$1(str) {
    const charMap = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+',
      '%00': '\x00'
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }

  /**
   * It takes a params object and converts it to a FormData object
   *
   * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
   * @param {Object<string, any>} options - The options object passed to the Axios constructor.
   *
   * @returns {void}
   */
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];

    params && toFormData(params, this, options);
  }

  const prototype = AxiosURLSearchParams.prototype;

  prototype.append = function append(name, value) {
    this._pairs.push([name, value]);
  };

  prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode$1);
    } : encode$1;

    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + '=' + _encode(pair[1]);
    }, '').join('&');
  };

  /**
   * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
   * URI encoded counterparts
   *
   * @param {string} val The value to be encoded.
   *
   * @returns {string} The encoded value.
   */
  function encode(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @param {?object} options
   *
   * @returns {string} The formatted url
   */
  function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }
    
    const _encode = options && options.encode || encode;

    const serializeFn = options && options.serialize;

    let serializedParams;

    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils.isURLSearchParams(params) ?
        params.toString() :
        new AxiosURLSearchParams(params, options).toString(_encode);
    }

    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");

      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  }

  class InterceptorManager {
    constructor() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }

    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }

  var transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

  var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

  var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   *
   * @returns {boolean}
   */
  const isStandardBrowserEnv = (() => {
    let product;
    if (typeof navigator !== 'undefined' && (
      (product = navigator.product) === 'ReactNative' ||
      product === 'NativeScript' ||
      product === 'NS')
    ) {
      return false;
    }

    return typeof window !== 'undefined' && typeof document !== 'undefined';
  })();

  /**
   * Determine if we're running in a standard browser webWorker environment
   *
   * Although the `isStandardBrowserEnv` method indicates that
   * `allows axios to run in a web worker`, the WebWorker will still be
   * filtered out due to its judgment standard
   * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
   * This leads to a problem when axios post `FormData` in webWorker
   */
   const isStandardBrowserWebWorkerEnv = (() => {
    return (
      typeof WorkerGlobalScope !== 'undefined' &&
      // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope &&
      typeof self.importScripts === 'function'
    );
  })();


  var platform = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams$1,
      FormData: FormData$1,
      Blob: Blob$1
    },
    isStandardBrowserEnv,
    isStandardBrowserWebWorkerEnv,
    protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
  };

  function toURLEncodedForm(data, options) {
    return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (platform.isNode && utils.isBuffer(value)) {
          this.append(key, value.toString('base64'));
          return false;
        }

        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  /**
   * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
   *
   * @param {string} name - The name of the property to get.
   *
   * @returns An array of strings.
   */
  function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
      return match[0] === '[]' ? '' : match[1] || match[0];
    });
  }

  /**
   * Convert an array to an object.
   *
   * @param {Array<any>} arr - The array to convert to an object.
   *
   * @returns An object with the same keys and values as the array.
   */
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }

  /**
   * It takes a FormData object and returns a JavaScript object
   *
   * @param {string} formData The FormData object to convert to JSON.
   *
   * @returns {Object<string, any> | null} The converted object.
   */
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils.isArray(target) ? target.length : name;

      if (isLast) {
        if (utils.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }

        return !isNumericKey;
      }

      if (!target[name] || !utils.isObject(target[name])) {
        target[name] = [];
      }

      const result = buildPath(path, value, target[name], index);

      if (result && utils.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }

      return !isNumericKey;
    }

    if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
      const obj = {};

      utils.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });

      return obj;
    }

    return null;
  }

  const DEFAULT_CONTENT_TYPE = {
    'Content-Type': undefined
  };

  /**
   * It takes a string, tries to parse it, and if it fails, it returns the stringified version
   * of the input
   *
   * @param {any} rawValue - The value to be stringified.
   * @param {Function} parser - A function that parses a string into a JavaScript object.
   * @param {Function} encoder - A function that takes a value and returns a string.
   *
   * @returns {string} A stringified version of the rawValue.
   */
  function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  const defaults$3 = {

    transitional: transitionalDefaults,

    adapter: ['xhr', 'http'],

    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || '';
      const hasJSONContentType = contentType.indexOf('application/json') > -1;
      const isObjectPayload = utils.isObject(data);

      if (isObjectPayload && utils.isHTMLForm(data)) {
        data = new FormData(data);
      }

      const isFormData = utils.isFormData(data);

      if (isFormData) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
      }

      if (utils.isArrayBuffer(data) ||
        utils.isBuffer(data) ||
        utils.isStream(data) ||
        utils.isFile(data) ||
        utils.isBlob(data)
      ) {
        return data;
      }
      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils.isURLSearchParams(data)) {
        headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
        return data.toString();
      }

      let isFileList;

      if (isObjectPayload) {
        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }

        if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
          const _FormData = this.env && this.env.FormData;

          return toFormData(
            isFileList ? {'files[]': data} : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }

      if (isObjectPayload || hasJSONContentType ) {
        headers.setContentType('application/json', false);
        return stringifySafely(data);
      }

      return data;
    }],

    transformResponse: [function transformResponse(data) {
      const transitional = this.transitional || defaults$3.transitional;
      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      const JSONRequested = this.responseType === 'json';

      if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
        const silentJSONParsing = transitional && transitional.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;

        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    env: {
      FormData: platform.classes.FormData,
      Blob: platform.classes.Blob
    },

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },

    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    }
  };

  utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults$3.headers[method] = {};
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults$3.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  });

  var defaults$4 = defaults$3;

  // RawAxiosHeaders whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  const ignoreDuplicateOf = utils.toObjectSet([
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ]);

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} rawHeaders Headers needing to be parsed
   *
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders = rawHeaders => {
    const parsed = {};
    let key;
    let val;
    let i;

    rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
      i = line.indexOf(':');
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();

      if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
        return;
      }

      if (key === 'set-cookie') {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });

    return parsed;
  };

  const $internals = Symbol('internals');

  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }

  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }

    return utils.isArray(value) ? value.map(normalizeValue) : String(value);
  }

  function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;

    while ((match = tokensRE.exec(str))) {
      tokens[match[1]] = match[2];
    }

    return tokens;
  }

  function isValidHeaderName(str) {
    return /^[-_a-zA-Z]+$/.test(str.trim());
  }

  function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if (utils.isFunction(filter)) {
      return filter.call(this, value, header);
    }

    if (isHeaderNameFilter) {
      value = header;
    }

    if (!utils.isString(value)) return;

    if (utils.isString(filter)) {
      return value.indexOf(filter) !== -1;
    }

    if (utils.isRegExp(filter)) {
      return filter.test(value);
    }
  }

  function formatHeader(header) {
    return header.trim()
      .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
  }

  function buildAccessors(obj, header) {
    const accessorName = utils.toCamelCase(' ' + header);

    ['get', 'set', 'has'].forEach(methodName => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }

  class AxiosHeaders {
    constructor(headers) {
      headers && this.set(headers);
    }

    set(header, valueOrRewrite, rewrite) {
      const self = this;

      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);

        if (!lHeader) {
          throw new Error('header name must be a non-empty string');
        }

        const key = utils.findKey(self, lHeader);

        if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
          self[key || _header] = normalizeValue(_value);
        }
      }

      const setHeaders = (headers, _rewrite) =>
        utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

      if (utils.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders(header), valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }

      return this;
    }

    get(header, parser) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils.findKey(this, header);

        if (key) {
          const value = this[key];

          if (!parser) {
            return value;
          }

          if (parser === true) {
            return parseTokens(value);
          }

          if (utils.isFunction(parser)) {
            return parser.call(this, value, key);
          }

          if (utils.isRegExp(parser)) {
            return parser.exec(value);
          }

          throw new TypeError('parser must be boolean|regexp|function');
        }
      }
    }

    has(header, matcher) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils.findKey(this, header);

        return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }

      return false;
    }

    delete(header, matcher) {
      const self = this;
      let deleted = false;

      function deleteHeader(_header) {
        _header = normalizeHeader(_header);

        if (_header) {
          const key = utils.findKey(self, _header);

          if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
            delete self[key];

            deleted = true;
          }
        }
      }

      if (utils.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }

      return deleted;
    }

    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;

      while (i--) {
        const key = keys[i];
        if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }

      return deleted;
    }

    normalize(format) {
      const self = this;
      const headers = {};

      utils.forEach(this, (value, header) => {
        const key = utils.findKey(headers, header);

        if (key) {
          self[key] = normalizeValue(value);
          delete self[header];
          return;
        }

        const normalized = format ? formatHeader(header) : String(header).trim();

        if (normalized !== header) {
          delete self[header];
        }

        self[normalized] = normalizeValue(value);

        headers[normalized] = true;
      });

      return this;
    }

    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }

    toJSON(asStrings) {
      const obj = Object.create(null);

      utils.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);
      });

      return obj;
    }

    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }

    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
    }

    get [Symbol.toStringTag]() {
      return 'AxiosHeaders';
    }

    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }

    static concat(first, ...targets) {
      const computed = new this(first);

      targets.forEach((target) => computed.set(target));

      return computed;
    }

    static accessor(header) {
      const internals = this[$internals] = (this[$internals] = {
        accessors: {}
      });

      const accessors = internals.accessors;
      const prototype = this.prototype;

      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);

        if (!accessors[lHeader]) {
          buildAccessors(prototype, _header);
          accessors[lHeader] = true;
        }
      }

      utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

      return this;
    }
  }

  AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

  utils.freezeMethods(AxiosHeaders.prototype);
  utils.freezeMethods(AxiosHeaders);

  var AxiosHeaders$1 = AxiosHeaders;

  /**
   * Transform the data for a request or a response
   *
   * @param {Array|Function} fns A single function or Array of functions
   * @param {?Object} response The response object
   *
   * @returns {*} The resulting transformed data
   */
  function transformData(fns, response) {
    const config = this || defaults$4;
    const context = response || config;
    const headers = AxiosHeaders$1.from(context.headers);
    let data = context.data;

    utils.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });

    headers.normalize();

    return data;
  }

  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  /**
   * A `CanceledError` is an object that is thrown when an operation is canceled.
   *
   * @param {string=} message The message.
   * @param {Object=} config The config.
   * @param {Object=} request The request.
   *
   * @returns {CanceledError} The created error.
   */
  function CanceledError(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
    this.name = 'CanceledError';
  }

  utils.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
  });

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   *
   * @returns {object} The response.
   */
  function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError(
        'Request failed with status code ' + response.status,
        [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  var cookies = platform.isStandardBrowserEnv ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })();

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   *
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   *
   * @returns {string} The combined URL
   */
  function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  }

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   *
   * @returns {string} The combined full path
   */
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  var isURLSameOrigin = platform.isStandardBrowserEnv ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement('a');
      let originURL;

      /**
      * Parse a URL to discover it's components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */
      function resolveURL(url) {
        let href = url;

        if (msie) {
          // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */
      return function isURLSameOrigin(requestURL) {
        const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

    // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })();

  function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || '';
  }

  /**
   * Calculate data maxRate
   * @param {Number} [samplesCount= 10]
   * @param {Number} [min= 1000]
   * @returns {Function}
   */
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;

    min = min !== undefined ? min : 1000;

    return function push(chunkLength) {
      const now = Date.now();

      const startedAt = timestamps[tail];

      if (!firstSampleTS) {
        firstSampleTS = now;
      }

      bytes[head] = chunkLength;
      timestamps[head] = now;

      let i = tail;
      let bytesCount = 0;

      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }

      head = (head + 1) % samplesCount;

      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }

      if (now - firstSampleTS < min) {
        return;
      }

      const passed = startedAt && now - startedAt;

      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
  }

  function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = speedometer(50, 250);

    return e => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : undefined;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;

      bytesNotified = loaded;

      const data = {
        loaded,
        total,
        progress: total ? (loaded / total) : undefined,
        bytes: progressBytes,
        rate: rate ? rate : undefined,
        estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
        event: e
      };

      data[isDownloadStream ? 'download' : 'upload'] = true;

      listener(data);
    };
  }

  const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

  var xhrAdapter = isXHRAdapterSupported && function (config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      let requestData = config.data;
      const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
      const responseType = config.responseType;
      let onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }

        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }

      if (utils.isFormData(requestData) && (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv)) {
        requestHeaders.setContentType(false); // Let the browser set it
      }

      let request = new XMLHttpRequest();

      // HTTP basic authentication
      if (config.auth) {
        const username = config.auth.username || '';
        const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
      }

      const fullPath = buildFullPath(config.baseURL, config.url);

      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

      // Set the request timeout in MS
      request.timeout = config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        const responseHeaders = AxiosHeaders$1.from(
          'getAllResponseHeaders' in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
          request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };

        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = config.transitional || transitionalDefaults;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
          config,
          request));

        // Clean up request
        request = null;
      };

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if (platform.isStandardBrowserEnv) {
        // Add xsrf header
        const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))
          && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }

      // Remove Content-Type if data is undefined
      requestData === undefined && requestHeaders.setContentType(null);

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }

      // Add withCredentials to request if needed
      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }

      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
      }

      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
      }

      if (config.cancelToken || config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = cancel => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
          request.abort();
          request = null;
        };

        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
      }

      const protocol = parseProtocol(fullPath);

      if (protocol && platform.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
        return;
      }


      // Send the request
      request.send(requestData || null);
    });
  };

  const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter
  };

  utils.forEach(knownAdapters, (fn, value) => {
    if(fn) {
      try {
        Object.defineProperty(fn, 'name', {value});
      } catch (e) {
        // eslint-disable-next-line no-empty
      }
      Object.defineProperty(fn, 'adapterName', {value});
    }
  });

  var adapters = {
    getAdapter: (adapters) => {
      adapters = utils.isArray(adapters) ? adapters : [adapters];

      const {length} = adapters;
      let nameOrAdapter;
      let adapter;

      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters[i];
        if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {
          break;
        }
      }

      if (!adapter) {
        if (adapter === false) {
          throw new AxiosError(
            `Adapter ${nameOrAdapter} is not supported by the environment`,
            'ERR_NOT_SUPPORT'
          );
        }

        throw new Error(
          utils.hasOwnProp(knownAdapters, nameOrAdapter) ?
            `Adapter '${nameOrAdapter}' is not available in the build` :
            `Unknown adapter '${nameOrAdapter}'`
        );
      }

      if (!utils.isFunction(adapter)) {
        throw new TypeError('adapter is not a function');
      }

      return adapter;
    },
    adapters: knownAdapters
  };

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   *
   * @param {Object} config The config that is to be used for the request
   *
   * @returns {void}
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new CanceledError(null, config);
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    config.headers = AxiosHeaders$1.from(config.headers);

    // Transform request data
    config.data = transformData.call(
      config,
      config.transformRequest
    );

    if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
      config.headers.setContentType('application/x-www-form-urlencoded', false);
    }

    const adapter = adapters.getAdapter(config.adapter || defaults$4.adapter);

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );

      response.headers = AxiosHeaders$1.from(response.headers);

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
        }
      }

      return Promise.reject(reason);
    });
  }

  const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   *
   * @returns {Object} New object resulting from merging config2 to config1
   */
  function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};

    function getMergedValue(target, source, caseless) {
      if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
        return utils.merge.call({caseless}, target, source);
      } else if (utils.isPlainObject(source)) {
        return utils.merge({}, source);
      } else if (utils.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, caseless) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils.isUndefined(a)) {
        return getMergedValue(undefined, a, caseless);
      }
    }

    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(undefined, b);
      }
    }

    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(undefined, b);
      } else if (!utils.isUndefined(a)) {
        return getMergedValue(undefined, a);
      }
    }

    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(undefined, a);
      }
    }

    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };

    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      const merge = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge(config1[prop], config2[prop], prop);
      (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });

    return config;
  }

  const VERSION = "1.3.4";

  const validators$1 = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
    validators$1[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  const deprecatedWarnings = {};

  /**
   * Transitional option validator
   *
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   *
   * @returns {function}
   */
  validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError(
          formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
          AxiosError.ERR_DEPRECATED
        );
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  /**
   * Assert object's properties type
   *
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   *
   * @returns {object}
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
      }
    }
  }

  var validator = {
    assertOptions,
    validators: validators$1
  };

  const validators = validator.validators;

  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   *
   * @return {Axios} A new instance of Axios
   */
  class Axios {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      const {transitional, paramsSerializer, headers} = config;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      if (paramsSerializer !== undefined) {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }

      // Set config.method
      config.method = (config.method || this.defaults.method || 'get').toLowerCase();

      let contextHeaders;

      // Flatten headers
      contextHeaders = headers && utils.merge(
        headers.common,
        headers[config.method]
      );

      contextHeaders && utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        (method) => {
          delete headers[method];
        }
      );

      config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

      // filter out skipped interceptors
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      let promise;
      let i = 0;
      let len;

      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), undefined];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;

        promise = Promise.resolve(config);

        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }

        return promise;
      }

      len = requestInterceptorChain.length;

      let newConfig = config;

      i = 0;

      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }

      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      i = 0;
      len = responseInterceptorChain.length;

      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }

      return promise;
    }

    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  }

  // Provide aliases for supported request methods
  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/

    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          headers: isForm ? {
            'Content-Type': 'multipart/form-data'
          } : {},
          url,
          data
        }));
      };
    }

    Axios.prototype[method] = generateHTTPMethod();

    Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
  });

  var Axios$1 = Axios;

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @param {Function} executor The executor function.
   *
   * @returns {CancelToken}
   */
  class CancelToken {
    constructor(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      let resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      const token = this;

      // eslint-disable-next-line func-names
      this.promise.then(cancel => {
        if (!token._listeners) return;

        let i = token._listeners.length;

        while (i-- > 0) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = onfulfilled => {
        let _resolve;
        // eslint-disable-next-line func-names
        const promise = new Promise(resolve => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message, config, request) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError(message, config, request);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }

    /**
     * Subscribe to the cancel signal
     */

    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }

    /**
     * Unsubscribe from the cancel signal
     */

    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  }

  var CancelToken$1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   *
   * @returns {Function}
   */
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   *
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  function isAxiosError(payload) {
    return utils.isObject(payload) && (payload.isAxiosError === true);
  }

  const HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511,
  };

  Object.entries(HttpStatusCode).forEach(([key, value]) => {
    HttpStatusCode[value] = key;
  });

  var HttpStatusCode$1 = HttpStatusCode;

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   *
   * @returns {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    const context = new Axios$1(defaultConfig);
    const instance = bind(Axios$1.prototype.request, context);

    // Copy axios.prototype to instance
    utils.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

    // Copy context to instance
    utils.extend(instance, context, null, {allOwnKeys: true});

    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };

    return instance;
  }

  // Create the default instance to be exported
  const axios = createInstance(defaults$4);

  // Expose Axios class to allow class inheritance
  axios.Axios = Axios$1;

  // Expose Cancel & CancelToken
  axios.CanceledError = CanceledError;
  axios.CancelToken = CancelToken$1;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData;

  // Expose AxiosError class
  axios.AxiosError = AxiosError;

  // alias for CanceledError for backward compatibility
  axios.Cancel = axios.CanceledError;

  // Expose all/spread
  axios.all = function all(promises) {
    return Promise.all(promises);
  };

  axios.spread = spread;

  // Expose isAxiosError
  axios.isAxiosError = isAxiosError;

  // Expose mergeConfig
  axios.mergeConfig = mergeConfig;

  axios.AxiosHeaders = AxiosHeaders$1;

  axios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

  axios.HttpStatusCode = HttpStatusCode$1;

  axios.default = axios;

  let globalAny$1 = {};
  try {
    globalAny$1 = window;
  } catch (error) {
    if (error.message !== 'window is not defined') {
      throw error;
    } else {
      globalAny$1 = {
        isOnServer: true
      };
    }
  }

  /**
   * Type of an [axios request]{@link https://github.com/axios/axios/blob/master/index.d.ts#L43}
   *
   * @typedef {object} AxiosRequestConfig
   * @alias AxiosRequestConfig
   * @memberof ApiClient
   * @see https://github.com/axios/axios/blob/master/index.d.ts#L43
   */

  const checkResponse = response => {
    if (globalAny$1.isOnServer) {
      return;
    }
    const loginUrl = [globalAny$1.location.origin, globalAny$1.REDUX_STATE.paths.loginPath].join('');
    // if response has redirect to loginUrl
    if (response.request.responseURL && response.request.responseURL.match(loginUrl)) {
      // eslint-disable-next-line no-undef, no-alert
      alert('Your session expired. You will be redirected to login screen');
      globalAny$1.location.assign(loginUrl);
    }
  };

  /**
   * Extends {@link AxiosRequestConfig}
   *
   * @alias ActionAPIParams
   * @memberof ApiClient
   * @property {any}   ...    any property supported by {@link AxiosRequestConfig}
   */

  /**
   * Extends {@link ActionAPIParams}
   *
   * @alias ResourceActionAPIParams
   * @memberof ApiClient
   * @property {any}   ...    any property supported by {@link AxiosRequestConfig}
   */

  /**
   * Extends {@link ActionAPIParams}
   *
   * @alias RecordActionAPIParams
   * @memberof ApiClient
   * @property {any}   ...    any property supported by {@link ActionAPIParams}
   */

  /**
   * Extends {@link ActionAPIParams}
   *
   * @alias BulkActionAPIParams
   * @memberof ApiClient
   * @see https://github.com/axios/axios/blob/master/index.d.ts#L43
   * @property {any}   ...    any property supported by {@link ActionAPIParams}
   */

  /**
   * Extends {@link AxiosRequestConfig}
   *
   * @alias GetPageAPIParams
   * @memberof ApiClient
   * @property {any}   ...    any property supported by {@link AxiosRequestConfig}
   */

  /**
   * Client which access the admin API.
   * Use it to fetch data from auto generated AdminJS API.
   *
   * In the backend it uses [axios](https://github.com/axios/axios) client
   * library.
   *
   * Usage:
   * ```javascript
   * import { ApiClient } from 'adminjs'
   *
   * const api = new ApiClient()
   * // fetching all records
   * api.resourceAction({ resourceId: 'Comments', actionName: 'list' }).then(results => {...})
   * ```
   * @see https://github.com/axios/axios
   * @hideconstructor
   */
  class ApiClient {
    constructor() {
      this.baseURL = ApiClient.getBaseUrl();
      this.client = axios.create({
        baseURL: this.baseURL
      });
    }
    static getBaseUrl() {
      if (globalAny$1.isOnServer) {
        return '';
      }
      return [globalAny$1.location.origin, globalAny$1.REDUX_STATE?.paths.rootPath].join('');
    }

    /**
     * Search by query string for records in a given resource.
     *
     * @param   {Object}  options
     * @param   {String}  options.resourceId     id of a {@link ResourceJSON}
     * @param   {String}  options.query          query string
     * @param   {String}  options.searchProperty optional property name
     *
     * @return  {Promise<SearchResponse>}
     */
    async searchRecords({
      resourceId,
      query,
      searchProperty
    }) {
      if (globalAny$1.isOnServer) {
        return [];
      }
      const actionName = 'search';
      const response = await this.resourceAction({
        resourceId,
        actionName,
        query,
        ...(searchProperty ? {
          params: {
            searchProperty
          }
        } : undefined)
      });
      checkResponse(response);
      return response.data.records;
    }

    /**
     * Invokes given resource {@link Action} on the backend.
     *
     * @param   {ResourceActionAPIParams}     options
     * @return  {Promise<ActionResponse>}     response from an {@link Action}
     */
    async resourceAction(options) {
      const {
        resourceId,
        actionName,
        data,
        query,
        ...axiosParams
      } = options;
      let url = `/api/resources/${resourceId}/actions/${actionName}`;
      if (query) {
        const q = encodeURIComponent(query);
        url = [url, q].join('/');
      }
      const response = await this.client.request({
        url,
        method: data ? 'POST' : 'GET',
        ...axiosParams,
        data
      });
      checkResponse(response);
      return response;
    }

    /**
     * Invokes given record {@link Action} on the backend.
     *
     * @param   {RecordActionAPIParams} options
     * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
     */
    async recordAction(options) {
      const {
        resourceId,
        recordId,
        actionName,
        data,
        ...axiosParams
      } = options;
      const response = await this.client.request({
        url: `/api/resources/${resourceId}/records/${recordId}/${actionName}`,
        method: data ? 'POST' : 'GET',
        ...axiosParams,
        data
      });
      checkResponse(response);
      return response;
    }

    /**
     * Invokes given bulk {@link Action} on the backend.
     *
     * @param   {BulkActionAPIParams} options
     * @return  {Promise<BulkActionResponse>}            response from an {@link Action}
     */
    async bulkAction(options) {
      const {
        resourceId,
        recordIds,
        actionName,
        data,
        ...axiosParams
      } = options;
      const params = new URLSearchParams();
      params.set('recordIds', (recordIds || []).join(','));
      const response = await this.client.request({
        url: `/api/resources/${resourceId}/bulk/${actionName}`,
        method: data ? 'POST' : 'GET',
        ...axiosParams,
        data,
        params
      });
      checkResponse(response);
      return response;
    }

    /**
     * Invokes dashboard handler.
     *
     * @param   {AxiosRequestConfig}       options
     * @return  {Promise<AxiosResponse<any>>} response from the handler function defined in
     *                                     {@link AdminJSOptions#dashboard}
     */
    async getDashboard(options = {}) {
      const response = await this.client.get('/api/dashboard', options);
      checkResponse(response);
      return response;
    }

    /**
     * Invokes handler function of given page and returns its response.
     *
     * @param   {GetPageAPIParams}                options
     * @return  {Promise<AxiosResponse<any>>}     response from the handler of given page
     *                                            defined in {@link AdminJSOptions#pages}
     */
    async getPage(options) {
      const {
        pageName,
        ...axiosParams
      } = options;
      const response = await this.client.request({
        url: `/api/pages/${pageName}`,
        ...axiosParams
      });
      checkResponse(response);
      return response;
    }
    async refreshToken(data) {
      const response = await this.client.request({
        url: '/refresh-token',
        method: 'POST',
        data
      });
      checkResponse(response);
      return response;
    }
  }

  /* eslint-disable max-len */
  const getDataCss = (...args) => args.join('-');
  const getResourceElementCss = (resourceId, suffix) => getDataCss(resourceId, suffix);
  const getActionElementCss = (resourceId, actionName, suffix) => getDataCss(resourceId, actionName, suffix);

  const api$4 = new ApiClient();
  function callActionApi(action, params, search) {
    let promise;
    const {
      recordId,
      recordIds,
      resourceId
    } = params;

    /* Temporary workaround to avoid breaking changes.
      TODO: For v8 release, rewrite actions to support PUT & DELETE methods.
      Actions should have an option to configure a default method for action buttons. */
    let method = 'get';
    if (action.name === 'delete') {
      method = 'post';
    }
    switch (action.actionType) {
      case 'record':
        if (!recordId) {
          throw new Error('You have to specify "recordId" for record action');
        }
        promise = api$4.recordAction({
          resourceId,
          actionName: action.name,
          recordId,
          search,
          method
        });
        break;
      case 'resource':
        promise = api$4.resourceAction({
          resourceId,
          actionName: action.name,
          method
        });
        break;
      case 'bulk':
        if (!recordIds) {
          throw new Error('You have to specify "recordIds" for bulk action');
        }
        promise = api$4.bulkAction({
          resourceId,
          actionName: action.name,
          recordIds,
          search,
          method
        });
        break;
      default:
        throw new Error('"actionType" should be either record, resource or bulk');
    }
    return promise;
  }

  /* eslint-disable arrow-parens */

  const buildActionCallApiTrigger = options => {
    const {
      action,
      params,
      actionResponseHandler,
      search
    } = options;
    const callApi = () => {
      const promise = callActionApi(action, params, search);
      promise.then(actionResponseHandler).catch(error => {
        throw error;
      });
      return promise;
    };
    return callApi;
  };

  const buildActionTestId = action => `action-${action.name}`;

  const REFRESH_KEY = 'refresh';
  const IGNORE_PARAMS_KEY = 'ignore_params';

  /**
   * Adds refresh=true to the url, which in turn should cause list to reload.
   *
   * @param {string} url      url to which function should add `refresh`
   * @param {string} [search] optional search query which should be updated,
   *                          if not given function will use window.location.search
   * @private
   */
  const appendForceRefresh = (url, search) => {
    const searchParamsIdx = url.lastIndexOf('?');
    const urlSearchParams = searchParamsIdx !== -1 ? url.substring(searchParamsIdx + 1) : null;
    const oldParams = new URLSearchParams(search ?? urlSearchParams ?? window.location.search ?? '');
    const shouldIgnoreOldParams = new URLSearchParams(urlSearchParams || '').get(IGNORE_PARAMS_KEY) === 'true';
    const newParams = shouldIgnoreOldParams ? new URLSearchParams('') : new URLSearchParams(oldParams.toString());
    newParams.set(REFRESH_KEY, 'true');
    const newUrl = searchParamsIdx !== -1 ? url.substring(0, searchParamsIdx) : url;
    return `${newUrl}?${newParams.toString()}`;
  };
  const hasForceRefresh = search => {
    const params = new URLSearchParams(search);
    return !!params.get(REFRESH_KEY);
  };
  const removeForceRefresh = search => {
    const params = new URLSearchParams(search);
    if (params.get(REFRESH_KEY)) {
      params.delete(REFRESH_KEY);
    }
    return params.toString();
  };

  /* eslint-disable no-restricted-globals */
  /* eslint-disable no-undef */
  /* eslint-disable no-alert */

  const buildActionClickHandler = options => {
    const {
      action,
      params,
      actionResponseHandler,
      navigate,
      modalFunctions,
      location
    } = options;
    const {
      openModal
    } = modalFunctions;
    const handleActionClick = event => {
      event.preventDefault();
      event.stopPropagation();
      const href = actionHref(action, params);
      const callApi = buildActionCallApiTrigger({
        params,
        action,
        actionResponseHandler
      });

      // Action has "component" option set to "false" explicitly in it's configuration
      if (actionHasDisabledComponent(action)) {
        if (action.guard) {
          const modalData = {
            modalProps: {
              variant: 'danger',
              label: 'confirm',
              title: action.guard
            },
            type: 'confirm',
            resourceId: params.resourceId,
            confirmAction: callApi
          };

          // If confirmation is required, action trigger should be handled in modal
          openModal(modalData);
          return;
        }

        // If no confirmation is required, call API
        callApi();
        return;
      }

      // Default behaviour - you're navigated to action URL and logic is performed on it's route
      if (href) {
        const url = new URL(`relative:${href}`);
        const hrefParams = new URLSearchParams(url.search);
        const currentParams = new URLSearchParams(action.showInDrawer ? location?.search ?? '' : '');
        Object.entries(Object.fromEntries(currentParams.entries())).forEach(([key, value]) => {
          if (!hrefParams.has(key)) hrefParams.set(key, value);
        });
        if (location?.pathname === url.pathname) {
          hrefParams.set(REFRESH_KEY, 'true');
        }
        navigate({
          pathname: url.pathname,
          search: hrefParams.toString()
        });
      }
    };
    return handleActionClick;
  };

  const ADD_NOTICE = 'ADD_NOTICE';
  const addNotice = data => ({
    type: ADD_NOTICE,
    data: {
      id: `notice-${Date.now() + Math.random()}`,
      progress: 0,
      ...data
    }
  });

  /**
   * @memberof useNotice
   * @alias AddNotice
   */

  /**
   * @classdesc
   * Hook which allows you to add notice message to the app.
   *
   * ```javascript
   * import { useNotice, Button } from 'adminjs'
   *
   * const myComponent = () => {
   *   const sendNotice = useNotice()
   *   return (
   *     <Button onClick={() => sendNotice({ message: 'I am awesome' })}>I am awesome</Button>
   *   )
   * }
   * ```
   *
   * @class
   * @subcategory Hooks
   * @bundle
   * @hideconstructor
   */
  const useNotice = () => {
    const dispatch = require$$3.useDispatch();
    return notice => dispatch(addNotice(notice));
  };

  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  const useActionResponseHandler = onActionCall => {
    const location = reactRouter.useLocation();
    const navigate = reactRouter.useNavigate();
    const addNotice = useNotice();
    return response => {
      const {
        data
      } = response;
      if (data.notice) {
        addNotice(data.notice);
      }
      if (data.redirectUrl && location.pathname !== data.redirectUrl) {
        const appended = appendForceRefresh(data.redirectUrl);
        navigate(appended);
      }
      if (onActionCall) {
        onActionCall(data);
      }
    };
  };

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  var _arrayReduce = arrayReduce$1;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyOf$1(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf$1;

  var basePropertyOf = _basePropertyOf;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter$1 = basePropertyOf(deburredLetters);

  var _deburrLetter = deburrLetter$1;

  /** Detect free variable `global` from Node.js. */

  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$8 = freeGlobal || freeSelf || Function('return this')();

  var _root = root$8;

  var root$7 = _root;

  /** Built-in value references. */
  var Symbol$6 = root$7.Symbol;

  var _Symbol = Symbol$6;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function arrayMap$4(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  var _arrayMap = arrayMap$4;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */

  var isArray$a = Array.isArray;

  var isArray_1 = isArray$a;

  var Symbol$5 = _Symbol;

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$e.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$e.toString;

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$b.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */

  var objectProto$d = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$d.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  var Symbol$4 = _Symbol,
      getRawTag = _getRawTag,
      objectToString = _objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag$7(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  var _baseGetTag = baseGetTag$7;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */

  function isObjectLike$8(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike$8;

  var baseGetTag$6 = _baseGetTag,
      isObjectLike$7 = isObjectLike_1;

  /** `Object#toString` result references. */
  var symbolTag$1 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$4(value) {
    return typeof value == 'symbol' ||
      (isObjectLike$7(value) && baseGetTag$6(value) == symbolTag$1);
  }

  var isSymbol_1 = isSymbol$4;

  var Symbol$3 = _Symbol,
      arrayMap$3 = _arrayMap,
      isArray$9 = isArray_1,
      isSymbol$3 = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
      symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString$2(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray$9(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$3(value, baseToString$2) + '';
    }
    if (isSymbol$3(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
  }

  var _baseToString = baseToString$2;

  var baseToString$1 = _baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$5(value) {
    return value == null ? '' : baseToString$1(value);
  }

  var toString_1 = toString$5;

  var deburrLetter = _deburrLetter,
      toString$4 = toString_1;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange$4 = '\\u0300-\\u036f',
      reComboHalfMarksRange$4 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$4 = '\\u20d0-\\u20ff',
      rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4;

  /** Used to compose unicode capture groups. */
  var rsCombo$3 = '[' + rsComboRange$4 + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo$3, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr$1(string) {
    string = toString$4(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr$1;

  /** Used to match words composed of alphanumeric characters. */

  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords$1(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords$1;

  /** Used to detect strings that need a more robust regexp to match words. */

  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord$1(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord$1;

  /** Used to compose unicode character classes. */

  var rsAstralRange$3 = '\\ud800-\\udfff',
      rsComboMarksRange$3 = '\\u0300-\\u036f',
      reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange$3 = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$2 = '[' + rsComboRange$3 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange$3 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz$2 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$2 = '(?:' + rsCombo$2 + '|' + rsFitz$2 + ')',
      rsNonAstral$2 = '[^' + rsAstralRange$3 + ']',
      rsRegional$2 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$2 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ$3 = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod$2 = rsModifier$2 + '?',
      rsOptVar$2 = '[' + rsVarRange$3 + ']?',
      rsOptJoin$2 = '(?:' + rsZWJ$3 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
      rsEmoji = '(?:' + [rsDingbat, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsSeq$2;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords$1(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords$1;

  var asciiWords = _asciiWords,
      hasUnicodeWord = _hasUnicodeWord,
      toString$3 = toString_1,
      unicodeWords = _unicodeWords;

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words$1(string, pattern, guard) {
    string = toString$3(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  }

  var words_1 = words$1;

  var arrayReduce = _arrayReduce,
      deburr = deburr_1,
      words = words_1;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder$1(callback) {
    return function(string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder$1;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */

  function baseSlice$1(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  var _baseSlice = baseSlice$1;

  var baseSlice = _baseSlice;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice$2(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : baseSlice(array, start, end);
  }

  var _castSlice = castSlice$2;

  /** Used to compose unicode character classes. */

  var rsAstralRange$2 = '\\ud800-\\udfff',
      rsComboMarksRange$2 = '\\u0300-\\u036f',
      reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
      rsVarRange$2 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsZWJ$2 = '\\u200d';

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2  + rsComboRange$2 + rsVarRange$2 + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode$4(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode$4;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function asciiToArray$1(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray$1;

  /** Used to compose unicode character classes. */

  var rsAstralRange$1 = '\\ud800-\\udfff',
      rsComboMarksRange$1 = '\\u0300-\\u036f',
      reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsVarRange$1 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$1 + ']',
      rsCombo$1 = '[' + rsComboRange$1 + ']',
      rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$1 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsSymbol$1 = '(?:' + [rsNonAstral$1 + rsCombo$1 + '?', rsCombo$1, rsRegional$1, rsSurrPair$1, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol$1 + rsSeq$1, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray$1(string) {
    return string.match(reUnicode$1) || [];
  }

  var _unicodeToArray = unicodeToArray$1;

  var asciiToArray = _asciiToArray,
      hasUnicode$3 = _hasUnicode,
      unicodeToArray = _unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray$2(string) {
    return hasUnicode$3(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  var _stringToArray = stringToArray$2;

  var castSlice$1 = _castSlice,
      hasUnicode$2 = _hasUnicode,
      stringToArray$1 = _stringToArray,
      toString$2 = toString_1;

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst$1(methodName) {
    return function(string) {
      string = toString$2(string);

      var strSymbols = hasUnicode$2(string)
        ? stringToArray$1(string)
        : undefined;

      var chr = strSymbols
        ? strSymbols[0]
        : string.charAt(0);

      var trailing = strSymbols
        ? castSlice$1(strSymbols, 1).join('')
        : string.slice(1);

      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst$1;

  var createCaseFirst = _createCaseFirst;

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst$1 = createCaseFirst('toUpperCase');

  var upperFirst_1 = upperFirst$1;

  var createCompounder = _createCompounder,
      upperFirst = upperFirst_1;

  /**
   * Converts `string` to
   * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
   *
   * @static
   * @memberOf _
   * @since 3.1.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the start cased string.
   * @example
   *
   * _.startCase('--foo-bar--');
   * // => 'Foo Bar'
   *
   * _.startCase('fooBar');
   * // => 'Foo Bar'
   *
   * _.startCase('__FOO_BAR__');
   * // => 'FOO BAR'
   */
  var startCase = createCompounder(function(result, word, index) {
    return result + (index ? ' ' : '') + upperFirst(word);
  });

  var startCase_1 = startCase;

  var startCase$1 = /*@__PURE__*/getDefaultExportFromCjs(startCase_1);

  /**
   * @memberof TranslateFunctions
   * @alias TranslateFunction
   */

  /**
   * Translate Functions are the helper functions which you can use to translate
   * your application.
   *
   * On the fronted they can be used with {@link useTranslation} hook. On the backend
   * they are injected to any {@link AdminJS} instance and {@link ActionContext}.
   */

  const translate = (i18n, key, name, resourceId, options = {}) => {
    // cspell:disable-next-line
    if (i18n.language === 'cimode') return [key, name].join('.');
    let realOptions = {
      ...options,
      defaultValue: options.defaultValue ?? startCase$1(name)
    };
    let keys = [`${key}.${name}`];
    if (resourceId && typeof resourceId !== 'string') {
      realOptions = resourceId;
    } else if (resourceId) {
      keys = [`resources.${resourceId}.${key}.${name}`, ...keys];
    }
    return i18n.t(keys, realOptions);
  };
  const createFunctions = i18n => {
    const translateAction = (actionName, resourceId, options) => translate(i18n, 'actions', actionName, resourceId, options);
    const translateButton = (buttonLabel, resourceId, options) => translate(i18n, 'buttons', buttonLabel, resourceId, options);
    const translateLabel = (label, resourceId, options) => translate(i18n, 'labels', label, resourceId, options);
    const translateProperty = (propertyName, resourceId, options) => translate(i18n, 'properties', propertyName, resourceId, options);
    const translateMessage = (messageName, resourceId, options) => translate(i18n, 'messages', messageName, resourceId, {
      ...options,
      defaultValue: options?.defaultValue ?? messageName
    });
    const translateComponent = (messageName, resourceId, options) => translate(i18n, 'components', messageName, resourceId, options);
    const translatePage = (messageName, resourceId, options) => translate(i18n, 'pages', messageName, resourceId, options);
    return {
      translateAction,
      ta: translateAction,
      translateButton,
      tb: translateButton,
      translateLabel,
      tl: translateLabel,
      translateProperty,
      tp: translateProperty,
      translateMessage,
      tm: translateMessage,
      translateComponent,
      tc: translateComponent,
      translatePage,
      t: i18n.t,
      translate: i18n.t
    };
  };

  /**
   * Extends {@link TranslateFunctions}. Apart from that it also returns all the properties
   * defined below.
   *
   * ```javascript
   * import { useTranslation } from 'adminjs'
   *
   * const MyComponent = () => {
   *   const { translateButton } = useTranslation()
   *
   *   return (
   *     <Box>
   *       <Button variant="contained" onClick={...}>{translateButton('save')}<Button>
   *     </Box>
   *   )
   * }
   * ```
   *
   * @memberof useTranslation
   * @alias UseTranslationResponse
   *
   * @property {TranslateFunction} ... All functions defined in {@link TranslateFunctions}
   */

  /**
   * @classdesc
   * Extends the useTranslation hook from react-i18next library.
   *
   * Returns all the {@link TranslateFunctions} + methods returned by the original
   * useTranslation method from react-i18next like: `i18n` instance and `ready` flag.
   *
   * @class
   * @subcategory Hooks
   * @bundle
   * @hideconstructor
   * @returns {UseTranslationResponse}
   */
  const useTranslation = () => {
    // eslint-disable-next-line no-shadow
    const {
      i18n,
      ...rest
    } = useTranslation$1();
    const translateFunctions = createFunctions(i18n);
    return {
      ...rest,
      i18n,
      ...translateFunctions
    };
  };

  const DROP_NOTICE = 'DROP_NOTICE';
  const dropNotice = noticeId => ({
    type: 'DROP_NOTICE',
    data: {
      noticeId
    }
  });

  const ASSETS_INITIALIZE = 'ASSETS_INITIALIZE';

  const BRANDING_INITIALIZE = 'BRANDING_INITIALIZE';

  const DASHBOARD_INITIALIZE = 'DASHBOARD_INITIALIZE';

  const LOCALE_INITIALIZE = 'LOCALE_INITIALIZE';

  const PAGES_INITIALIZE = 'PAGES_INITIALIZE';

  const PATHS_INITIALIZE = 'PATHS_INITIALIZE';

  const RESOURCES_INITIALIZE = 'RESOURCES_INITIALIZE';

  const THEME_INITIALIZE = 'THEME_INITIALIZE';

  const VERSIONS_INITIALIZE = 'VERSIONS_INITIALIZE';

  const SHOW_MODAL = 'SHOW_MODAL';
  const HIDE_MODAL = 'HIDE_MODAL';
  const showModal = data => ({
    type: SHOW_MODAL,
    data
  });
  const hideModal = () => ({
    type: HIDE_MODAL
  });

  const INITIAL_ROUTE = 'INITIAL_ROUTE';
  const ROUTE_CHANGED = 'ROUTE_CHANGED';
  const initializeRoute = location => ({
    type: ROUTE_CHANGED,
    data: location
  });
  const changeRoute = location => ({
    type: ROUTE_CHANGED,
    data: location
  });

  const SESSION_INITIALIZE = 'SESSION_INITIALIZE';
  const setCurrentAdmin = (data = null) => ({
    type: SESSION_INITIALIZE,
    data
  });

  const DRAWER_PREROUTE_SET = 'DRAWER_PREROUTE_SET';
  const setDrawerPreRoute = data => ({
    type: DRAWER_PREROUTE_SET,
    data
  });

  const SET_NOTICE_PROGRESS = 'SET_NOTICE_PROGRESS';
  const setNoticeProgress = data => ({
    type: SET_NOTICE_PROGRESS,
    data
  });

  const useModal = () => {
    const dispatch = require$$3.useDispatch();
    const {
      translateButton,
      translateLabel,
      translateMessage
    } = useTranslation();
    const closeModal = React$1.useCallback(() => {
      dispatch(hideModal());
    }, []);
    const openModal = props => {
      const {
        modalProps,
        type,
        confirmAction,
        resourceId
      } = props;
      let buttons = modalProps.buttons || [];
      const handleConfirm = () => {
        closeModal();
        if (confirmAction) confirmAction();
      };
      if (buttons.length) {
        buttons = buttons.map(button => {
          button.variant = button.variant || 'default';
          if (button.label === 'cancel') {
            button.onClick = button.onClick || closeModal;
          }
          button.label = translateButton(button.label || '', resourceId);
          return button;
        });
      }
      if (type === 'confirm') {
        buttons.push({
          label: translateButton('cancel', resourceId),
          onClick: closeModal
        });
        buttons.push({
          label: translateButton('confirm', resourceId),
          variant: modalProps.variant || 'primary',
          onClick: handleConfirm
        });
      }
      if (type === 'alert') {
        buttons.push({
          label: translateButton('ok', resourceId),
          variant: 'primary',
          onClick: closeModal
        });
      }
      const data = {
        modalProps: {
          ...modalProps,
          label: translateLabel(modalProps.label || '', resourceId),
          title: translateMessage(modalProps.title || '', resourceId),
          subTitle: translateMessage(modalProps.subTitle || '', resourceId),
          variant: modalProps.variant,
          buttons,
          onClose: modalProps.onClose || closeModal,
          onOverlayClick: modalProps.onOverlayClick || closeModal
        }
      };
      dispatch(showModal(data));
    };
    return {
      openModal,
      closeModal
    };
  };

  /**
   * @load ./use-action.doc.md
   * @subcategory Hooks
   *
   * @param {ActionJSON}   action      action object
   * @param {ActionParams} params
   * @param {ActionCallCallback} onActionCall - callback triggered when action is performed
   * @return {UseActionResult}
   * @class
   * @hideconstructor
   */
  function useAction(action, params, onActionCall) {
    const navigate = reactRouter.useNavigate();
    const location = reactRouter.useLocation();
    const translateFunctions = useTranslation();
    const modalFunctions = useModal();
    const actionResponseHandler = useActionResponseHandler(onActionCall);
    const href = actionHref(action, params);
    const callApi = buildActionCallApiTrigger({
      action,
      params,
      actionResponseHandler
    });
    const handleClick = buildActionClickHandler({
      action,
      params,
      actionResponseHandler,
      navigate,
      translateFunctions,
      modalFunctions,
      location
    });
    return {
      href,
      callApi,
      handleClick
    };
  }

  /**
   * @classdesc
   * Hook which allows you to get and set currentAdmin
   *
   * ### Usage
   *
   * ```javascript
   * import { useCurrentAdmin } from 'adminjs'
   *
   * const myComponent = () => {
   *   const [currentAdmin, setCurrentAdmin] = useCurrentAdmin()
   *   // ...
   * }
   * ```
   *
   * @class
   * @subcategory Hooks
   * @bundle
   * @returns {UseCurrentAdminResponse}
   * @hideconstructor
   */
  function useCurrentAdmin() {
    const currentAdmin = require$$3.useSelector(state => state.session);
    const dispatch = require$$3.useDispatch();
    return [currentAdmin, admin => dispatch(setCurrentAdmin(admin))];
  }

  /**
   * Result of the {@link useCurrentAdmin}.
   * It is a tuple containing value and the setter
   *
   * @typedef {Array} UseCurrentAdminResponse
   * @memberof useCurrentAdmin
   * @alias UseCurrentAdminResponse
   * @property {CurrentAdmin | null} [0]    current admin
   * @property {React.Dispatch<React.SetStateAction<CurrentAdmin>>} [1]    value setter compatible
   *                                                                       with react useState
   */

  const OPEN_FILTER_DRAWER = 'OPEN_FILTER_DRAWER';
  const CLOSE_FILTER_DRAWER = 'CLOSE_FILTER_DRAWER';
  const showFilterDrawer = () => ({
    type: OPEN_FILTER_DRAWER,
    isVisible: true
  });
  const hideFilterDrawer = () => ({
    type: CLOSE_FILTER_DRAWER,
    isVisible: false
  });

  var isArray$8 = isArray_1,
      isSymbol$2 = isSymbol_1;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey$3(value, object) {
    if (isArray$8(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol$2(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  var _isKey = isKey$3;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */

  function isObject$b(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$b;

  var baseGetTag$5 = _baseGetTag,
      isObject$a = isObject_1;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag$1 = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$3(value) {
    if (!isObject$a(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$5(value);
    return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$3;

  var root$6 = _root;

  /** Used to detect overreaching core-js shims. */
  var coreJsData$1 = root$6['__core-js_shared__'];

  var _coreJsData = coreJsData$1;

  var coreJsData = _coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked$1(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked$1;

  /** Used for built-in method references. */

  var funcProto$2 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource$2;

  var isFunction$2 = isFunction_1,
      isMasked = _isMasked,
      isObject$9 = isObject_1,
      toSource$1 = _toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$c = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$c.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$a).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative$1(value) {
    if (!isObject$9(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }

  var _baseIsNative = baseIsNative$1;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function getValue$2(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$2;

  var baseIsNative = _baseIsNative,
      getValue$1 = _getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative$7(object, key) {
    var value = getValue$1(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative$7;

  var getNative$6 = _getNative;

  /* Built-in method references that are verified to be native. */
  var nativeCreate$4 = getNative$6(Object, 'create');

  var _nativeCreate = nativeCreate$4;

  var nativeCreate$3 = _nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear$1;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete$1;

  var nativeCreate$2 = _nativeCreate;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet$1;

  var nativeCreate$1 = _nativeCreate;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);
  }

  var _hashHas = hashHas$1;

  var nativeCreate = _nativeCreate;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet$1;

  var hashClear = _hashClear,
      hashDelete = _hashDelete,
      hashGet = _hashGet,
      hashHas = _hashHas,
      hashSet = _hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype['delete'] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;

  var _Hash = Hash$1;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */

  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear$1;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */

  function eq$5(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq$5;

  var eq$4 = eq_1;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf$4(array, key) {
    var length = array.length;
    while (length--) {
      if (eq$4(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf$4;

  var assocIndexOf$3 = _assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$3(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete$1;

  var assocIndexOf$2 = _assocIndexOf;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet$1;

  var assocIndexOf$1 = _assocIndexOf;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas$1;

  var assocIndexOf = _assocIndexOf;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet$1;

  var listCacheClear = _listCacheClear,
      listCacheDelete = _listCacheDelete,
      listCacheGet = _listCacheGet,
      listCacheHas = _listCacheHas,
      listCacheSet = _listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache$4(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype['delete'] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;

  var _ListCache = ListCache$4;

  var getNative$5 = _getNative,
      root$5 = _root;

  /* Built-in method references that are verified to be native. */
  var Map$4 = getNative$5(root$5, 'Map');

  var _Map = Map$4;

  var Hash = _Hash,
      ListCache$3 = _ListCache,
      Map$3 = _Map;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map$3 || ListCache$3),
      'string': new Hash
    };
  }

  var _mapCacheClear = mapCacheClear$1;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */

  function isKeyable$1(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable$1;

  var isKeyable = _isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData$4;

  var getMapData$3 = _getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete$1;

  var getMapData$2 = _getMapData;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet$1;

  var getMapData$1 = _getMapData;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas$1;

  var getMapData = _getMapData;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet$1;

  var mapCacheClear = _mapCacheClear,
      mapCacheDelete = _mapCacheDelete,
      mapCacheGet = _mapCacheGet,
      mapCacheHas = _mapCacheHas,
      mapCacheSet = _mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache$3(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype['delete'] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;

  var _MapCache = MapCache$3;

  var MapCache$2 = _MapCache;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$1(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache$2);
    return memoized;
  }

  // Expose `MapCache`.
  memoize$1.Cache = MapCache$2;

  var memoize_1 = memoize$1;

  var memoize = memoize_1;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped$1(func) {
    var result = memoize(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped$1;

  var memoizeCapped = _memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$1 = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  var _stringToPath = stringToPath$1;

  var isArray$7 = isArray_1,
      isKey$2 = _isKey,
      stringToPath = _stringToPath,
      toString$1 = toString_1;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath$4(value, object) {
    if (isArray$7(value)) {
      return value;
    }
    return isKey$2(value, object) ? [value] : stringToPath(toString$1(value));
  }

  var _castPath = castPath$4;

  var isSymbol$1 = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$5(value) {
    if (typeof value == 'string' || isSymbol$1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  var _toKey = toKey$5;

  var castPath$3 = _castPath,
      toKey$4 = _toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet$3(object, path) {
    path = castPath$3(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$4(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  var _baseGet = baseGet$3;

  var getNative$4 = _getNative;

  var defineProperty$2 = (function() {
    try {
      var func = getNative$4(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty$1 = defineProperty$2;

  var defineProperty$1 = _defineProperty$1;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue$3(object, key, value) {
    if (key == '__proto__' && defineProperty$1) {
      defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue$3;

  var baseAssignValue$2 = _baseAssignValue,
      eq$3 = eq_1;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue$2(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$7.call(object, key) && eq$3(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue$2(object, key, value);
    }
  }

  var _assignValue = assignValue$2;

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex$4(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex$4;

  var assignValue$1 = _assignValue,
      castPath$2 = _castPath,
      isIndex$3 = _isIndex,
      isObject$8 = isObject_1,
      toKey$3 = _toKey;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet$1(object, path, value, customizer) {
    if (!isObject$8(object)) {
      return object;
    }
    path = castPath$2(path, object);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey$3(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject$8(objValue)
            ? objValue
            : (isIndex$3(path[index + 1]) ? [] : {});
        }
      }
      assignValue$1(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  var _baseSet = baseSet$1;

  var baseGet$2 = _baseGet,
      baseSet = _baseSet,
      castPath$1 = _castPath;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy$2(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet$2(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath$1(path, object), value);
      }
    }
    return result;
  }

  var _basePickBy = basePickBy$2;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */

  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn$1;

  var baseGetTag$4 = _baseGetTag,
      isObjectLike$6 = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments$1(value) {
    return isObjectLike$6(value) && baseGetTag$4(value) == argsTag$2;
  }

  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
      isObjectLike$5 = isObjectLike_1;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$8.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$4 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike$5(value) && hasOwnProperty$6.call(value, 'callee') &&
      !propertyIsEnumerable$1.call(value, 'callee');
  };

  var isArguments_1 = isArguments$4;

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$3(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  var isLength_1 = isLength$3;

  var castPath = _castPath,
      isArguments$3 = isArguments_1,
      isArray$6 = isArray_1,
      isIndex$2 = _isIndex,
      isLength$2 = isLength_1,
      toKey$2 = _toKey;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath$1(object, path, hasFunc) {
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey$2(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength$2(length) && isIndex$2(key, length) &&
      (isArray$6(object) || isArguments$3(object));
  }

  var _hasPath = hasPath$1;

  var baseHasIn = _baseHasIn,
      hasPath = _hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn$2(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  var hasIn_1 = hasIn$2;

  var basePickBy$1 = _basePickBy,
      hasIn$1 = hasIn_1;

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick$1(object, paths) {
    return basePickBy$1(object, paths, function(value, path) {
      return hasIn$1(object, path);
    });
  }

  var _basePick = basePick$1;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  function arrayPush$3(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush$3;

  var Symbol$2 = _Symbol,
      isArguments$2 = isArguments_1,
      isArray$5 = isArray_1;

  /** Built-in value references. */
  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable$1(value) {
    return isArray$5(value) || isArguments$2(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable$1;

  var arrayPush$2 = _arrayPush,
      isFlattenable = _isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten$1(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$1(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush$2(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  var _baseFlatten = baseFlatten$1;

  var baseFlatten = _baseFlatten;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten$1;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply$2(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply$2;

  var apply$1 = _apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest$2(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply$1(func, this, otherArgs);
    };
  }

  var _overRest = overRest$2;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant$1;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */

  function identity$3(value) {
    return value;
  }

  var identity_1 = identity$3;

  var constant = constant_1,
      defineProperty = _defineProperty$1,
      identity$2 = identity_1;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString$1 = !defineProperty ? identity$2 : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString$1;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */

  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut$1(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut$1;

  var baseSetToString = _baseSetToString,
      shortOut = _shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString$2 = shortOut(baseSetToString);

  var _setToString = setToString$2;

  var flatten = flatten_1,
      overRest$1 = _overRest,
      setToString$1 = _setToString;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest$1(func) {
    return setToString$1(overRest$1(func, undefined, flatten), func + '');
  }

  var _flatRest = flatRest$1;

  var basePick = _basePick,
      flatRest = _flatRest;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });

  var pick_1 = pick;

  var pick$1 = /*@__PURE__*/getDefaultExportFromCjs(pick_1);

  /* eslint-disable no-unused-vars */

  // eslint-disable-next-line no-shadow
  let QueryParams = /*#__PURE__*/function (QueryParams) {
    QueryParams["Tab"] = "tab";
    QueryParams["Redirect"] = "redirectUrl";
    QueryParams["Refresh"] = "refresh";
    return QueryParams;
  }({});

  // eslint-disable-next-line no-shadow
  let QueryListParams = /*#__PURE__*/function (QueryListParams) {
    QueryListParams["Page"] = "page";
    QueryListParams["SortBy"] = "sortBy";
    QueryListParams["Direction"] = "direction";
    QueryListParams["Filters"] = "filters";
    QueryListParams["Query"] = "query";
    return QueryListParams;
  }({});
  function useQueryParams() {
    const {
      pathname
    } = reactRouterDom.useLocation();
    const [searchParams, setSearchParams] = reactRouterDom.useSearchParams();
    const parsedQuery = React$1.useMemo(() => lib$2.parse(searchParams.toString(), {
      allowDots: true
    }), [searchParams, pathname]);
    const {
      sortBy,
      direction,
      page,
      tab,
      filters,
      redirectUrl
    } = parsedQuery;
    const listParams = React$1.useMemo(() => pick$1(parsedQuery, [QueryListParams.SortBy, QueryListParams.Filters, QueryListParams.Direction, QueryListParams.Page, QueryListParams.Query]), [parsedQuery]);
    function storeParams(params) {
      setSearchParams(lib$2.stringify({
        sortBy,
        direction,
        page,
        tab,
        filters,
        redirectUrl,
        ...params
      }, {
        allowDots: true
      }));
    }
    function clearParams(...params) {
      const searchParamsKeys = Array.from(searchParams.keys());
      const clearCandidates = params.length ? params : searchParamsKeys;
      for (const param of searchParamsKeys) {
        for (const paramToClear of clearCandidates) {
          if (param.startsWith(paramToClear) && searchParams.get(param)) {
            searchParams.delete(param);
          }
        }
      }
      setSearchParams(searchParams);
    }
    function getParam(param) {
      searchParams.get(param);
    }
    return {
      parsedQuery,
      listParams,
      filters: filters,
      sortBy,
      direction,
      page,
      tab,
      redirectUrl,
      storeParams,
      clearParams,
      getParam
    };
  }

  const useFilterDrawer = () => {
    const [filtersCount, setFiltersCount] = React$1.useState(0);
    const dispatch = require$$3.useDispatch();
    const isVisible = require$$3.useSelector(state => state.filterDrawer.isVisible);
    const {
      filters = {}
    } = useQueryParams();
    React$1.useEffect(() => {
      setFiltersCount(Object.keys(filters).length);
    }, [filters]);
    const toggleFilter = () => {
      dispatch(isVisible ? hideFilterDrawer() : showFilterDrawer());
    };
    const open = () => {
      dispatch(showFilterDrawer());
    };
    const close = () => {
      dispatch(hideFilterDrawer());
    };
    return {
      filtersCount,
      isVisible,
      toggleFilter,
      open,
      close
    };
  };

  /* eslint-disable no-console */
  /**
   * @load ./use-local-storage.doc.md
   * @subcategory Hooks
   * @class
   * @see https://usehooks.com/useLocalStorage
   *
   * @param {string} key          key under which hook will store the data
   * @param {T}      initialValue    value which will be stringified and stored
   * @return {UseLocalStorageResult<T>}
   * @bundle
   * @type {Function}
   */
  function useLocalStorage(key, initialValue) {
    // State to store our value
    // Pass initial state function to useState so logic is only executed once
    const [storedValue, setStoredValue] = React$1.useState(() => {
      try {
        // Get from local storage by key
        const item = window.localStorage.getItem(key);
        // Parse stored json or if none return initialValue
        return item ? JSON.parse(item) : initialValue;
      } catch (error) {
        // If error also return initialValue
        console.log(error);
        return initialValue;
      }
    });

    // Return a wrapped version of useState's setter function that ...
    // ... persists the new value to localStorage.
    const setValue = value => {
      try {
        // Allow value to be a function so we have same API as useState
        const valueToStore = value instanceof Function ? value(storedValue) : value;
        // Save state
        setStoredValue(valueToStore);
        // Save to local storage
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      } catch (error) {
        // A more advanced implementation would handle the error case
        console.log(error);
      }
    };
    return [storedValue, setValue];
  }

  const useHistoryListen = () => {
    const location = reactRouter.useLocation();
    const [storedPath, setStoredPath] = useLocalStorage('prevPage', {});
    const {
      to = {},
      from = {}
    } = require$$3.useSelector(state => state.router);
    const dispatch = require$$3.useDispatch();
    React$1.useEffect(() => {
      if (storedPath) {
        dispatch(initializeRoute(storedPath));
      }
    }, []);
    React$1.useEffect(() => {
      const previousPath = [to.pathname, to.search].join('');
      const currentPath = [location.pathname, location.search].join('');
      if (previousPath !== currentPath) {
        dispatch(changeRoute(location));
      }
    }, [location]);
    React$1.useEffect(() => {
      if (from.pathname) {
        setStoredPath(from);
      }
    }, [from]);
  };

  const isSelected = (href, location) => {
    const regExp = new RegExp(`${href}($|/)`);
    return !!location.pathname.match(regExp);
  };
  function useNavigationResources(resources) {
    const [openElements, setOpenElements] = useLocalStorage('sidebarElements', {});
    const navigate = reactRouter.useNavigate();
    const location = reactRouter.useLocation();
    const {
      translateLabel
    } = useTranslation();
    const enrichResource = React$1.useMemo(() => (resource, icon) => ({
      href: resource.href || undefined,
      icon,
      isSelected: isSelected(resource.href, location),
      label: translateLabel(resource.name, resource.id),
      id: resource.id,
      onClick: event => {
        if (resource.href) {
          event.preventDefault();
          navigate(resource.href);
        }
      }
    }), [location, navigate]);

    // grouping resources into parents
    const map = resources
    // first filter out resources which are not visible
    .filter(res => res.href && res.navigation?.show !== false).reduce((memo, resource) => {
      // in case resource has the same name as parent we namespace it wit "resource-""
      const key = resource.navigation?.name || ['resource', resource.name].join('-');
      if (!resource.navigation || resource.navigation.name === null) {
        memo[key] = enrichResource(resource, resource.navigation?.icon);
      } else if (memo[key] && memo[key].elements && resource.navigation?.name) {
        memo[key].label = translateLabel(resource.navigation?.name);
        memo[key].elements?.push?.(enrichResource(resource));
      } else {
        memo[key] = {
          elements: [enrichResource(resource)],
          label: translateLabel(resource.navigation?.name),
          icon: resource.navigation?.icon,
          onClick: () => setOpenElements({
            ...openElements,
            [key]: !openElements[key]
          }),
          isOpen: !!openElements[key]
        };
      }
      return memo;
    }, {});
    return Object.values(map);
  }

  const FORM_VALUE_NULL = '__FORM_VALUE_NULL__';
  const FORM_VALUE_EMPTY_OBJECT = '__FORM_VALUE_EMPTY_OBJECT__';
  const FORM_VALUE_EMPTY_ARRAY = '__FORM_VALUE_EMPTY_ARRAY__';
  const isObjectOrArray = value => typeof value === 'object' && value.constructor !== File && !(value instanceof Date);

  /**
   * Changes RecordJSON that it can be send as a FormData to the backend.
   *
   * FormData is required because we are sending files via the wire. But it has limitations.
   * Namely it can only transport files and strings. That is why we have to convert some
   * standard types like NULL to constants so they can be property converted back by the backend.
   * And thus properly handled.
   *
   * @private
   * @param   {RecordJSON}  record
   * @return  {FormData}
   */
  function paramsToFormData(params) {
    const formData = new FormData();

    // Assume that params are flatted
    Object.entries(params).forEach(([key, value]) => {
      // {@link updateRecord} does not change empty objects "{}" - so in order to prevent having
      // them changed to "[object Object]" we have to set them to empty strings.
      if (value === null) {
        return formData.set(key, FORM_VALUE_NULL);
      }
      // File objects has to go through because they are handled by FormData
      if (isObjectOrArray(value)) {
        if (Array.isArray(value)) {
          return formData.set(key, FORM_VALUE_EMPTY_ARRAY);
        }
        return formData.set(key, FORM_VALUE_EMPTY_OBJECT);
      }
      // Convert Date fields to UTC timezone
      if (value instanceof Date) {
        return formData.set(key, value.toISOString());
      }

      // Rest goes as a standard value
      return formData.set(key, value);
    });
    return formData;
  }

  /**
   * Handlers of all [Actions]{@link Action} of type `record` returns record.
   * Depending on a place and response we have to merge what was returned
   * to the actual state. It is done in following places:
   * - {@link useRecord} hook
   * - {@link RecordInList} component
   * - {@link RecordAction} component
   *
   * @private
   */
  const mergeRecordResponse = (record, response) => ({
    // we start from the response because it can have different recordActions or bulkActions
    ...(response.record || record),
    // records has to be reset every time because so that user wont
    // see old errors which are not relevant anymore
    errors: response.record.errors,
    populated: {
      ...record.populated,
      ...response.record.populated
    },
    params: {
      ...record.params,
      ...response.record.params
    }
  });

  /**
   * HOF returning a function which takes a record and returns an updated record.
   * This way we can pass this to setState in react, which takes old state
   * (in our case previousRecord) as an argument.
   *
   * Function is used when to the {@link OnPropertyChange} callback, user passes
   * key (property name) and the value (followed by an optional selectedRecord).
   *
   * The responsibility of the function is to:
   * - clear old values under passed key: so when user passes property === `some.key`
   *   function removes `some.key.1`, `some.key.2` etc
   * - sets new value under the passed key for primitive types
   * - in case of objects - it flattens them first and then sets all the resulted values
   *   under the path provided in the property argument
   * - it fills value in RecordJSON#populated when selectedRecord is given
   * - finally it invalidates populated for given property
   *
   *
   * @param {string}      property        property that must be updated, supports nesting
   *                                      with dots
   * @param {any}         value           value that must be set, undefined or null if
   *                                      deleting, will be flattened
   * @param {RecordJSON}  selectedRecord  if value is reference ID, this must be a record
   *                                      it's referencing to
   * @private
   */
  const updateRecord = (property, value, selectedRecord) => previousRecord => {
    let populatedModified = false;
    const populatedCopy = {
      ...previousRecord.populated
    };
    const paramsCopy = flat.set(previousRecord.params, property, value);
    if (property in populatedCopy) {
      delete populatedCopy[property];
      populatedModified = true;
    }
    if (selectedRecord) {
      populatedCopy[property] = selectedRecord;
      populatedModified = true;
    }
    return {
      ...previousRecord,
      params: paramsCopy,
      populated: populatedModified ? populatedCopy : previousRecord.populated
    };
  };

  const isEntireRecordGiven = (propertyOrRecord, value) => !!(typeof value === 'undefined'
  // user can pass property and omit value. This makes sense when
  // third argument of the function (selectedRecord) is passed to onChange
  // callback
  && !(typeof propertyOrRecord === 'string')
  // we assume that only params has to be given
  && propertyOrRecord.params);

  const filterRecordParams = function (record, options = {}) {
    if (options.includeParams && record) {
      return {
        ...record,
        params: flat.selectParams(record.params || {}, options.includeParams)
      };
    }
    return record;
  };
  const isPropertyPermitted = (propertyName, options = {}) => {
    const {
      includeParams
    } = options;
    if (includeParams) {
      const parts = flat.pathToParts(propertyName, {
        skipArrayIndexes: true
      });
      return parts.some(part => includeParams.includes(part));
    }
    return true;
  };

  const api$3 = new ApiClient();

  /**
   * @load ./use-record.doc.md
   * @subcategory Hooks
   * @class
   * @hideconstructor
   * @bundle
   * @param {RecordJSON} [initialRecord],
   * @param {string} resourceId
   * @param {UseRecordOptions} [options]
   * @return {UseRecordResult}
   */
  const useRecord = (initialRecord, resourceId, options) => {
    // setting up state
    const [loading, setLoading] = React$1.useState(false);
    const [isSynced, setIsSynced] = React$1.useState(true);
    const [progress, setProgress] = React$1.useState(0);
    const {
      parsedQuery
    } = useQueryParams();
    const filteredRecord = initialRecord ? filterRecordParams(initialRecord, options) : null;
    const [record, setRecord] = React$1.useState({
      ...filteredRecord,
      params: filteredRecord?.params ?? {},
      errors: initialRecord?.errors ?? {},
      populated: initialRecord?.populated ?? {}
    });

    // it keeps the same format as useState function which can take either value or function
    const setFilteredRecord = React$1.useCallback(value => {
      const newRecord = value instanceof Function ? value(record) : value;
      setRecord(filterRecordParams(newRecord, options));
    }, [options, record]);
    const onNotice = useNotice();
    const handleChange = React$1.useCallback((propertyOrRecord, value, incomingRecord) => {
      if (isEntireRecordGiven(propertyOrRecord, value)) {
        setFilteredRecord(propertyOrRecord);
      } else if (isPropertyPermitted(propertyOrRecord, options)) {
        setRecord(updateRecord(propertyOrRecord, value, incomingRecord));
      } else {
        // eslint-disable-next-line no-console
        console.warn([`You are trying to set property: "${propertyOrRecord}" which`, 'is not permitted. Take a look at `useRecord(..., { includeParams: [...]})`'].join('\n'));
      }
      setIsSynced(false);
    }, [setRecord, options]);
    const handleSubmit = React$1.useCallback((customParams = {}, submitOptions) => {
      setLoading(true);
      const mergedParams = flat.merge(record.params, customParams);
      const formData = paramsToFormData(mergedParams);
      const actionParams = {
        resourceId,
        onUploadProgress: e => setProgress(Math.round(e.loaded * 100 / (e.total ?? 1))),
        data: formData,
        params: parsedQuery,
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      };
      const promise = initialRecord?.id ? api$3.recordAction({
        ...actionParams,
        actionName: 'edit',
        recordId: record.id
      }) : api$3.resourceAction({
        ...actionParams,
        actionName: 'new'
      });
      promise.then(response => {
        if (response.data.notice) {
          onNotice(response.data.notice);
        }
        if (submitOptions?.updateOnSave !== false) {
          setFilteredRecord(prev => mergeRecordResponse(prev, response.data));
        }
        setProgress(0);
        setLoading(false);
        setIsSynced(true);
      }).catch(() => {
        onNotice({
          message: 'There was an error updating record, Check out console to see more information.',
          type: 'error'
        });
        setProgress(0);
        setLoading(false);
      });
      return promise;
    }, [record, resourceId, setLoading, setProgress, setRecord]);
    return {
      record,
      handleChange,
      submit: handleSubmit,
      loading,
      progress,
      setRecord: setFilteredRecord,
      isSynced
    };
  };

  const api$2 = new ApiClient();

  /**
   * @load ./use-records.doc.md
   * @subcategory Hooks
   * @class
   * @hideconstructor
   *
   * @param {string} resourceId      id of a resource for which you want to fetch records
   * @return {UseRecordsResult}
   * @bundle
   * @type {Function}
   */
  function useRecords(resourceId) {
    const [records, setRecords] = React$1.useState([]);
    const [loading, setLoading] = React$1.useState(false);
    const [perPage, setPerPage] = React$1.useState(10);
    const [page, setPage] = React$1.useState(1);
    const [total, setTotal] = React$1.useState(0);
    const [direction, setDirection] = React$1.useState('asc');
    const [sortBy, setSortBy] = React$1.useState();
    const location = reactRouter.useLocation();
    const navigate = reactRouter.useNavigate();
    const addNotice = useNotice();
    const onNotice = useNotice();
    const fetchData = () => {
      setLoading(true);
      const query = new URLSearchParams(location.search);
      const promise = api$2.resourceAction({
        actionName: 'list',
        resourceId,
        params: query
      });
      promise.then(response => {
        const listActionResponse = response.data;
        if (listActionResponse.notice) {
          onNotice(listActionResponse.notice);
        }
        if (listActionResponse.redirectUrl) {
          navigate(listActionResponse.redirectUrl);
          return;
        }
        setRecords(listActionResponse.records);
        setPage(listActionResponse.meta.page);
        setPerPage(listActionResponse.meta.perPage);
        setTotal(listActionResponse.meta.total);
        setDirection(listActionResponse.meta.direction);
        setSortBy(listActionResponse.meta.sortBy);
        setLoading(false);
      }).catch(() => {
        addNotice({
          message: 'errorFetchingRecords',
          type: 'error',
          resourceId
        });
      });
      return promise;
    };
    React$1.useEffect(() => {
      if (hasForceRefresh(location.search)) {
        navigate({
          pathname: location.pathname,
          search: removeForceRefresh(location.search).toString()
        }, {
          replace: true
        });
      } else {
        fetchData();
      }
    }, [resourceId, location.search, location.state]);
    return {
      records,
      loading,
      page,
      total,
      direction,
      sortBy,
      perPage,
      fetchData
    };
  }

  /**
   * @load ./use-resource.doc.md
   * @subcategory Hooks
   * @class
   * @hideconstructor
   * @bundle
   * @param {string} resourceId    Id of a resource you want to get
   */
  const useResource = resourceId => {
    const resources = require$$3.useSelector(state => state.resources);
    const foundResource = resources.find(resource => resource.id === resourceId);
    return foundResource;
  };

  /**
   * @load ./use-selected-records.doc.md
   * @subcategory Hooks
   * @class
   * @hideconstructor
   * @param {Array<RecordJSON>} records     List of records on which you can perform `select` action
   * @return {UseSelectedRecordsResult}
   * @bundle
   * @type {Function}
   */
  function useSelectedRecords(records) {
    const [selectedRecords, setSelectedRecords] = React$1.useState([]);
    const handleSelect = record => {
      const selectedIndex = selectedRecords.findIndex(selected => selected.id === record.id);
      if (selectedIndex < 0) {
        setSelectedRecords([...selectedRecords, record]);
      } else {
        const newSelectedRecords = [...selectedRecords];
        newSelectedRecords.splice(selectedIndex, 1);
        setSelectedRecords(newSelectedRecords);
      }
    };
    const handleSelectAll = () => {
      const missing = records.filter(record => !selectedRecords.find(selected => selected.id === record.id) && record.bulkActions.length);
      if (missing.length) {
        setSelectedRecords([...selectedRecords, ...missing]);
      } else {
        const newSelectedRecords = selectedRecords.filter(selected => !records.find(record => record.id === selected.id));
        setSelectedRecords(newSelectedRecords);
      }
    };
    return {
      handleSelect,
      handleSelectAll,
      selectedRecords,
      setSelectedRecords
    };
  }

  var Hooks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FORM_VALUE_EMPTY_ARRAY: FORM_VALUE_EMPTY_ARRAY,
    FORM_VALUE_EMPTY_OBJECT: FORM_VALUE_EMPTY_OBJECT,
    FORM_VALUE_NULL: FORM_VALUE_NULL,
    QueryListParams: QueryListParams,
    QueryParams: QueryParams,
    isEntireRecordGiven: isEntireRecordGiven,
    paramsToFormData: paramsToFormData,
    updateRecord: updateRecord,
    useAction: useAction,
    useActionResponseHandler: useActionResponseHandler,
    useCurrentAdmin: useCurrentAdmin,
    useFilterDrawer: useFilterDrawer,
    useHistoryListen: useHistoryListen,
    useLocalStorage: useLocalStorage,
    useModal: useModal,
    useNavigationResources: useNavigationResources,
    useNotice: useNotice,
    useQueryParams: useQueryParams,
    useRecord: useRecord,
    useRecords: useRecords,
    useResource: useResource,
    useSelectedRecords: useSelectedRecords,
    useTranslation: useTranslation
  });

  /**
   * @alias ActionButtonProps
   * @memberof ActionButton
   */

  /**
   * Renders Button which redirects to given action
   *
   * ### Usage
   *
   * ```
   * import { ActionButton } from 'adminjs'
   * ```
   *
   * @component
   * @subcategory Application
   */
  const ActionButton = props => {
    const {
      children,
      action,
      actionPerformed,
      resourceId,
      recordId,
      recordIds,
      search,
      queryParams
    } = props;
    const {
      href,
      handleClick
    } = useAction(action, {
      resourceId,
      recordId,
      recordIds,
      search: lib$2.stringify(queryParams, {
        addQueryPrefix: true
      }) || search
    }, actionPerformed);
    if (!action) {
      return null;
    }
    const firstChild = React__default$1.default.Children.toArray(children)[0];
    if (!firstChild || typeof firstChild === 'string' || typeof firstChild === 'number' || typeof firstChild === 'boolean') {
      throw new Error('ActionButton has to have one child');
    }
    const contentTag = getActionElementCss(resourceId, action.name, 'button');
    const WrappedElement = /*#__PURE__*/React__default$1.default.cloneElement(firstChild, {
      onClick: handleClick,
      'data-testid': buildActionTestId(action),
      'data-css': contentTag,
      href
    });
    return WrappedElement;
  };
  const OverridableActionButton = allowOverride(ActionButton, 'ActionButton');

  const BreadcrumbLink = styledComponents.styled(reactRouterDom.Link)`
  color: ${({
  theme
}) => theme.colors.grey60};
  font-family: ${({
  theme
}) => theme.font};
  line-height: ${({
  theme
}) => theme.lineHeights.default};
  font-size: ${({
  theme
}) => theme.fontSizes.default};
  text-decoration: none;

  &:hover {
    color: ${({
  theme
}) => theme.colors.primary100};
    &:after {
      color: ${({
  theme
}) => theme.colors.grey60};
    }
  }

  &:after {
    content: '/';
    padding: 0 ${({
  theme
}) => theme.space.default};
  }

  &:last-child {
    color: ${({
  theme
}) => theme.colors.text};
    &:after {
      content: '';
    }
  }
`;
  const BreadcrumbText = styledComponents.styled(DesignSystem.Text)`
  color: ${({
  theme
}) => theme.colors.grey100};
  font-family: ${({
  theme
}) => theme.font};
  font-weight: ${({
  theme
}) => theme.fontWeights.normal.toString()};
  line-height: ${({
  theme
}) => theme.lineHeights.default};
  font-size: ${({
  theme
}) => theme.fontSizes.default};
  cursor: pointer;
  display: inline;

  &:after {
    content: '/';
    padding: 0 ${({
  theme
}) => theme.space.default};
  }

  &:last-child {
    &:after {
      content: '';
    }
  }
`;

  /**
   * @memberof Breadcrumbs
   */

  /**
   * @component
   * @private
   */
  const Breadcrumbs = props => {
    const {
      resource,
      record,
      actionName
    } = props;
    const listAction = resource.resourceActions.find(({
      name
    }) => name === 'list');
    const action = resource.actions.find(a => a.name === actionName);
    const h = new ViewHelpers();
    const {
      tl,
      ta
    } = useTranslation();
    const contentTag = getActionElementCss(resource.id, actionName, 'breadcrumbs');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexGrow: 1,
      className: DesignSystem.cssClass('Breadcrumbs'),
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(BreadcrumbLink, {
      to: h.dashboardUrl()
    }, tl('dashboard')), listAction ? /*#__PURE__*/React__default$1.default.createElement(BreadcrumbLink, {
      to: resource.href ? resource.href : '/',
      className: record ? 'is-active' : ''
    }, tl(resource.name, resource.id)) : /*#__PURE__*/React__default$1.default.createElement(BreadcrumbText, null, tl(resource.name, resource.id)), action && action.name !== 'list' && /*#__PURE__*/React__default$1.default.createElement(BreadcrumbLink, {
      to: "#"
    }, ta(action.label)));
  };
  const OverridableBreadcrumbs = allowOverride(Breadcrumbs, 'Breadcrumbs');

  const actionsToButtonGroup = options => {
    const {
      actions,
      params,
      handleClick,
      translateFunctions
    } = options;
    const {
      translateAction
    } = translateFunctions;
    const {
      resourceId
    } = params;
    const buttons = actions.map(action => {
      const href = actionHref(action, params);
      return {
        icon: action.icon,
        label: translateAction(action.label, resourceId),
        variant: action.variant,
        source: action,
        href: href || undefined,
        // when href is not defined - handle click should also be not defined
        // This prevents from "cursor: pointer;"
        onClick: href ? handleClick : undefined,
        'data-testid': buildActionTestId(action),
        buttons: [],
        'data-css': `${action.resourceId}-${action.name}-button`
      };
    });

    // nesting buttons
    const buttonsMap = buttons.reduce((memo, button) => {
      const action = button.source;
      if (action.parent) {
        const parent = memo[action.parent] || buttons.find(btn => btn.source.name === action.parent) || {
          label: action.parent
        };
        parent.buttons = parent.buttons || [];
        parent.buttons.push(button);
        return {
          ...memo,
          [action.parent]: parent
        };
      }
      return {
        ...memo,
        [button.source.name]: button
      };
    }, {});
    return Object.values(buttonsMap);
  };

  function _extends$s() { _extends$s = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$s.apply(this, arguments); }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const StyledLink$1 = styledComponents.styled(({
    rounded,
    to,
    ...rest
  }) => /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Link, _extends$s({
    to: to
  }, rest)))`${DesignSystem.ButtonCSS}`;
  const StyledBackButton = props => {
    const location = reactRouter.useLocation();
    const {
      showInDrawer
    } = props;
    const cssCloseIcon = showInDrawer ? 'ChevronRight' : 'ChevronLeft';
    return /*#__PURE__*/React__default$1.default.createElement(StyledLink$1, {
      size: "icon",
      to: {
        pathname: '..',
        search: location.search
      },
      relative: "route",
      rounded: true,
      mr: "lg",
      type: "button"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: cssCloseIcon
    }));
  };
  const OverridableStyledBackButton = allowOverride(StyledBackButton, 'StyledBackButton');

  /* eslint-disable jsx-a11y/anchor-is-valid */

  /**
   * Header of an action. It renders Action name with buttons for all the actions.
   *
   * ### Usage
   *
   * ```
   * import { ActionHeader } from 'adminjs'
   * ```
   *
   * @component
   * @subcategory Application
   */
  const ActionHeader = props => {
    const {
      resource,
      actionPerformed,
      record,
      action,
      tag,
      omitActions,
      toggleFilter: isFilterButtonVisible
    } = props;
    const translateFunctions = useTranslation();
    const {
      translateButton,
      translateAction
    } = translateFunctions;
    const navigate = reactRouter.useNavigate();
    const location = reactRouter.useLocation();
    const actionResponseHandler = useActionResponseHandler(actionPerformed);
    const modalFunctions = useModal();
    const {
      toggleFilter,
      filtersCount
    } = useFilterDrawer();
    if (action.hideActionHeader) {
      return null;
    }
    const resourceId = resource.id;
    const params = {
      resourceId,
      recordId: record?.id
    };
    // eslint-disable-next-line max-len
    const handleActionClick = (event, sourceAction) => buildActionClickHandler({
      action: sourceAction,
      params,
      actionResponseHandler,
      navigate,
      location,
      translateFunctions,
      modalFunctions
    })(event);
    const actionButtons = actionsToButtonGroup({
      actions: record ? record.recordActions.filter(ra => !action || action.name !== ra.name)
      // only new action should be seen in regular "Big" actions place
      : resource.resourceActions.filter(ra => ra.name === 'new' && (!action || action.name !== ra.name)),
      params,
      handleClick: handleActionClick,
      translateFunctions,
      modalFunctions
    });
    if (typeof isFilterButtonVisible === 'function' || isFilterButtonVisible) {
      const filterTranslationKey = filtersCount > 0 ? 'filterActive' : 'filter';
      actionButtons.push({
        label: translateButton(filterTranslationKey, resource.id, {
          count: filtersCount
        }),
        onClick: toggleFilter,
        icon: 'Filter',
        'data-css': getResourceElementCss(resource.id, 'filter-button')
      });
    }

    // list and new actions are special and are are always
    const customResourceButtons = actionsToButtonGroup({
      actions: action.showResourceActions ? resource.resourceActions.filter(ra => !['list', 'new'].includes(ra.name)) : [],
      params: {
        resourceId
      },
      handleClick: handleActionClick,
      translateFunctions,
      modalFunctions
    });
    const title = action ? translateAction(action.label, resourceId) : resource.name;

    // styled which differs if action header is in the drawer or not
    const cssIsRootFlex = !action.showInDrawer;
    const cssHeaderMT = action.showInDrawer ? '' : 'lg';
    const cssActionsMB = action.showInDrawer ? 'xl' : 'default';
    const CssHComponent = action.showInDrawer ? DesignSystem.H3 : DesignSystem.H2;
    const contentTag = getActionElementCss(resourceId, action.name, 'action-header');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      className: DesignSystem.cssClass('ActionHeader'),
      "data-css": contentTag
    }, !action.showInDrawer && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      flexDirection: "row",
      px: ['default', 0]
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableBreadcrumbs, {
      resource: resource,
      actionName: action.name,
      record: record
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexShrink: 0
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ButtonGroup, {
      size: "sm",
      rounded: true,
      buttons: customResourceButtons
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      display: ['block', cssIsRootFlex ? 'flex' : 'block']
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mt: cssHeaderMT,
      flexGrow: 1,
      px: ['default', 0]
    }, /*#__PURE__*/React__default$1.default.createElement(CssHComponent, {
      mb: "lg"
    }, action.showInDrawer && /*#__PURE__*/React__default$1.default.createElement(OverridableStyledBackButton, {
      showInDrawer: action.showInDrawer
    }), title, tag ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Badge, {
      variant: "default",
      outline: true,
      ml: "default"
    }, tag) : null)), !omitActions && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mt: "xl",
      mb: cssActionsMB,
      flexShrink: 0
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ButtonGroup, {
      buttons: actionButtons
    }))));
  };
  const OverridableActionHeader = allowOverride(ActionHeader, 'ActionHeader');

  const AdminModal = () => {
    const modalState = require$$3.useSelector(state => state.modal);
    return modalState.show ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Modal, modalState.modalProps) : null;
  };

  const AppLoader = () => /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
    width: "100%",
    height: "100%",
    flex: true,
    alignItems: "center",
    justifyContent: "center"
  }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null));

  const AuthenticationBackgroundComponent = () => null;
  const OverridableAuthenticationBackgroundComponent = allowOverride(AuthenticationBackgroundComponent, 'AuthenticationBackgroundComponent');

  const ErrorMessage = ({
    error
  }) => {
    const {
      translateMessage
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      m: "xxl",
      variant: "danger",
      message: "Javascript Error"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, error.toString()), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      mt: "default"
    }, translateMessage('seeConsoleForMore')));
  };
  let ErrorBoundary$1 = class ErrorBoundary extends React__default$1.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        error: null
      };
    }
    componentDidCatch(error) {
      this.setState({
        error
      });
    }
    render() {
      const {
        children
      } = this.props;
      const {
        error
      } = this.state;
      if (error !== null) {
        return /*#__PURE__*/React__default$1.default.createElement(ErrorMessage, {
          error: error
        });
      }
      return children || null;
    }
  };

  var dnd_cjs = {};

  var useMemoOne_cjs = {};

  Object.defineProperty(useMemoOne_cjs, '__esModule', { value: true });

  var react = React__default$1.default;

  function areInputsEqual$1(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }

    for (var i = 0; i < newInputs.length; i++) {
      if (newInputs[i] !== lastInputs[i]) {
        return false;
      }
    }

    return true;
  }

  function useMemoOne$1(getResult, inputs) {
    var initial = react.useState(function () {
      return {
        inputs: inputs,
        result: getResult()
      };
    })[0];
    var isFirstRun = react.useRef(true);
    var committed = react.useRef(initial);
    var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual$1(inputs, committed.current.inputs));
    var cache = useCache ? committed.current : {
      inputs: inputs,
      result: getResult()
    };
    react.useEffect(function () {
      isFirstRun.current = false;
      committed.current = cache;
    }, [cache]);
    return cache.result;
  }
  function useCallbackOne(callback, inputs) {
    return useMemoOne$1(function () {
      return callback;
    }, inputs);
  }
  var useMemo = useMemoOne$1;
  var useCallback = useCallbackOne;

  useMemoOne_cjs.useCallback = useCallback;
  useMemoOne_cjs.useCallbackOne = useCallbackOne;
  useMemoOne_cjs.useMemo = useMemo;
  useMemoOne_cjs.useMemoOne = useMemoOne$1;

  var cssBoxModel_cjs = {};

  var prefix$2 = 'Invariant failed';
  function invariant$2(condition, message) {
      if (condition) {
          return;
      }
      var provided = typeof message === 'function' ? message() : message;
      var value = provided ? "".concat(prefix$2, ": ").concat(provided) : prefix$2;
      throw new Error(value);
  }

  var tinyInvariant_cjs = invariant$2;

  Object.defineProperty(cssBoxModel_cjs, '__esModule', { value: true });

  function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var invariant$1 = _interopDefault$1(tinyInvariant_cjs);

  var getRect = function getRect(_ref) {
    var top = _ref.top,
        right = _ref.right,
        bottom = _ref.bottom,
        left = _ref.left;
    var width = right - left;
    var height = bottom - top;
    var rect = {
      top: top,
      right: right,
      bottom: bottom,
      left: left,
      width: width,
      height: height,
      x: left,
      y: top,
      center: {
        x: (right + left) / 2,
        y: (bottom + top) / 2
      }
    };
    return rect;
  };
  var expand = function expand(target, expandBy) {
    return {
      top: target.top - expandBy.top,
      left: target.left - expandBy.left,
      bottom: target.bottom + expandBy.bottom,
      right: target.right + expandBy.right
    };
  };
  var shrink = function shrink(target, shrinkBy) {
    return {
      top: target.top + shrinkBy.top,
      left: target.left + shrinkBy.left,
      bottom: target.bottom - shrinkBy.bottom,
      right: target.right - shrinkBy.right
    };
  };

  var shift = function shift(target, shiftBy) {
    return {
      top: target.top + shiftBy.y,
      left: target.left + shiftBy.x,
      bottom: target.bottom + shiftBy.y,
      right: target.right + shiftBy.x
    };
  };

  var noSpacing$1 = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var createBox = function createBox(_ref2) {
    var borderBox = _ref2.borderBox,
        _ref2$margin = _ref2.margin,
        margin = _ref2$margin === void 0 ? noSpacing$1 : _ref2$margin,
        _ref2$border = _ref2.border,
        border = _ref2$border === void 0 ? noSpacing$1 : _ref2$border,
        _ref2$padding = _ref2.padding,
        padding = _ref2$padding === void 0 ? noSpacing$1 : _ref2$padding;
    var marginBox = getRect(expand(borderBox, margin));
    var paddingBox = getRect(shrink(borderBox, border));
    var contentBox = getRect(shrink(paddingBox, padding));
    return {
      marginBox: marginBox,
      borderBox: getRect(borderBox),
      paddingBox: paddingBox,
      contentBox: contentBox,
      margin: margin,
      border: border,
      padding: padding
    };
  };

  var parse = function parse(raw) {
    var value = raw.slice(0, -2);
    var suffix = raw.slice(-2);

    if (suffix !== 'px') {
      return 0;
    }

    var result = Number(value);
    !!isNaN(result) ? invariant$1(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]")  : void 0;
    return result;
  };

  var getWindowScroll$1 = function getWindowScroll() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  };

  var offset = function offset(original, change) {
    var borderBox = original.borderBox,
        border = original.border,
        margin = original.margin,
        padding = original.padding;
    var shifted = shift(borderBox, change);
    return createBox({
      borderBox: shifted,
      border: border,
      margin: margin,
      padding: padding
    });
  };
  var withScroll = function withScroll(original, scroll) {
    if (scroll === void 0) {
      scroll = getWindowScroll$1();
    }

    return offset(original, scroll);
  };
  var calculateBox = function calculateBox(borderBox, styles) {
    var margin = {
      top: parse(styles.marginTop),
      right: parse(styles.marginRight),
      bottom: parse(styles.marginBottom),
      left: parse(styles.marginLeft)
    };
    var padding = {
      top: parse(styles.paddingTop),
      right: parse(styles.paddingRight),
      bottom: parse(styles.paddingBottom),
      left: parse(styles.paddingLeft)
    };
    var border = {
      top: parse(styles.borderTopWidth),
      right: parse(styles.borderRightWidth),
      bottom: parse(styles.borderBottomWidth),
      left: parse(styles.borderLeftWidth)
    };
    return createBox({
      borderBox: borderBox,
      margin: margin,
      padding: padding,
      border: border
    });
  };
  var getBox = function getBox(el) {
    var borderBox = el.getBoundingClientRect();
    var styles = window.getComputedStyle(el);
    return calculateBox(borderBox, styles);
  };

  cssBoxModel_cjs.calculateBox = calculateBox;
  cssBoxModel_cjs.createBox = createBox;
  cssBoxModel_cjs.expand = expand;
  cssBoxModel_cjs.getBox = getBox;
  cssBoxModel_cjs.getRect = getRect;
  cssBoxModel_cjs.offset = offset;
  cssBoxModel_cjs.shrink = shrink;
  cssBoxModel_cjs.withScroll = withScroll;

  var safeIsNaN = Number.isNaN ||
      function ponyfill(value) {
          return typeof value === 'number' && value !== value;
      };
  function isEqual$2(first, second) {
      if (first === second) {
          return true;
      }
      if (safeIsNaN(first) && safeIsNaN(second)) {
          return true;
      }
      return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
          return false;
      }
      for (var i = 0; i < newInputs.length; i++) {
          if (!isEqual$2(newInputs[i], lastInputs[i])) {
              return false;
          }
      }
      return true;
  }

  function memoizeOne$1(resultFn, isEqual) {
      if (isEqual === void 0) { isEqual = areInputsEqual; }
      var cache = null;
      function memoized() {
          var newArgs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              newArgs[_i] = arguments[_i];
          }
          if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
              return cache.lastResult;
          }
          var lastResult = resultFn.apply(this, newArgs);
          cache = {
              lastResult: lastResult,
              lastArgs: newArgs,
              lastThis: this,
          };
          return lastResult;
      }
      memoized.clear = function clear() {
          cache = null;
      };
      return memoized;
  }

  var memoizeOne_cjs = memoizeOne$1;

  var rafSchd$1 = function rafSchd(fn) {
    var lastArgs = [];
    var frameId = null;

    var wrapperFn = function wrapperFn() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      lastArgs = args;

      if (frameId) {
        return;
      }

      frameId = requestAnimationFrame(function () {
        frameId = null;
        fn.apply(void 0, lastArgs);
      });
    };

    wrapperFn.cancel = function () {
      if (!frameId) {
        return;
      }

      cancelAnimationFrame(frameId);
      frameId = null;
    };

    return wrapperFn;
  };

  var rafSchd_cjs = rafSchd$1;

  var _extends$r = {exports: {}};

  (function (module) {
  	function _extends() {
  	  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
  	    for (var i = 1; i < arguments.length; i++) {
  	      var source = arguments[i];
  	      for (var key in source) {
  	        if (Object.prototype.hasOwnProperty.call(source, key)) {
  	          target[key] = source[key];
  	        }
  	      }
  	    }
  	    return target;
  	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  	  return _extends.apply(this, arguments);
  	}
  	module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
  } (_extends$r));

  var _extendsExports = _extends$r.exports;

  Object.defineProperty(dnd_cjs, '__esModule', { value: true });

  var React = React__default$1.default;
  var ReactDOM = require$$1__default.default;
  var redux = require$$0__default.default;
  var reactRedux = require$$3__default.default;
  var useMemoOne = useMemoOne_cjs;
  var cssBoxModel = cssBoxModel_cjs;
  var memoizeOne = memoizeOne_cjs;
  var rafSchd = rafSchd_cjs;
  var _extends$q = _extendsExports;

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
  var memoizeOne__default = /*#__PURE__*/_interopDefaultLegacy(memoizeOne);
  var rafSchd__default = /*#__PURE__*/_interopDefaultLegacy(rafSchd);
  var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends$q);

  const spacesAndTabs = /[ \t]{2,}/g;
  const lineStartWithSpaces = /^[ \t]*/gm;

  const clean$2 = value => value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
  const getDevMessage = message => clean$2(`
  %c@hello-pangea/dnd

  %c${clean$2(message)}

  %c👷‍ This is a development only message. It will be removed in production builds.
`);
  const getFormattedMessage = message => [getDevMessage(message),
  'color: #00C584; font-size: 1.2em; font-weight: bold;',
  'line-height: 1.5',
  'color: #723874;'];
  const isDisabledFlag = '__@hello-pangea/dnd-disable-dev-warnings';
  function log(type, message) {

    if (typeof window !== 'undefined' && window[isDisabledFlag]) {
      return;
    }

    console[type](...getFormattedMessage(message));
  }
  const warning = log.bind(null, 'warn');
  const error = log.bind(null, 'error');

  function noop$2() {}

  function getOptions(shared, fromBinding) {
    return {
      ...shared,
      ...fromBinding
    };
  }
  function bindEvents(el, bindings, sharedOptions) {
    const unbindings = bindings.map(binding => {
      const options = getOptions(sharedOptions, binding.options);
      el.addEventListener(binding.eventName, binding.fn, options);
      return function unbind() {
        el.removeEventListener(binding.eventName, binding.fn, options);
      };
    });

    return function unbindAll() {
      unbindings.forEach(unbind => {
        unbind();
      });
    };
  }
  const prefix$1 = 'Invariant failed';
  class RbdInvariant extends Error {}
  RbdInvariant.prototype.toString = function toString() {
    return this.message;
  };

  function invariant(condition, message) {
    if (condition) {
      return;
    }
    {
      throw new RbdInvariant(`${prefix$1}: ${message || ''}`);
    }
  }

  class ErrorBoundary extends React__default["default"].Component {
    constructor() {
      super(...arguments);
      this.callbacks = null;
      this.unbind = noop$2;
      this.onWindowError = event => {
        const callbacks = this.getCallbacks();
        if (callbacks.isDragging()) {
          callbacks.tryAbort();
          warning(`
        An error was caught by our window 'error' event listener while a drag was occurring.
        The active drag has been aborted.
      `) ;
        }
        const err = event.error;
        if (err instanceof RbdInvariant) {
          event.preventDefault();
          {
            error(err.message);
          }
        }
      };
      this.getCallbacks = () => {
        if (!this.callbacks) {
          throw new Error('Unable to find AppCallbacks in <ErrorBoundary/>');
        }
        return this.callbacks;
      };
      this.setCallbacks = callbacks => {
        this.callbacks = callbacks;
      };
    }
    componentDidMount() {
      this.unbind = bindEvents(window, [{
        eventName: 'error',
        fn: this.onWindowError
      }]);
    }
    componentDidCatch(err) {
      if (err instanceof RbdInvariant) {
        {
          error(err.message);
        }
        this.setState({});
        return;
      }

      throw err;
    }
    componentWillUnmount() {
      this.unbind();
    }
    render() {
      return this.props.children(this.setCallbacks);
    }
  }

  const dragHandleUsageInstructions = `
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
`;
  const position = index => index + 1;

  const onDragStart = start => `
  You have lifted an item in position ${position(start.source.index)}
`;
  const withLocation = (source, destination) => {
    const isInHomeList = source.droppableId === destination.droppableId;
    const startPosition = position(source.index);
    const endPosition = position(destination.index);
    if (isInHomeList) {
      return `
      You have moved the item from position ${startPosition}
      to position ${endPosition}
    `;
    }
    return `
    You have moved the item from position ${startPosition}
    in list ${source.droppableId}
    to list ${destination.droppableId}
    in position ${endPosition}
  `;
  };
  const withCombine = (id, source, combine) => {
    const inHomeList = source.droppableId === combine.droppableId;
    if (inHomeList) {
      return `
      The item ${id}
      has been combined with ${combine.draggableId}`;
    }
    return `
      The item ${id}
      in list ${source.droppableId}
      has been combined with ${combine.draggableId}
      in list ${combine.droppableId}
    `;
  };
  const onDragUpdate = update => {
    const location = update.destination;
    if (location) {
      return withLocation(update.source, location);
    }
    const combine = update.combine;
    if (combine) {
      return withCombine(update.draggableId, update.source, combine);
    }
    return 'You are over an area that cannot be dropped on';
  };
  const returnedToStart = source => `
  The item has returned to its starting position
  of ${position(source.index)}
`;
  const onDragEnd = result => {
    if (result.reason === 'CANCEL') {
      return `
      Movement cancelled.
      ${returnedToStart(result.source)}
    `;
    }
    const location = result.destination;
    const combine = result.combine;
    if (location) {
      return `
      You have dropped the item.
      ${withLocation(result.source, location)}
    `;
    }
    if (combine) {
      return `
      You have dropped the item.
      ${withCombine(result.draggableId, result.source, combine)}
    `;
    }
    return `
    The item has been dropped while not over a drop area.
    ${returnedToStart(result.source)}
  `;
  };
  const preset = {
    dragHandleUsageInstructions,
    onDragStart,
    onDragUpdate,
    onDragEnd
  };
  var preset$1 = preset;

  const origin = {
    x: 0,
    y: 0
  };
  const add = (point1, point2) => ({
    x: point1.x + point2.x,
    y: point1.y + point2.y
  });
  const subtract = (point1, point2) => ({
    x: point1.x - point2.x,
    y: point1.y - point2.y
  });
  const isEqual$1 = (point1, point2) => point1.x === point2.x && point1.y === point2.y;
  const negate = point => ({
    x: point.x !== 0 ? -point.x : 0,
    y: point.y !== 0 ? -point.y : 0
  });

  const patch = function (line, value, otherValue) {
    if (otherValue === void 0) {
      otherValue = 0;
    }
    if (line === 'x') {
      return {
        x: value,
        y: otherValue
      };
    }
    return {
      x: otherValue,
      y: value
    };
  };

  const distance = (point1, point2) => Math.sqrt((point2.x - point1.x) ** 2 + (point2.y - point1.y) ** 2);

  const closest$1 = (target, points) => Math.min(...points.map(point => distance(target, point)));

  const apply = fn => point => ({
    x: fn(point.x),
    y: fn(point.y)
  });

  var executeClip = ((frame, subject) => {
    const result = cssBoxModel.getRect({
      top: Math.max(subject.top, frame.top),
      right: Math.min(subject.right, frame.right),
      bottom: Math.min(subject.bottom, frame.bottom),
      left: Math.max(subject.left, frame.left)
    });
    if (result.width <= 0 || result.height <= 0) {
      return null;
    }
    return result;
  });

  const offsetByPosition = (spacing, point) => ({
    top: spacing.top + point.y,
    left: spacing.left + point.x,
    bottom: spacing.bottom + point.y,
    right: spacing.right + point.x
  });
  const getCorners = spacing => [{
    x: spacing.left,
    y: spacing.top
  }, {
    x: spacing.right,
    y: spacing.top
  }, {
    x: spacing.left,
    y: spacing.bottom
  }, {
    x: spacing.right,
    y: spacing.bottom
  }];
  const noSpacing = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };

  const scroll$1 = (target, frame) => {
    if (!frame) {
      return target;
    }
    return offsetByPosition(target, frame.scroll.diff.displacement);
  };
  const increase = (target, axis, withPlaceholder) => {
    if (withPlaceholder && withPlaceholder.increasedBy) {
      return {
        ...target,
        [axis.end]: target[axis.end] + withPlaceholder.increasedBy[axis.line]
      };
    }
    return target;
  };
  const clip = (target, frame) => {
    if (frame && frame.shouldClipSubject) {
      return executeClip(frame.pageMarginBox, target);
    }
    return cssBoxModel.getRect(target);
  };
  var getSubject = (_ref => {
    let {
      page,
      withPlaceholder,
      axis,
      frame
    } = _ref;
    const scrolled = scroll$1(page.marginBox, frame);
    const increased = increase(scrolled, axis, withPlaceholder);
    const clipped = clip(increased, frame);
    return {
      page,
      withPlaceholder,
      active: clipped
    };
  });

  var scrollDroppable = ((droppable, newScroll) => {
    !droppable.frame ? invariant(false)  : void 0;
    const scrollable = droppable.frame;
    const scrollDiff = subtract(newScroll, scrollable.scroll.initial);
    const scrollDisplacement = negate(scrollDiff);

    const frame = {
      ...scrollable,
      scroll: {
        initial: scrollable.scroll.initial,
        current: newScroll,
        diff: {
          value: scrollDiff,
          displacement: scrollDisplacement
        },
        max: scrollable.scroll.max
      }
    };
    const subject = getSubject({
      page: droppable.subject.page,
      withPlaceholder: droppable.subject.withPlaceholder,
      axis: droppable.axis,
      frame
    });
    const result = {
      ...droppable,
      frame,
      subject
    };
    return result;
  });

  const toDroppableMap = memoizeOne__default["default"](droppables => droppables.reduce((previous, current) => {
    previous[current.descriptor.id] = current;
    return previous;
  }, {}));
  const toDraggableMap = memoizeOne__default["default"](draggables => draggables.reduce((previous, current) => {
    previous[current.descriptor.id] = current;
    return previous;
  }, {}));
  const toDroppableList = memoizeOne__default["default"](droppables => Object.values(droppables));
  const toDraggableList = memoizeOne__default["default"](draggables => Object.values(draggables));

  var getDraggablesInsideDroppable = memoizeOne__default["default"]((droppableId, draggables) => {
    const result = toDraggableList(draggables).filter(draggable => droppableId === draggable.descriptor.droppableId)
    .sort((a, b) => a.descriptor.index - b.descriptor.index);
    return result;
  });

  function tryGetDestination(impact) {
    if (impact.at && impact.at.type === 'REORDER') {
      return impact.at.destination;
    }
    return null;
  }
  function tryGetCombine(impact) {
    if (impact.at && impact.at.type === 'COMBINE') {
      return impact.at.combine;
    }
    return null;
  }

  var removeDraggableFromList = memoizeOne__default["default"]((remove, list) => list.filter(item => item.descriptor.id !== remove.descriptor.id));

  var moveToNextCombine = (_ref => {
    let {
      isMovingForward,
      draggable,
      destination,
      insideDestination,
      previousImpact
    } = _ref;
    if (!destination.isCombineEnabled) {
      return null;
    }
    const location = tryGetDestination(previousImpact);
    if (!location) {
      return null;
    }
    function getImpact(target) {
      const at = {
        type: 'COMBINE',
        combine: {
          draggableId: target,
          droppableId: destination.descriptor.id
        }
      };
      return {
        ...previousImpact,
        at
      };
    }
    const all = previousImpact.displaced.all;
    const closestId = all.length ? all[0] : null;
    if (isMovingForward) {
      return closestId ? getImpact(closestId) : null;
    }
    const withoutDraggable = removeDraggableFromList(draggable, insideDestination);

    if (!closestId) {
      if (!withoutDraggable.length) {
        return null;
      }
      const last = withoutDraggable[withoutDraggable.length - 1];
      return getImpact(last.descriptor.id);
    }

    const indexOfClosest = withoutDraggable.findIndex(d => d.descriptor.id === closestId);
    !(indexOfClosest !== -1) ? invariant(false, 'Could not find displaced item in set')  : void 0;
    const proposedIndex = indexOfClosest - 1;

    if (proposedIndex < 0) {
      return null;
    }
    const before = withoutDraggable[proposedIndex];
    return getImpact(before.descriptor.id);
  });

  var isHomeOf = ((draggable, destination) => draggable.descriptor.droppableId === destination.descriptor.id);

  const noDisplacedBy = {
    point: origin,
    value: 0
  };
  const emptyGroups = {
    invisible: {},
    visible: {},
    all: []
  };
  const noImpact = {
    displaced: emptyGroups,
    displacedBy: noDisplacedBy,
    at: null
  };
  var noImpact$1 = noImpact;

  var isWithin = ((lowerBound, upperBound) => value => lowerBound <= value && value <= upperBound);

  var isPartiallyVisibleThroughFrame = (frame => {
    const isWithinVertical = isWithin(frame.top, frame.bottom);
    const isWithinHorizontal = isWithin(frame.left, frame.right);
    return subject => {

      const isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      if (isContained) {
        return true;
      }
      const isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
      const isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);

      const isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
      if (isPartiallyContained) {
        return true;
      }
      const isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
      const isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;

      const isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
      if (isTargetBiggerThanFrame) {
        return true;
      }

      const isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
      return isTargetBiggerOnOneAxis;
    };
  });

  var isTotallyVisibleThroughFrame = (frame => {
    const isWithinVertical = isWithin(frame.top, frame.bottom);
    const isWithinHorizontal = isWithin(frame.left, frame.right);
    return subject => {
      const isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      return isContained;
    };
  });

  const vertical = {
    direction: 'vertical',
    line: 'y',
    crossAxisLine: 'x',
    start: 'top',
    end: 'bottom',
    size: 'height',
    crossAxisStart: 'left',
    crossAxisEnd: 'right',
    crossAxisSize: 'width'
  };
  const horizontal = {
    direction: 'horizontal',
    line: 'x',
    crossAxisLine: 'y',
    start: 'left',
    end: 'right',
    size: 'width',
    crossAxisStart: 'top',
    crossAxisEnd: 'bottom',
    crossAxisSize: 'height'
  };

  var isTotallyVisibleThroughFrameOnAxis = (axis => frame => {
    const isWithinVertical = isWithin(frame.top, frame.bottom);
    const isWithinHorizontal = isWithin(frame.left, frame.right);
    return subject => {
      if (axis === vertical) {
        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
      }
      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    };
  });

  const getDroppableDisplaced = (target, destination) => {
    const displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
    return offsetByPosition(target, displacement);
  };
  const isVisibleInDroppable = (target, destination, isVisibleThroughFrameFn) => {
    if (!destination.subject.active) {
      return false;
    }

    return isVisibleThroughFrameFn(destination.subject.active)(target);
  };
  const isVisibleInViewport = (target, viewport, isVisibleThroughFrameFn) => isVisibleThroughFrameFn(viewport)(target);
  const isVisible$1 = _ref => {
    let {
      target: toBeDisplaced,
      destination,
      viewport,
      withDroppableDisplacement,
      isVisibleThroughFrameFn
    } = _ref;
    const displacedTarget = withDroppableDisplacement ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
    return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);
  };
  const isPartiallyVisible = args => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
  });
  const isTotallyVisible = args => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
  });
  const isTotallyVisibleOnAxis = args => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
  });

  const getShouldAnimate = (id, last, forceShouldAnimate) => {
    if (typeof forceShouldAnimate === 'boolean') {
      return forceShouldAnimate;
    }

    if (!last) {
      return true;
    }
    const {
      invisible,
      visible
    } = last;

    if (invisible[id]) {
      return false;
    }
    const previous = visible[id];
    return previous ? previous.shouldAnimate : true;
  };

  function getTarget(draggable, displacedBy) {
    const marginBox = draggable.page.marginBox;

    const expandBy = {
      top: displacedBy.point.y,
      right: 0,
      bottom: 0,
      left: displacedBy.point.x
    };
    return cssBoxModel.getRect(cssBoxModel.expand(marginBox, expandBy));
  }
  function getDisplacementGroups(_ref) {
    let {
      afterDragging,
      destination,
      displacedBy,
      viewport,
      forceShouldAnimate,
      last
    } = _ref;
    return afterDragging.reduce(function process(groups, draggable) {
      const target = getTarget(draggable, displacedBy);
      const id = draggable.descriptor.id;
      groups.all.push(id);
      const isVisible = isPartiallyVisible({
        target,
        destination,
        viewport,
        withDroppableDisplacement: true
      });
      if (!isVisible) {
        groups.invisible[draggable.descriptor.id] = true;
        return groups;
      }

      const shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
      const displacement = {
        draggableId: id,
        shouldAnimate
      };
      groups.visible[id] = displacement;
      return groups;
    }, {
      all: [],
      visible: {},
      invisible: {}
    });
  }

  function getIndexOfLastItem(draggables, options) {
    if (!draggables.length) {
      return 0;
    }
    const indexOfLastItem = draggables[draggables.length - 1].descriptor.index;

    return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
  }
  function goAtEnd(_ref) {
    let {
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    } = _ref;
    const newIndex = getIndexOfLastItem(insideDestination, {
      inHomeList
    });
    return {
      displaced: emptyGroups,
      displacedBy,
      at: {
        type: 'REORDER',
        destination: {
          droppableId: destination.descriptor.id,
          index: newIndex
        }
      }
    };
  }
  function calculateReorderImpact(_ref2) {
    let {
      draggable,
      insideDestination,
      destination,
      viewport,
      displacedBy,
      last,
      index,
      forceShouldAnimate
    } = _ref2;
    const inHomeList = isHomeOf(draggable, destination);

    if (index == null) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }

    const match = insideDestination.find(item => item.descriptor.index === index);
    if (!match) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }
    const withoutDragging = removeDraggableFromList(draggable, insideDestination);
    const sliceFrom = insideDestination.indexOf(match);
    const impacted = withoutDragging.slice(sliceFrom);
    const displaced = getDisplacementGroups({
      afterDragging: impacted,
      destination,
      displacedBy,
      last,
      viewport: viewport.frame,
      forceShouldAnimate
    });
    return {
      displaced,
      displacedBy,
      at: {
        type: 'REORDER',
        destination: {
          droppableId: destination.descriptor.id,
          index
        }
      }
    };
  }

  function didStartAfterCritical(draggableId, afterCritical) {
    return Boolean(afterCritical.effected[draggableId]);
  }

  var fromCombine = (_ref => {
    let {
      isMovingForward,
      destination,
      draggables,
      combine,
      afterCritical
    } = _ref;
    if (!destination.isCombineEnabled) {
      return null;
    }
    const combineId = combine.draggableId;
    const combineWith = draggables[combineId];
    const combineWithIndex = combineWith.descriptor.index;
    const didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
    if (didCombineWithStartAfterCritical) {
      if (isMovingForward) {
        return combineWithIndex;
      }
      return combineWithIndex - 1;
    }
    if (isMovingForward) {
      return combineWithIndex + 1;
    }
    return combineWithIndex;
  });

  var fromReorder = (_ref => {
    let {
      isMovingForward,
      isInHomeList,
      insideDestination,
      location
    } = _ref;
    if (!insideDestination.length) {
      return null;
    }
    const currentIndex = location.index;
    const proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;

    const firstIndex = insideDestination[0].descriptor.index;
    const lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;

    const upperBound = isInHomeList ? lastIndex : lastIndex + 1;
    if (proposedIndex < firstIndex) {
      return null;
    }
    if (proposedIndex > upperBound) {
      return null;
    }
    return proposedIndex;
  });

  var moveToNextIndex = (_ref => {
    let {
      isMovingForward,
      isInHomeList,
      draggable,
      draggables,
      destination,
      insideDestination,
      previousImpact,
      viewport,
      afterCritical
    } = _ref;
    const wasAt = previousImpact.at;
    !wasAt ? invariant(false, 'Cannot move in direction without previous impact location')  : void 0;
    if (wasAt.type === 'REORDER') {
      const newIndex = fromReorder({
        isMovingForward,
        isInHomeList,
        location: wasAt.destination,
        insideDestination
      });
      if (newIndex == null) {
        return null;
      }
      return calculateReorderImpact({
        draggable,
        insideDestination,
        destination,
        viewport,
        last: previousImpact.displaced,
        displacedBy: previousImpact.displacedBy,
        index: newIndex
      });
    }

    const newIndex = fromCombine({
      isMovingForward,
      destination,
      displaced: previousImpact.displaced,
      draggables,
      combine: wasAt.combine,
      afterCritical
    });
    if (newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable,
      insideDestination,
      destination,
      viewport,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: newIndex
    });
  });

  var getCombinedItemDisplacement = (_ref => {
    let {
      displaced,
      afterCritical,
      combineWith,
      displacedBy
    } = _ref;
    const isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
    if (didStartAfterCritical(combineWith, afterCritical)) {
      return isDisplaced ? origin : negate(displacedBy.point);
    }
    return isDisplaced ? displacedBy.point : origin;
  });

  var whenCombining = (_ref => {
    let {
      afterCritical,
      impact,
      draggables
    } = _ref;
    const combine = tryGetCombine(impact);
    !combine ? invariant(false)  : void 0;
    const combineWith = combine.draggableId;
    const center = draggables[combineWith].page.borderBox.center;
    const displaceBy = getCombinedItemDisplacement({
      displaced: impact.displaced,
      afterCritical,
      combineWith,
      displacedBy: impact.displacedBy
    });
    return add(center, displaceBy);
  });

  const distanceFromStartToBorderBoxCenter = (axis, box) => box.margin[axis.start] + box.borderBox[axis.size] / 2;
  const distanceFromEndToBorderBoxCenter = (axis, box) => box.margin[axis.end] + box.borderBox[axis.size] / 2;

  const getCrossAxisBorderBoxCenter = (axis, target, isMoving) => target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
  const goAfter = _ref => {
    let {
      axis,
      moveRelativeTo,
      isMoving
    } = _ref;
    return patch(axis.line,
    moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  };
  const goBefore = _ref2 => {
    let {
      axis,
      moveRelativeTo,
      isMoving
    } = _ref2;
    return patch(axis.line,
    moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  };
  const goIntoStart = _ref3 => {
    let {
      axis,
      moveInto,
      isMoving
    } = _ref3;
    return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
  };

  var whenReordering = (_ref => {
    let {
      impact,
      draggable,
      draggables,
      droppable,
      afterCritical
    } = _ref;
    const insideDestination = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
    const draggablePage = draggable.page;
    const axis = droppable.axis;

    if (!insideDestination.length) {
      return goIntoStart({
        axis,
        moveInto: droppable.page,
        isMoving: draggablePage
      });
    }
    const {
      displaced,
      displacedBy
    } = impact;
    const closestAfter = displaced.all[0];

    if (closestAfter) {
      const closest = draggables[closestAfter];

      if (didStartAfterCritical(closestAfter, afterCritical)) {
        return goBefore({
          axis,
          moveRelativeTo: closest.page,
          isMoving: draggablePage
        });
      }

      const withDisplacement = cssBoxModel.offset(closest.page, displacedBy.point);
      return goBefore({
        axis,
        moveRelativeTo: withDisplacement,
        isMoving: draggablePage
      });
    }

    const last = insideDestination[insideDestination.length - 1];

    if (last.descriptor.id === draggable.descriptor.id) {
      return draggablePage.borderBox.center;
    }
    if (didStartAfterCritical(last.descriptor.id, afterCritical)) {

      const page = cssBoxModel.offset(last.page, negate(afterCritical.displacedBy.point));
      return goAfter({
        axis,
        moveRelativeTo: page,
        isMoving: draggablePage
      });
    }

    return goAfter({
      axis,
      moveRelativeTo: last.page,
      isMoving: draggablePage
    });
  });

  var withDroppableDisplacement = ((droppable, point) => {
    const frame = droppable.frame;
    if (!frame) {
      return point;
    }
    return add(point, frame.scroll.diff.displacement);
  });

  const getResultWithoutDroppableDisplacement = _ref => {
    let {
      impact,
      draggable,
      droppable,
      draggables,
      afterCritical
    } = _ref;
    const original = draggable.page.borderBox.center;
    const at = impact.at;
    if (!droppable) {
      return original;
    }
    if (!at) {
      return original;
    }
    if (at.type === 'REORDER') {
      return whenReordering({
        impact,
        draggable,
        draggables,
        droppable,
        afterCritical
      });
    }
    return whenCombining({
      impact,
      draggables,
      afterCritical
    });
  };
  var getPageBorderBoxCenterFromImpact = (args => {
    const withoutDisplacement = getResultWithoutDroppableDisplacement(args);
    const droppable = args.droppable;
    const withDisplacement = droppable ? withDroppableDisplacement(droppable, withoutDisplacement) : withoutDisplacement;
    return withDisplacement;
  });

  var scrollViewport = ((viewport, newScroll) => {
    const diff = subtract(newScroll, viewport.scroll.initial);
    const displacement = negate(diff);

    const frame = cssBoxModel.getRect({
      top: newScroll.y,
      bottom: newScroll.y + viewport.frame.height,
      left: newScroll.x,
      right: newScroll.x + viewport.frame.width
    });
    const updated = {
      frame,
      scroll: {
        initial: viewport.scroll.initial,
        max: viewport.scroll.max,
        current: newScroll,
        diff: {
          value: diff,
          displacement
        }
      }
    };
    return updated;
  });

  function getDraggables$1(ids, draggables) {
    return ids.map(id => draggables[id]);
  }
  function tryGetVisible(id, groups) {
    for (let i = 0; i < groups.length; i++) {
      const displacement = groups[i].visible[id];
      if (displacement) {
        return displacement;
      }
    }
    return null;
  }
  var speculativelyIncrease = (_ref => {
    let {
      impact,
      viewport,
      destination,
      draggables,
      maxScrollChange
    } = _ref;
    const scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));
    const scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
    const last = impact.displaced;
    const withViewportScroll = getDisplacementGroups({
      afterDragging: getDraggables$1(last.all, draggables),
      destination,
      displacedBy: impact.displacedBy,
      viewport: scrolledViewport.frame,
      last,
      forceShouldAnimate: false
    });
    const withDroppableScroll = getDisplacementGroups({
      afterDragging: getDraggables$1(last.all, draggables),
      destination: scrolledDroppable,
      displacedBy: impact.displacedBy,
      viewport: viewport.frame,
      last,
      forceShouldAnimate: false
    });
    const invisible = {};
    const visible = {};
    const groups = [
    last, withViewportScroll, withDroppableScroll];
    last.all.forEach(id => {
      const displacement = tryGetVisible(id, groups);
      if (displacement) {
        visible[id] = displacement;
        return;
      }
      invisible[id] = true;
    });
    const newImpact = {
      ...impact,
      displaced: {
        all: last.all,
        invisible,
        visible
      }
    };
    return newImpact;
  });

  var withViewportDisplacement = ((viewport, point) => add(viewport.scroll.diff.displacement, point));

  var getClientFromPageBorderBoxCenter = (_ref => {
    let {
      pageBorderBoxCenter,
      draggable,
      viewport
    } = _ref;
    const withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);
    const offset = subtract(withoutPageScrollChange, draggable.page.borderBox.center);
    return add(draggable.client.borderBox.center, offset);
  });

  var isTotallyVisibleInNewLocation = (_ref => {
    let {
      draggable,
      destination,
      newPageBorderBoxCenter,
      viewport,
      withDroppableDisplacement,
      onlyOnMainAxis = false
    } = _ref;
    const changeNeeded = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);
    const shifted = offsetByPosition(draggable.page.borderBox, changeNeeded);

    const args = {
      target: shifted,
      destination,
      withDroppableDisplacement,
      viewport
    };
    return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
  });

  var moveToNextPlace = (_ref => {
    let {
      isMovingForward,
      draggable,
      destination,
      draggables,
      previousImpact,
      viewport,
      previousPageBorderBoxCenter,
      previousClientSelection,
      afterCritical
    } = _ref;
    if (!destination.isEnabled) {
      return null;
    }
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    const isInHomeList = isHomeOf(draggable, destination);
    const impact = moveToNextCombine({
      isMovingForward,
      draggable,
      destination,
      insideDestination,
      previousImpact
    }) || moveToNextIndex({
      isMovingForward,
      isInHomeList,
      draggable,
      draggables,
      destination,
      insideDestination,
      previousImpact,
      viewport,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable,
      droppable: destination,
      draggables,
      afterCritical
    });
    const isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable,
      destination,
      newPageBorderBoxCenter: pageBorderBoxCenter,
      viewport: viewport.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    if (isVisibleInNewLocation) {
      const clientSelection = getClientFromPageBorderBoxCenter({
        pageBorderBoxCenter,
        draggable,
        viewport
      });
      return {
        clientSelection,
        impact,
        scrollJumpRequest: null
      };
    }
    const distance = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
    const cautious = speculativelyIncrease({
      impact,
      viewport,
      destination,
      draggables,
      maxScrollChange: distance
    });
    return {
      clientSelection: previousClientSelection,
      impact: cautious,
      scrollJumpRequest: distance
    };
  });

  const getKnownActive = droppable => {
    const rect = droppable.subject.active;
    !rect ? invariant(false, 'Cannot get clipped area from droppable')  : void 0;
    return rect;
  };
  var getBestCrossAxisDroppable = (_ref => {
    let {
      isMovingForward,
      pageBorderBoxCenter,
      source,
      droppables,
      viewport
    } = _ref;
    const active = source.subject.active;
    if (!active) {
      return null;
    }
    const axis = source.axis;
    const isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
    const candidates = toDroppableList(droppables)
    .filter(droppable => droppable !== source)
    .filter(droppable => droppable.isEnabled)
    .filter(droppable => Boolean(droppable.subject.active))
    .filter(droppable => isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable))).filter(droppable => {
      const activeOfTarget = getKnownActive(droppable);

      if (isMovingForward) {
        return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
      }
      return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
    })
    .filter(droppable => {
      const activeOfTarget = getKnownActive(droppable);
      const isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
      return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
    })
    .sort((a, b) => {
      const first = getKnownActive(a)[axis.crossAxisStart];
      const second = getKnownActive(b)[axis.crossAxisStart];
      if (isMovingForward) {
        return first - second;
      }
      return second - first;
    })
    .filter((droppable, index, array) => getKnownActive(droppable)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart]);

    if (!candidates.length) {
      return null;
    }

    if (candidates.length === 1) {
      return candidates[0];
    }

    const contains = candidates.filter(droppable => {
      const isWithinDroppable = isWithin(getKnownActive(droppable)[axis.start], getKnownActive(droppable)[axis.end]);
      return isWithinDroppable(pageBorderBoxCenter[axis.line]);
    });
    if (contains.length === 1) {
      return contains[0];
    }

    if (contains.length > 1) {
      return contains.sort((a, b) => getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start])[0];
    }

    return candidates.sort((a, b) => {
      const first = closest$1(pageBorderBoxCenter, getCorners(getKnownActive(a)));
      const second = closest$1(pageBorderBoxCenter, getCorners(getKnownActive(b)));

      if (first !== second) {
        return first - second;
      }

      return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
    })[0];
  });

  const getCurrentPageBorderBoxCenter = (draggable, afterCritical) => {
    const original = draggable.page.borderBox.center;
    return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
  };
  const getCurrentPageBorderBox = (draggable, afterCritical) => {
    const original = draggable.page.borderBox;
    return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
  };

  var getClosestDraggable = (_ref => {
    let {
      pageBorderBoxCenter,
      viewport,
      destination,
      insideDestination,
      afterCritical
    } = _ref;
    const sorted = insideDestination.filter(draggable =>
    isTotallyVisible({
      target: getCurrentPageBorderBox(draggable, afterCritical),
      destination,
      viewport: viewport.frame,
      withDroppableDisplacement: true
    })).sort((a, b) => {
      const distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
      const distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b, afterCritical)));

      if (distanceToA < distanceToB) {
        return -1;
      }

      if (distanceToB < distanceToA) {
        return 1;
      }

      return a.descriptor.index - b.descriptor.index;
    });
    return sorted[0] || null;
  });

  var getDisplacedBy = memoizeOne__default["default"](function getDisplacedBy(axis, displaceBy) {
    const displacement = displaceBy[axis.line];
    return {
      value: displacement,
      point: patch(axis.line, displacement)
    };
  });

  const getRequiredGrowthForPlaceholder = (droppable, placeholderSize, draggables) => {
    const axis = droppable.axis;

    if (droppable.descriptor.mode === 'virtual') {
      return patch(axis.line, placeholderSize[axis.line]);
    }

    const availableSpace = droppable.subject.page.contentBox[axis.size];
    const insideDroppable = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);
    const spaceUsed = insideDroppable.reduce((sum, dimension) => sum + dimension.client.marginBox[axis.size], 0);
    const requiredSpace = spaceUsed + placeholderSize[axis.line];
    const needsToGrowBy = requiredSpace - availableSpace;

    if (needsToGrowBy <= 0) {
      return null;
    }
    return patch(axis.line, needsToGrowBy);
  };
  const withMaxScroll = (frame, max) => ({
    ...frame,
    scroll: {
      ...frame.scroll,
      max
    }
  });
  const addPlaceholder = (droppable, draggable, draggables) => {
    const frame = droppable.frame;
    !!isHomeOf(draggable, droppable) ? invariant(false, 'Should not add placeholder space to home list')  : void 0;
    !!droppable.subject.withPlaceholder ? invariant(false, 'Cannot add placeholder size to a subject when it already has one')  : void 0;
    const placeholderSize = getDisplacedBy(droppable.axis, draggable.displaceBy).point;
    const requiredGrowth = getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables);
    const added = {
      placeholderSize,
      increasedBy: requiredGrowth,
      oldFrameMaxScroll: droppable.frame ? droppable.frame.scroll.max : null
    };
    if (!frame) {
      const subject = getSubject({
        page: droppable.subject.page,
        withPlaceholder: added,
        axis: droppable.axis,
        frame: droppable.frame
      });
      return {
        ...droppable,
        subject
      };
    }
    const maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
    const newFrame = withMaxScroll(frame, maxScroll);
    const subject = getSubject({
      page: droppable.subject.page,
      withPlaceholder: added,
      axis: droppable.axis,
      frame: newFrame
    });
    return {
      ...droppable,
      subject,
      frame: newFrame
    };
  };
  const removePlaceholder = droppable => {
    const added = droppable.subject.withPlaceholder;
    !added ? invariant(false, 'Cannot remove placeholder form subject when there was none')  : void 0;
    const frame = droppable.frame;
    if (!frame) {
      const subject = getSubject({
        page: droppable.subject.page,
        axis: droppable.axis,
        frame: null,
        withPlaceholder: null
      });
      return {
        ...droppable,
        subject
      };
    }
    const oldMaxScroll = added.oldFrameMaxScroll;
    !oldMaxScroll ? invariant(false, 'Expected droppable with frame to have old max frame scroll when removing placeholder')  : void 0;
    const newFrame = withMaxScroll(frame, oldMaxScroll);
    const subject = getSubject({
      page: droppable.subject.page,
      axis: droppable.axis,
      frame: newFrame,
      withPlaceholder: null
    });
    return {
      ...droppable,
      subject,
      frame: newFrame
    };
  };

  var moveToNewDroppable = (_ref => {
    let {
      previousPageBorderBoxCenter,
      moveRelativeTo,
      insideDestination,
      draggable,
      draggables,
      destination,
      viewport,
      afterCritical
    } = _ref;
    if (!moveRelativeTo) {
      if (insideDestination.length) {
        return null;
      }

      const proposed = {
        displaced: emptyGroups,
        displacedBy: noDisplacedBy,
        at: {
          type: 'REORDER',
          destination: {
            droppableId: destination.descriptor.id,
            index: 0
          }
        }
      };
      const proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
        impact: proposed,
        draggable,
        droppable: destination,
        draggables,
        afterCritical
      });

      const withPlaceholder = isHomeOf(draggable, destination) ? destination : addPlaceholder(destination, draggable, draggables);
      const isVisibleInNewLocation = isTotallyVisibleInNewLocation({
        draggable,
        destination: withPlaceholder,
        newPageBorderBoxCenter: proposedPageBorderBoxCenter,
        viewport: viewport.frame,
        withDroppableDisplacement: false,
        onlyOnMainAxis: true
      });
      return isVisibleInNewLocation ? proposed : null;
    }
    const isGoingBeforeTarget = Boolean(
    previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
    const proposedIndex = (() => {
      const relativeTo = moveRelativeTo.descriptor.index;
      if (moveRelativeTo.descriptor.id === draggable.descriptor.id) {
        return relativeTo;
      }
      if (isGoingBeforeTarget) {
        return relativeTo;
      }
      return relativeTo + 1;
    })();
    const displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
    return calculateReorderImpact({
      draggable,
      insideDestination,
      destination,
      viewport,
      displacedBy,
      last: emptyGroups,
      index: proposedIndex
    });
  });

  var moveCrossAxis = (_ref => {
    let {
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable,
      isOver,
      draggables,
      droppables,
      viewport,
      afterCritical
    } = _ref;

    const destination = getBestCrossAxisDroppable({
      isMovingForward,
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      source: isOver,
      droppables,
      viewport
    });

    if (!destination) {
      return null;
    }
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    const moveRelativeTo = getClosestDraggable({
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      viewport,
      destination,
      insideDestination,
      afterCritical
    });
    const impact = moveToNewDroppable({
      previousPageBorderBoxCenter,
      destination,
      draggable,
      draggables,
      moveRelativeTo,
      insideDestination,
      viewport,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable,
      droppable: destination,
      draggables,
      afterCritical
    });
    const clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable,
      viewport
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  });

  var whatIsDraggedOver = (impact => {
    const at = impact.at;
    if (!at) {
      return null;
    }
    if (at.type === 'REORDER') {
      return at.destination.droppableId;
    }
    return at.combine.droppableId;
  });

  const getDroppableOver$1 = (impact, droppables) => {
    const id = whatIsDraggedOver(impact);
    return id ? droppables[id] : null;
  };
  var moveInDirection = (_ref => {
    let {
      state,
      type
    } = _ref;
    const isActuallyOver = getDroppableOver$1(state.impact, state.dimensions.droppables);
    const isMainAxisMovementAllowed = Boolean(isActuallyOver);
    const home = state.dimensions.droppables[state.critical.droppable.id];
    const isOver = isActuallyOver || home;
    const direction = isOver.axis.direction;
    const isMovingOnMainAxis = direction === 'vertical' && (type === 'MOVE_UP' || type === 'MOVE_DOWN') || direction === 'horizontal' && (type === 'MOVE_LEFT' || type === 'MOVE_RIGHT');

    if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
      return null;
    }
    const isMovingForward = type === 'MOVE_DOWN' || type === 'MOVE_RIGHT';
    const draggable = state.dimensions.draggables[state.critical.draggable.id];
    const previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
    const {
      draggables,
      droppables
    } = state.dimensions;
    return isMovingOnMainAxis ? moveToNextPlace({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable,
      destination: isOver,
      draggables,
      viewport: state.viewport,
      previousClientSelection: state.current.client.selection,
      previousImpact: state.impact,
      afterCritical: state.afterCritical
    }) : moveCrossAxis({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable,
      isOver,
      draggables,
      droppables,
      viewport: state.viewport,
      afterCritical: state.afterCritical
    });
  });

  function isMovementAllowed(state) {
    return state.phase === 'DRAGGING' || state.phase === 'COLLECTING';
  }

  function isPositionInFrame(frame) {
    const isWithinVertical = isWithin(frame.top, frame.bottom);
    const isWithinHorizontal = isWithin(frame.left, frame.right);
    return function run(point) {
      return isWithinVertical(point.y) && isWithinHorizontal(point.x);
    };
  }

  function getHasOverlap(first, second) {
    return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
  }
  function getFurthestAway(_ref) {
    let {
      pageBorderBox,
      draggable,
      candidates
    } = _ref;

    const startCenter = draggable.page.borderBox.center;
    const sorted = candidates.map(candidate => {
      const axis = candidate.axis;
      const target = patch(candidate.axis.line,
      pageBorderBox.center[axis.line],
      candidate.page.borderBox.center[axis.crossAxisLine]);
      return {
        id: candidate.descriptor.id,
        distance: distance(startCenter, target)
      };
    })
    .sort((a, b) => b.distance - a.distance);

    return sorted[0] ? sorted[0].id : null;
  }
  function getDroppableOver(_ref2) {
    let {
      pageBorderBox,
      draggable,
      droppables
    } = _ref2;
    const candidates = toDroppableList(droppables).filter(item => {
      if (!item.isEnabled) {
        return false;
      }

      const active = item.subject.active;
      if (!active) {
        return false;
      }

      if (!getHasOverlap(pageBorderBox, active)) {
        return false;
      }

      if (isPositionInFrame(active)(pageBorderBox.center)) {
        return true;
      }

      const axis = item.axis;
      const childCenter = active.center[axis.crossAxisLine];
      const crossAxisStart = pageBorderBox[axis.crossAxisStart];
      const crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
      const isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
      const isStartContained = isContained(crossAxisStart);
      const isEndContained = isContained(crossAxisEnd);

      if (!isStartContained && !isEndContained) {
        return true;
      }

      if (isStartContained) {
        return crossAxisStart < childCenter;
      }
      return crossAxisEnd > childCenter;
    });
    if (!candidates.length) {
      return null;
    }

    if (candidates.length === 1) {
      return candidates[0].descriptor.id;
    }

    return getFurthestAway({
      pageBorderBox,
      draggable,
      candidates
    });
  }

  const offsetRectByPosition = (rect, point) => cssBoxModel.getRect(offsetByPosition(rect, point));

  var withDroppableScroll = ((droppable, area) => {
    const frame = droppable.frame;
    if (!frame) {
      return area;
    }
    return offsetRectByPosition(area, frame.scroll.diff.value);
  });

  function getIsDisplaced(_ref) {
    let {
      displaced,
      id
    } = _ref;
    return Boolean(displaced.visible[id] || displaced.invisible[id]);
  }

  function atIndex(_ref) {
    let {
      draggable,
      closest,
      inHomeList
    } = _ref;
    if (!closest) {
      return null;
    }
    if (!inHomeList) {
      return closest.descriptor.index;
    }
    if (closest.descriptor.index > draggable.descriptor.index) {
      return closest.descriptor.index - 1;
    }
    return closest.descriptor.index;
  }
  var getReorderImpact = (_ref2 => {
    let {
      pageBorderBoxWithDroppableScroll: targetRect,
      draggable,
      destination,
      insideDestination,
      last,
      viewport,
      afterCritical
    } = _ref2;
    const axis = destination.axis;
    const displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
    const displacement = displacedBy.value;
    const targetStart = targetRect[axis.start];
    const targetEnd = targetRect[axis.end];
    const withoutDragging = removeDraggableFromList(draggable, insideDestination);
    const closest = withoutDragging.find(child => {
      const id = child.descriptor.id;
      const childCenter = child.page.borderBox.center[axis.line];
      const didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
      const isDisplaced = getIsDisplaced({
        displaced: last,
        id
      });

      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd <= childCenter;
        }

        return targetStart < childCenter - displacement;
      }

      if (isDisplaced) {
        return targetEnd <= childCenter + displacement;
      }

      return targetStart < childCenter;
    }) || null;
    const newIndex = atIndex({
      draggable,
      closest,
      inHomeList: isHomeOf(draggable, destination)
    });

    return calculateReorderImpact({
      draggable,
      insideDestination,
      destination,
      viewport,
      last,
      displacedBy,
      index: newIndex
    });
  });

  const combineThresholdDivisor = 4;
  var getCombineImpact = (_ref => {
    let {
      draggable,
      pageBorderBoxWithDroppableScroll: targetRect,
      previousImpact,
      destination,
      insideDestination,
      afterCritical
    } = _ref;
    if (!destination.isCombineEnabled) {
      return null;
    }
    const axis = destination.axis;
    const displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);
    const displacement = displacedBy.value;
    const targetStart = targetRect[axis.start];
    const targetEnd = targetRect[axis.end];
    const withoutDragging = removeDraggableFromList(draggable, insideDestination);
    const combineWith = withoutDragging.find(child => {
      const id = child.descriptor.id;
      const childRect = child.page.borderBox;
      const childSize = childRect[axis.size];
      const threshold = childSize / combineThresholdDivisor;
      const didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
      const isDisplaced = getIsDisplaced({
        displaced: previousImpact.displaced,
        id
      });

      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
        }

        return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
      }

      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
      }

      return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
    });
    if (!combineWith) {
      return null;
    }
    const impact = {
      displacedBy,
      displaced: previousImpact.displaced,
      at: {
        type: 'COMBINE',
        combine: {
          draggableId: combineWith.descriptor.id,
          droppableId: destination.descriptor.id
        }
      }
    };
    return impact;
  });

  var getDragImpact = (_ref => {
    let {
      pageOffset,
      draggable,
      draggables,
      droppables,
      previousImpact,
      viewport,
      afterCritical
    } = _ref;
    const pageBorderBox = offsetRectByPosition(draggable.page.borderBox, pageOffset);
    const destinationId = getDroppableOver({
      pageBorderBox,
      draggable,
      droppables
    });

    if (!destinationId) {
      return noImpact$1;
    }
    const destination = droppables[destinationId];
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);

    const pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);

    return getCombineImpact({
      pageBorderBoxWithDroppableScroll,
      draggable,
      previousImpact,
      destination,
      insideDestination,
      afterCritical
    }) || getReorderImpact({
      pageBorderBoxWithDroppableScroll,
      draggable,
      destination,
      insideDestination,
      last: previousImpact.displaced,
      viewport,
      afterCritical
    });
  });

  var patchDroppableMap = ((droppables, updated) => ({
    ...droppables,
    [updated.descriptor.id]: updated
  }));

  const clearUnusedPlaceholder = _ref => {
    let {
      previousImpact,
      impact,
      droppables
    } = _ref;
    const last = whatIsDraggedOver(previousImpact);
    const now = whatIsDraggedOver(impact);
    if (!last) {
      return droppables;
    }

    if (last === now) {
      return droppables;
    }
    const lastDroppable = droppables[last];

    if (!lastDroppable.subject.withPlaceholder) {
      return droppables;
    }
    const updated = removePlaceholder(lastDroppable);
    return patchDroppableMap(droppables, updated);
  };
  var recomputePlaceholders = (_ref2 => {
    let {
      draggable,
      draggables,
      droppables,
      previousImpact,
      impact
    } = _ref2;
    const cleaned = clearUnusedPlaceholder({
      previousImpact,
      impact,
      droppables
    });
    const isOver = whatIsDraggedOver(impact);
    if (!isOver) {
      return cleaned;
    }
    const droppable = droppables[isOver];

    if (isHomeOf(draggable, droppable)) {
      return cleaned;
    }

    if (droppable.subject.withPlaceholder) {
      return cleaned;
    }

    const patched = addPlaceholder(droppable, draggable, draggables);
    return patchDroppableMap(cleaned, patched);
  });

  var update = (_ref => {
    let {
      state,
      clientSelection: forcedClientSelection,
      dimensions: forcedDimensions,
      viewport: forcedViewport,
      impact: forcedImpact,
      scrollJumpRequest
    } = _ref;

    const viewport = forcedViewport || state.viewport;
    const dimensions = forcedDimensions || state.dimensions;
    const clientSelection = forcedClientSelection || state.current.client.selection;
    const offset = subtract(clientSelection, state.initial.client.selection);
    const client = {
      offset,
      selection: clientSelection,
      borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)
    };
    const page = {
      selection: add(client.selection, viewport.scroll.current),
      borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),
      offset: add(client.offset, viewport.scroll.diff.value)
    };
    const current = {
      client,
      page
    };

    if (state.phase === 'COLLECTING') {
      return {
        ...state,
        dimensions,
        viewport,
        current
      };
    }
    const draggable = dimensions.draggables[state.critical.draggable.id];
    const newImpact = forcedImpact || getDragImpact({
      pageOffset: page.offset,
      draggable,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact: state.impact,
      viewport,
      afterCritical: state.afterCritical
    });
    const withUpdatedPlaceholders = recomputePlaceholders({
      draggable,
      impact: newImpact,
      previousImpact: state.impact,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables
    });
    const result = {
      ...state,
      current,
      dimensions: {
        draggables: dimensions.draggables,
        droppables: withUpdatedPlaceholders
      },
      impact: newImpact,
      viewport,
      scrollJumpRequest: scrollJumpRequest || null,
      forceShouldAnimate: scrollJumpRequest ? false : null
    };
    return result;
  });

  function getDraggables(ids, draggables) {
    return ids.map(id => draggables[id]);
  }
  var recompute = (_ref => {
    let {
      impact,
      viewport,
      draggables,
      destination,
      forceShouldAnimate
    } = _ref;
    const last = impact.displaced;
    const afterDragging = getDraggables(last.all, draggables);
    const displaced = getDisplacementGroups({
      afterDragging,
      destination,
      displacedBy: impact.displacedBy,
      viewport: viewport.frame,
      forceShouldAnimate,
      last
    });
    return {
      ...impact,
      displaced
    };
  });

  var getClientBorderBoxCenter = (_ref => {
    let {
      impact,
      draggable,
      droppable,
      draggables,
      viewport,
      afterCritical
    } = _ref;
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable,
      draggables,
      droppable,
      afterCritical
    });
    return getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable,
      viewport
    });
  });

  var refreshSnap = (_ref => {
    let {
      state,
      dimensions: forcedDimensions,
      viewport: forcedViewport
    } = _ref;
    !(state.movementMode === 'SNAP') ? invariant(false)  : void 0;
    const needsVisibilityCheck = state.impact;
    const viewport = forcedViewport || state.viewport;
    const dimensions = forcedDimensions || state.dimensions;
    const {
      draggables,
      droppables
    } = dimensions;
    const draggable = draggables[state.critical.draggable.id];
    const isOver = whatIsDraggedOver(needsVisibilityCheck);
    !isOver ? invariant(false, 'Must be over a destination in SNAP movement mode')  : void 0;
    const destination = droppables[isOver];
    const impact = recompute({
      impact: needsVisibilityCheck,
      viewport,
      destination,
      draggables
    });
    const clientSelection = getClientBorderBoxCenter({
      impact,
      draggable,
      droppable: destination,
      draggables,
      viewport,
      afterCritical: state.afterCritical
    });
    return update({
      impact,
      clientSelection,
      state,
      dimensions,
      viewport
    });
  });

  var getHomeLocation = (descriptor => ({
    index: descriptor.index,
    droppableId: descriptor.droppableId
  }));

  var getLiftEffect = (_ref => {
    let {
      draggable,
      home,
      draggables,
      viewport
    } = _ref;
    const displacedBy = getDisplacedBy(home.axis, draggable.displaceBy);
    const insideHome = getDraggablesInsideDroppable(home.descriptor.id, draggables);

    const rawIndex = insideHome.indexOf(draggable);
    !(rawIndex !== -1) ? invariant(false, 'Expected draggable to be inside home list')  : void 0;
    const afterDragging = insideHome.slice(rawIndex + 1);
    const effected = afterDragging.reduce((previous, item) => {
      previous[item.descriptor.id] = true;
      return previous;
    }, {});
    const afterCritical = {
      inVirtualList: home.descriptor.mode === 'virtual',
      displacedBy,
      effected
    };
    const displaced = getDisplacementGroups({
      afterDragging,
      destination: home,
      displacedBy,
      last: null,
      viewport: viewport.frame,
      forceShouldAnimate: false
    });
    const impact = {
      displaced,
      displacedBy,
      at: {
        type: 'REORDER',
        destination: getHomeLocation(draggable.descriptor)
      }
    };
    return {
      impact,
      afterCritical
    };
  });

  var patchDimensionMap = ((dimensions, updated) => ({
    draggables: dimensions.draggables,
    droppables: patchDroppableMap(dimensions.droppables, updated)
  }));

  var offsetDraggable = (_ref => {
    let {
      draggable,
      offset,
      initialWindowScroll
    } = _ref;
    const client = cssBoxModel.offset(draggable.client, offset);
    const page = cssBoxModel.withScroll(client, initialWindowScroll);
    const moved = {
      ...draggable,
      placeholder: {
        ...draggable.placeholder,
        client
      },
      client,
      page
    };
    return moved;
  });

  var getFrame = (droppable => {
    const frame = droppable.frame;
    !frame ? invariant(false, 'Expected Droppable to have a frame')  : void 0;
    return frame;
  });

  var adjustAdditionsForScrollChanges = (_ref => {
    let {
      additions,
      updatedDroppables,
      viewport
    } = _ref;

    const windowScrollChange = viewport.scroll.diff.value;

    return additions.map(draggable => {
      const droppableId = draggable.descriptor.droppableId;
      const modified = updatedDroppables[droppableId];
      const frame = getFrame(modified);
      const droppableScrollChange = frame.scroll.diff.value;
      const totalChange = add(windowScrollChange, droppableScrollChange);
      const moved = offsetDraggable({
        draggable,
        offset: totalChange,
        initialWindowScroll: viewport.scroll.initial
      });
      return moved;
    });
  });
  var publishWhileDraggingInVirtual = (_ref => {
    let {
      state,
      published
    } = _ref;

    const withScrollChange = published.modified.map(update => {
      const existing = state.dimensions.droppables[update.droppableId];
      const scrolled = scrollDroppable(existing, update.scroll);
      return scrolled;
    });
    const droppables = {
      ...state.dimensions.droppables,
      ...toDroppableMap(withScrollChange)
    };
    const updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
      additions: published.additions,
      updatedDroppables: droppables,
      viewport: state.viewport
    }));
    const draggables = {
      ...state.dimensions.draggables,
      ...updatedAdditions
    };

    published.removals.forEach(id => {
      delete draggables[id];
    });
    const dimensions = {
      droppables,
      draggables
    };
    const wasOverId = whatIsDraggedOver(state.impact);
    const wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
    const draggable = dimensions.draggables[state.critical.draggable.id];
    const home = dimensions.droppables[state.critical.droppable.id];
    const {
      impact: onLiftImpact,
      afterCritical
    } = getLiftEffect({
      draggable,
      home,
      draggables,
      viewport: state.viewport
    });
    const previousImpact = wasOver && wasOver.isCombineEnabled ?
    state.impact : onLiftImpact;
    const impact = getDragImpact({
      pageOffset: state.current.page.offset,
      draggable: dimensions.draggables[state.critical.draggable.id],
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact,
      viewport: state.viewport,
      afterCritical
    });
    const draggingState = {
      ...state,
      phase: 'DRAGGING',
      impact,
      onLiftImpact,
      dimensions,
      afterCritical,
      forceShouldAnimate: false
    };
    if (state.phase === 'COLLECTING') {
      return draggingState;
    }

    const dropPending = {
      ...draggingState,
      phase: 'DROP_PENDING',
      reason: state.reason,
      isWaiting: false
    };
    return dropPending;
  });

  const isSnapping = state => state.movementMode === 'SNAP';
  const postDroppableChange = (state, updated, isEnabledChanging) => {
    const dimensions = patchDimensionMap(state.dimensions, updated);

    if (!isSnapping(state) || isEnabledChanging) {
      return update({
        state,
        dimensions
      });
    }
    return refreshSnap({
      state,
      dimensions
    });
  };
  function removeScrollJumpRequest(state) {
    if (state.isDragging && state.movementMode === 'SNAP') {
      return {
        ...state,
        scrollJumpRequest: null
      };
    }
    return state;
  }
  const idle$2 = {
    phase: 'IDLE',
    completed: null,
    shouldFlush: false
  };

  var reducer$1 = (function (state, action) {
    if (state === void 0) {
      state = idle$2;
    }
    if (action.type === 'FLUSH') {
      return {
        ...idle$2,
        shouldFlush: true
      };
    }
    if (action.type === 'INITIAL_PUBLISH') {
      !(state.phase === 'IDLE') ? invariant(false, 'INITIAL_PUBLISH must come after a IDLE phase')  : void 0;
      const {
        critical,
        clientSelection,
        viewport,
        dimensions,
        movementMode
      } = action.payload;
      const draggable = dimensions.draggables[critical.draggable.id];
      const home = dimensions.droppables[critical.droppable.id];
      const client = {
        selection: clientSelection,
        borderBoxCenter: draggable.client.borderBox.center,
        offset: origin
      };
      const initial = {
        client,
        page: {
          selection: add(client.selection, viewport.scroll.initial),
          borderBoxCenter: add(client.selection, viewport.scroll.initial),
          offset: add(client.selection, viewport.scroll.diff.value)
        }
      };

      const isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(item => !item.isFixedOnPage);
      const {
        impact,
        afterCritical
      } = getLiftEffect({
        draggable,
        home,
        draggables: dimensions.draggables,
        viewport
      });
      const result = {
        phase: 'DRAGGING',
        isDragging: true,
        critical,
        movementMode,
        dimensions,
        initial,
        current: initial,
        isWindowScrollAllowed,
        impact,
        afterCritical,
        onLiftImpact: impact,
        viewport,
        scrollJumpRequest: null,
        forceShouldAnimate: null
      };
      return result;
    }
    if (action.type === 'COLLECTION_STARTING') {
      if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
        return state;
      }
      !(state.phase === 'DRAGGING') ? invariant(false, `Collection cannot start from phase ${state.phase}`)  : void 0;
      const result = {
        ...state,
        phase: 'COLLECTING'
      };
      return result;
    }
    if (action.type === 'PUBLISH_WHILE_DRAGGING') {
      !(state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') ? invariant(false, `Unexpected ${action.type} received in phase ${state.phase}`)  : void 0;
      return publishWhileDraggingInVirtual({
        state,
        published: action.payload
      });
    }
    if (action.type === 'MOVE') {
      if (state.phase === 'DROP_PENDING') {
        return state;
      }
      !isMovementAllowed(state) ? invariant(false, `${action.type} not permitted in phase ${state.phase}`)  : void 0;
      const {
        client: clientSelection
      } = action.payload;

      if (isEqual$1(clientSelection, state.current.client.selection)) {
        return state;
      }
      return update({
        state,
        clientSelection,
        impact: isSnapping(state) ? state.impact : null
      });
    }
    if (action.type === 'UPDATE_DROPPABLE_SCROLL') {
      if (state.phase === 'DROP_PENDING') {
        return removeScrollJumpRequest(state);
      }

      if (state.phase === 'COLLECTING') {
        return removeScrollJumpRequest(state);
      }
      !isMovementAllowed(state) ? invariant(false, `${action.type} not permitted in phase ${state.phase}`)  : void 0;
      const {
        id,
        newScroll
      } = action.payload;
      const target = state.dimensions.droppables[id];

      if (!target) {
        return state;
      }
      const scrolled = scrollDroppable(target, newScroll);
      return postDroppableChange(state, scrolled, false);
    }
    if (action.type === 'UPDATE_DROPPABLE_IS_ENABLED') {
      if (state.phase === 'DROP_PENDING') {
        return state;
      }
      !isMovementAllowed(state) ? invariant(false, `Attempting to move in an unsupported phase ${state.phase}`)  : void 0;
      const {
        id,
        isEnabled
      } = action.payload;
      const target = state.dimensions.droppables[id];
      !target ? invariant(false, `Cannot find Droppable[id: ${id}] to toggle its enabled state`)  : void 0;
      !(target.isEnabled !== isEnabled) ? invariant(false, `Trying to set droppable isEnabled to ${String(isEnabled)}
      but it is already ${String(target.isEnabled)}`)  : void 0;
      const updated = {
        ...target,
        isEnabled
      };
      return postDroppableChange(state, updated, true);
    }
    if (action.type === 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED') {
      if (state.phase === 'DROP_PENDING') {
        return state;
      }
      !isMovementAllowed(state) ? invariant(false, `Attempting to move in an unsupported phase ${state.phase}`)  : void 0;
      const {
        id,
        isCombineEnabled
      } = action.payload;
      const target = state.dimensions.droppables[id];
      !target ? invariant(false, `Cannot find Droppable[id: ${id}] to toggle its isCombineEnabled state`)  : void 0;
      !(target.isCombineEnabled !== isCombineEnabled) ? invariant(false, `Trying to set droppable isCombineEnabled to ${String(isCombineEnabled)}
      but it is already ${String(target.isCombineEnabled)}`)  : void 0;
      const updated = {
        ...target,
        isCombineEnabled
      };
      return postDroppableChange(state, updated, true);
    }
    if (action.type === 'MOVE_BY_WINDOW_SCROLL') {
      if (state.phase === 'DROP_PENDING' || state.phase === 'DROP_ANIMATING') {
        return state;
      }
      !isMovementAllowed(state) ? invariant(false, `Cannot move by window in phase ${state.phase}`)  : void 0;
      !state.isWindowScrollAllowed ? invariant(false, 'Window scrolling is currently not supported for fixed lists')  : void 0;
      const newScroll = action.payload.newScroll;

      if (isEqual$1(state.viewport.scroll.current, newScroll)) {
        return removeScrollJumpRequest(state);
      }
      const viewport = scrollViewport(state.viewport, newScroll);
      if (isSnapping(state)) {
        return refreshSnap({
          state,
          viewport
        });
      }
      return update({
        state,
        viewport
      });
    }
    if (action.type === 'UPDATE_VIEWPORT_MAX_SCROLL') {
      if (!isMovementAllowed(state)) {
        return state;
      }
      const maxScroll = action.payload.maxScroll;
      if (isEqual$1(maxScroll, state.viewport.scroll.max)) {
        return state;
      }
      const withMaxScroll = {
        ...state.viewport,
        scroll: {
          ...state.viewport.scroll,
          max: maxScroll
        }
      };

      return {
        ...state,
        viewport: withMaxScroll
      };
    }
    if (action.type === 'MOVE_UP' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_RIGHT') {
      if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
        return state;
      }
      !(state.phase === 'DRAGGING') ? invariant(false, `${action.type} received while not in DRAGGING phase`)  : void 0;
      const result = moveInDirection({
        state,
        type: action.type
      });

      if (!result) {
        return state;
      }
      return update({
        state,
        impact: result.impact,
        clientSelection: result.clientSelection,
        scrollJumpRequest: result.scrollJumpRequest
      });
    }
    if (action.type === 'DROP_PENDING') {
      const reason = action.payload.reason;
      !(state.phase === 'COLLECTING') ? invariant(false, 'Can only move into the DROP_PENDING phase from the COLLECTING phase')  : void 0;
      const newState = {
        ...state,
        phase: 'DROP_PENDING',
        isWaiting: true,
        reason
      };
      return newState;
    }
    if (action.type === 'DROP_ANIMATE') {
      const {
        completed,
        dropDuration,
        newHomeClientOffset
      } = action.payload;
      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? invariant(false, `Cannot animate drop from phase ${state.phase}`)  : void 0;

      const result = {
        phase: 'DROP_ANIMATING',
        completed,
        dropDuration,
        newHomeClientOffset,
        dimensions: state.dimensions
      };
      return result;
    }

    if (action.type === 'DROP_COMPLETE') {
      const {
        completed
      } = action.payload;
      return {
        phase: 'IDLE',
        completed,
        shouldFlush: false
      };
    }
    return state;
  });

  const beforeInitialCapture = args => ({
    type: 'BEFORE_INITIAL_CAPTURE',
    payload: args
  });
  const lift$1 = args => ({
    type: 'LIFT',
    payload: args
  });
  const initialPublish = args => ({
    type: 'INITIAL_PUBLISH',
    payload: args
  });
  const publishWhileDragging = args => ({
    type: 'PUBLISH_WHILE_DRAGGING',
    payload: args
  });
  const collectionStarting = () => ({
    type: 'COLLECTION_STARTING',
    payload: null
  });
  const updateDroppableScroll = args => ({
    type: 'UPDATE_DROPPABLE_SCROLL',
    payload: args
  });
  const updateDroppableIsEnabled = args => ({
    type: 'UPDATE_DROPPABLE_IS_ENABLED',
    payload: args
  });
  const updateDroppableIsCombineEnabled = args => ({
    type: 'UPDATE_DROPPABLE_IS_COMBINE_ENABLED',
    payload: args
  });
  const move = args => ({
    type: 'MOVE',
    payload: args
  });
  const moveByWindowScroll = args => ({
    type: 'MOVE_BY_WINDOW_SCROLL',
    payload: args
  });
  const updateViewportMaxScroll = args => ({
    type: 'UPDATE_VIEWPORT_MAX_SCROLL',
    payload: args
  });
  const moveUp = () => ({
    type: 'MOVE_UP',
    payload: null
  });
  const moveDown = () => ({
    type: 'MOVE_DOWN',
    payload: null
  });
  const moveRight = () => ({
    type: 'MOVE_RIGHT',
    payload: null
  });
  const moveLeft = () => ({
    type: 'MOVE_LEFT',
    payload: null
  });
  const flush = () => ({
    type: 'FLUSH',
    payload: null
  });
  const animateDrop = args => ({
    type: 'DROP_ANIMATE',
    payload: args
  });
  const completeDrop = args => ({
    type: 'DROP_COMPLETE',
    payload: args
  });
  const drop$1 = args => ({
    type: 'DROP',
    payload: args
  });
  const dropPending = args => ({
    type: 'DROP_PENDING',
    payload: args
  });
  const dropAnimationFinished = () => ({
    type: 'DROP_ANIMATION_FINISHED',
    payload: null
  });

  function checkIndexes(insideDestination) {
    if (insideDestination.length <= 1) {
      return;
    }
    const indexes = insideDestination.map(d => d.descriptor.index);
    const errors = {};
    for (let i = 1; i < indexes.length; i++) {
      const current = indexes[i];
      const previous = indexes[i - 1];

      if (current !== previous + 1) {
        errors[current] = true;
      }
    }
    if (!Object.keys(errors).length) {
      return;
    }
    const formatted = indexes.map(index => {
      const hasError = Boolean(errors[index]);
      return hasError ? `[🔥${index}]` : `${index}`;
    }).join(', ');
    warning(`
    Detected non-consecutive <Draggable /> indexes.

    (This can cause unexpected bugs)

    ${formatted}
  `) ;
  }
  function validateDimensions(critical, dimensions) {
    {
      const insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
      checkIndexes(insideDestination);
    }
  }

  var lift = (marshal => _ref => {
    let {
      getState,
      dispatch
    } = _ref;
    return next => action => {
      if (action.type !== 'LIFT') {
        next(action);
        return;
      }
      const {
        id,
        clientSelection,
        movementMode
      } = action.payload;
      const initial = getState();

      if (initial.phase === 'DROP_ANIMATING') {
        dispatch(completeDrop({
          completed: initial.completed
        }));
      }
      !(getState().phase === 'IDLE') ? invariant(false, 'Unexpected phase to start a drag')  : void 0;

      dispatch(flush());

      dispatch(beforeInitialCapture({
        draggableId: id,
        movementMode
      }));

      const scrollOptions = {
        shouldPublishImmediately: movementMode === 'SNAP'
      };
      const request = {
        draggableId: id,
        scrollOptions
      };
      const {
        critical,
        dimensions,
        viewport
      } = marshal.startPublishing(request);
      validateDimensions(critical, dimensions);

      dispatch(initialPublish({
        critical,
        dimensions,
        clientSelection,
        movementMode,
        viewport
      }));
    };
  });

  var style = (marshal => () => next => action => {
    if (action.type === 'INITIAL_PUBLISH') {
      marshal.dragging();
    }
    if (action.type === 'DROP_ANIMATE') {
      marshal.dropping(action.payload.completed.result.reason);
    }

    if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE') {
      marshal.resting();
    }
    next(action);
  });

  const curves = {
    outOfTheWay: 'cubic-bezier(0.2, 0, 0, 1)',
    drop: 'cubic-bezier(.2,1,.1,1)'
  };
  const combine = {
    opacity: {
      drop: 0,
      combining: 0.7
    },
    scale: {
      drop: 0.75
    }
  };
  const timings = {
    outOfTheWay: 0.2,
    minDropTime: 0.33,
    maxDropTime: 0.55
  };

  const outOfTheWayTiming = `${timings.outOfTheWay}s ${curves.outOfTheWay}`;
  const transitions = {
    fluid: `opacity ${outOfTheWayTiming}`,
    snap: `transform ${outOfTheWayTiming}, opacity ${outOfTheWayTiming}`,
    drop: duration => {
      const timing = `${duration}s ${curves.drop}`;
      return `transform ${timing}, opacity ${timing}`;
    },
    outOfTheWay: `transform ${outOfTheWayTiming}`,
    placeholder: `height ${outOfTheWayTiming}, width ${outOfTheWayTiming}, margin ${outOfTheWayTiming}`
  };
  const moveTo = offset => isEqual$1(offset, origin) ? undefined : `translate(${offset.x}px, ${offset.y}px)`;
  const transforms = {
    moveTo,
    drop: (offset, isCombining) => {
      const translate = moveTo(offset);
      if (!translate) {
        return undefined;
      }

      if (!isCombining) {
        return translate;
      }

      return `${translate} scale(${combine.scale.drop})`;
    }
  };

  const {
    minDropTime,
    maxDropTime
  } = timings;
  const dropTimeRange = maxDropTime - minDropTime;
  const maxDropTimeAtDistance = 1500;
  const cancelDropModifier = 0.6;
  var getDropDuration = (_ref => {
    let {
      current,
      destination,
      reason
    } = _ref;
    const distance$1 = distance(current, destination);
    if (distance$1 <= 0) {
      return minDropTime;
    }
    if (distance$1 >= maxDropTimeAtDistance) {
      return maxDropTime;
    }

    const percentage = distance$1 / maxDropTimeAtDistance;
    const duration = minDropTime + dropTimeRange * percentage;
    const withDuration = reason === 'CANCEL' ? duration * cancelDropModifier : duration;
    return Number(withDuration.toFixed(2));
  });

  var getNewHomeClientOffset = (_ref => {
    let {
      impact,
      draggable,
      dimensions,
      viewport,
      afterCritical
    } = _ref;
    const {
      draggables,
      droppables
    } = dimensions;
    const droppableId = whatIsDraggedOver(impact);
    const destination = droppableId ? droppables[droppableId] : null;
    const home = droppables[draggable.descriptor.droppableId];
    const newClientCenter = getClientBorderBoxCenter({
      impact,
      draggable,
      draggables,
      afterCritical,
      droppable: destination || home,
      viewport
    });
    const offset = subtract(newClientCenter, draggable.client.borderBox.center);
    return offset;
  });

  var getDropImpact = (_ref => {
    let {
      draggables,
      reason,
      lastImpact,
      home,
      viewport,
      onLiftImpact
    } = _ref;
    if (!lastImpact.at || reason !== 'DROP') {

      const recomputedHomeImpact = recompute({
        draggables,
        impact: onLiftImpact,
        destination: home,
        viewport,
        forceShouldAnimate: true
      });
      return {
        impact: recomputedHomeImpact,
        didDropInsideDroppable: false
      };
    }

    if (lastImpact.at.type === 'REORDER') {
      return {
        impact: lastImpact,
        didDropInsideDroppable: true
      };
    }

    const withoutMovement = {
      ...lastImpact,
      displaced: emptyGroups
    };
    return {
      impact: withoutMovement,
      didDropInsideDroppable: true
    };
  });

  const dropMiddleware = _ref => {
    let {
      getState,
      dispatch
    } = _ref;
    return next => action => {
      if (action.type !== 'DROP') {
        next(action);
        return;
      }
      const state = getState();
      const reason = action.payload.reason;

      if (state.phase === 'COLLECTING') {
        dispatch(dropPending({
          reason
        }));
        return;
      }

      if (state.phase === 'IDLE') {
        return;
      }

      const isWaitingForDrop = state.phase === 'DROP_PENDING' && state.isWaiting;
      !!isWaitingForDrop ? invariant(false, 'A DROP action occurred while DROP_PENDING and still waiting')  : void 0;
      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? invariant(false, `Cannot drop in phase: ${state.phase}`)  : void 0;

      const critical = state.critical;
      const dimensions = state.dimensions;
      const draggable = dimensions.draggables[state.critical.draggable.id];

      const {
        impact,
        didDropInsideDroppable
      } = getDropImpact({
        reason,
        lastImpact: state.impact,
        afterCritical: state.afterCritical,
        onLiftImpact: state.onLiftImpact,
        home: state.dimensions.droppables[state.critical.droppable.id],
        viewport: state.viewport,
        draggables: state.dimensions.draggables
      });

      const destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
      const combine = didDropInsideDroppable ? tryGetCombine(impact) : null;
      const source = {
        index: critical.draggable.index,
        droppableId: critical.droppable.id
      };
      const result = {
        draggableId: draggable.descriptor.id,
        type: draggable.descriptor.type,
        source,
        reason,
        mode: state.movementMode,
        destination,
        combine
      };
      const newHomeClientOffset = getNewHomeClientOffset({
        impact,
        draggable,
        dimensions,
        viewport: state.viewport,
        afterCritical: state.afterCritical
      });
      const completed = {
        critical: state.critical,
        afterCritical: state.afterCritical,
        result,
        impact
      };
      const isAnimationRequired =
      !isEqual$1(state.current.client.offset, newHomeClientOffset) ||
      Boolean(result.combine);
      if (!isAnimationRequired) {
        dispatch(completeDrop({
          completed
        }));
        return;
      }
      const dropDuration = getDropDuration({
        current: state.current.client.offset,
        destination: newHomeClientOffset,
        reason
      });
      const args = {
        newHomeClientOffset,
        dropDuration,
        completed
      };
      dispatch(animateDrop(args));
    };
  };
  var drop = dropMiddleware;

  var getWindowScroll = (() => ({
    x: window.pageXOffset,
    y: window.pageYOffset
  }));

  function getWindowScrollBinding(update) {
    return {
      eventName: 'scroll',
      options: {
        passive: true,
        capture: false
      },
      fn: event => {
        if (event.target !== window && event.target !== window.document) {
          return;
        }
        update();
      }
    };
  }
  function getScrollListener(_ref) {
    let {
      onWindowScroll
    } = _ref;
    function updateScroll() {
      onWindowScroll(getWindowScroll());
    }
    const scheduled = rafSchd__default["default"](updateScroll);
    const binding = getWindowScrollBinding(scheduled);
    let unbind = noop$2;
    function isActive() {
      return unbind !== noop$2;
    }
    function start() {
      !!isActive() ? invariant(false, 'Cannot start scroll listener when already active')  : void 0;
      unbind = bindEvents(window, [binding]);
    }
    function stop() {
      !isActive() ? invariant(false, 'Cannot stop scroll listener when not active')  : void 0;
      scheduled.cancel();
      unbind();
      unbind = noop$2;
    }
    return {
      start,
      stop,
      isActive
    };
  }

  const shouldEnd = action => action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
  const scrollListener = store => {
    const listener = getScrollListener({
      onWindowScroll: newScroll => {
        store.dispatch(moveByWindowScroll({
          newScroll
        }));
      }
    });
    return next => action => {
      if (!listener.isActive() && action.type === 'INITIAL_PUBLISH') {
        listener.start();
      }
      if (listener.isActive() && shouldEnd(action)) {
        listener.stop();
      }
      next(action);
    };
  };
  var scrollListener$1 = scrollListener;

  var getExpiringAnnounce = (announce => {
    let wasCalled = false;
    let isExpired = false;

    const timeoutId = setTimeout(() => {
      isExpired = true;
    });
    const result = message => {
      if (wasCalled) {
        warning('Announcement already made. Not making a second announcement') ;
        return;
      }
      if (isExpired) {
        warning(`
        Announcements cannot be made asynchronously.
        Default message has already been announced.
      `) ;
        return;
      }
      wasCalled = true;
      announce(message);
      clearTimeout(timeoutId);
    };

    result.wasCalled = () => wasCalled;
    return result;
  });

  var getAsyncMarshal = (() => {
    const entries = [];
    const execute = timerId => {
      const index = entries.findIndex(item => item.timerId === timerId);
      !(index !== -1) ? invariant(false, 'Could not find timer')  : void 0;
      const [entry] = entries.splice(index, 1);
      entry.callback();
    };
    const add = fn => {
      const timerId = setTimeout(() => execute(timerId));
      const entry = {
        timerId,
        callback: fn
      };
      entries.push(entry);
    };
    const flush = () => {
      if (!entries.length) {
        return;
      }
      const shallow = [...entries];
      entries.length = 0;
      shallow.forEach(entry => {
        clearTimeout(entry.timerId);
        entry.callback();
      });
    };
    return {
      add,
      flush
    };
  });

  const areLocationsEqual = (first, second) => {
    if (first == null && second == null) {
      return true;
    }

    if (first == null || second == null) {
      return false;
    }

    return first.droppableId === second.droppableId && first.index === second.index;
  };
  const isCombineEqual = (first, second) => {
    if (first == null && second == null) {
      return true;
    }

    if (first == null || second == null) {
      return false;
    }
    return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
  };
  const isCriticalEqual = (first, second) => {
    if (first === second) {
      return true;
    }
    const isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
    const isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
    return isDraggableEqual && isDroppableEqual;
  };

  const withTimings = (key, fn) => {
    fn();
  };
  const getDragStart = (critical, mode) => ({
    draggableId: critical.draggable.id,
    type: critical.droppable.type,
    source: {
      droppableId: critical.droppable.id,
      index: critical.draggable.index
    },
    mode
  });
  function execute(responder, data, announce,
  getDefaultMessage) {
    if (!responder) {
      announce(getDefaultMessage(data));
      return;
    }
    const willExpire = getExpiringAnnounce(announce);
    const provided = {
      announce: willExpire
    };

    responder(data, provided);
    if (!willExpire.wasCalled()) {
      announce(getDefaultMessage(data));
    }
  }
  var getPublisher = ((getResponders, announce) => {
    const asyncMarshal = getAsyncMarshal();
    let dragging = null;
    const beforeCapture = (draggableId, mode) => {
      !!dragging ? invariant(false, 'Cannot fire onBeforeCapture as a drag start has already been published')  : void 0;
      withTimings('onBeforeCapture', () => {
        const fn = getResponders().onBeforeCapture;
        if (fn) {
          const before = {
            draggableId,
            mode
          };
          fn(before);
        }
      });
    };
    const beforeStart = (critical, mode) => {
      !!dragging ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published')  : void 0;
      withTimings('onBeforeDragStart', () => {
        const fn = getResponders().onBeforeDragStart;
        if (fn) {
          fn(getDragStart(critical, mode));
        }
      });
    };
    const start = (critical, mode) => {
      !!dragging ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published')  : void 0;
      const data = getDragStart(critical, mode);
      dragging = {
        mode,
        lastCritical: critical,
        lastLocation: data.source,
        lastCombine: null
      };

      asyncMarshal.add(() => {
        withTimings('onDragStart', () => execute(getResponders().onDragStart, data, announce, preset$1.onDragStart));
      });
    };

    const update = (critical, impact) => {
      const location = tryGetDestination(impact);
      const combine = tryGetCombine(impact);
      !dragging ? invariant(false, 'Cannot fire onDragMove when onDragStart has not been called')  : void 0;

      const hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
      if (hasCriticalChanged) {
        dragging.lastCritical = critical;
      }

      const hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
      if (hasLocationChanged) {
        dragging.lastLocation = location;
      }
      const hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine);
      if (hasGroupingChanged) {
        dragging.lastCombine = combine;
      }

      if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
        return;
      }
      const data = {
        ...getDragStart(critical, dragging.mode),
        combine,
        destination: location
      };
      asyncMarshal.add(() => {
        withTimings('onDragUpdate', () => execute(getResponders().onDragUpdate, data, announce, preset$1.onDragUpdate));
      });
    };
    const flush = () => {
      !dragging ? invariant(false, 'Can only flush responders while dragging')  : void 0;
      asyncMarshal.flush();
    };
    const drop = result => {
      !dragging ? invariant(false, 'Cannot fire onDragEnd when there is no matching onDragStart')  : void 0;
      dragging = null;
      withTimings('onDragEnd', () => execute(getResponders().onDragEnd, result, announce, preset$1.onDragEnd));
    };

    const abort = () => {
      if (!dragging) {
        return;
      }
      const result = {
        ...getDragStart(dragging.lastCritical, dragging.mode),
        combine: null,
        destination: null,
        reason: 'CANCEL'
      };
      drop(result);
    };
    return {
      beforeCapture,
      beforeStart,
      start,
      update,
      flush,
      drop,
      abort
    };
  });

  var responders = ((getResponders, announce) => {
    const publisher = getPublisher(getResponders, announce);
    return store => next => action => {
      if (action.type === 'BEFORE_INITIAL_CAPTURE') {
        publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
        return;
      }
      if (action.type === 'INITIAL_PUBLISH') {
        const critical = action.payload.critical;
        publisher.beforeStart(critical, action.payload.movementMode);
        next(action);
        publisher.start(critical, action.payload.movementMode);
        return;
      }

      if (action.type === 'DROP_COMPLETE') {
        const result = action.payload.completed.result;
        publisher.flush();
        next(action);
        publisher.drop(result);
        return;
      }

      next(action);

      if (action.type === 'FLUSH') {
        publisher.abort();
        return;
      }

      const state = store.getState();
      if (state.phase === 'DRAGGING') {
        publisher.update(state.critical, state.impact);
      }
    };
  });

  const dropAnimationFinishMiddleware = store => next => action => {
    if (action.type !== 'DROP_ANIMATION_FINISHED') {
      next(action);
      return;
    }
    const state = store.getState();
    !(state.phase === 'DROP_ANIMATING') ? invariant(false, 'Cannot finish a drop animating when no drop is occurring')  : void 0;
    store.dispatch(completeDrop({
      completed: state.completed
    }));
  };
  var dropAnimationFinish = dropAnimationFinishMiddleware;

  const dropAnimationFlushOnScrollMiddleware = store => {
    let unbind = null;
    let frameId = null;
    function clear() {
      if (frameId) {
        cancelAnimationFrame(frameId);
        frameId = null;
      }
      if (unbind) {
        unbind();
        unbind = null;
      }
    }
    return next => action => {
      if (action.type === 'FLUSH' || action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATION_FINISHED') {
        clear();
      }
      next(action);
      if (action.type !== 'DROP_ANIMATE') {
        return;
      }
      const binding = {
        eventName: 'scroll',
        options: {
          capture: true,
          passive: false,
          once: true
        },
        fn: function flushDropAnimation() {
          const state = store.getState();
          if (state.phase === 'DROP_ANIMATING') {
            store.dispatch(dropAnimationFinished());
          }
        }
      };

      frameId = requestAnimationFrame(() => {
        frameId = null;
        unbind = bindEvents(window, [binding]);
      });
    };
  };
  var dropAnimationFlushOnScroll = dropAnimationFlushOnScrollMiddleware;

  var dimensionMarshalStopper = (marshal => () => next => action => {
    if (
    action.type === 'DROP_COMPLETE' || action.type === 'FLUSH' ||
    action.type === 'DROP_ANIMATE') {
      marshal.stopPublishing();
    }
    next(action);
  });

  var focus = (marshal => {
    let isWatching = false;
    return () => next => action => {
      if (action.type === 'INITIAL_PUBLISH') {
        isWatching = true;
        marshal.tryRecordFocus(action.payload.critical.draggable.id);
        next(action);
        marshal.tryRestoreFocusRecorded();
        return;
      }
      next(action);
      if (!isWatching) {
        return;
      }
      if (action.type === 'FLUSH') {
        isWatching = false;
        marshal.tryRestoreFocusRecorded();
        return;
      }
      if (action.type === 'DROP_COMPLETE') {
        isWatching = false;
        const result = action.payload.completed.result;

        if (result.combine) {
          marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
        }
        marshal.tryRestoreFocusRecorded();
      }
    };
  });

  const shouldStop = action => action.type === 'DROP_COMPLETE' || action.type === 'DROP_ANIMATE' || action.type === 'FLUSH';
  var autoScroll = (autoScroller => store => next => action => {
    if (shouldStop(action)) {
      autoScroller.stop();
      next(action);
      return;
    }
    if (action.type === 'INITIAL_PUBLISH') {
      next(action);
      const state = store.getState();
      !(state.phase === 'DRAGGING') ? invariant(false, 'Expected phase to be DRAGGING after INITIAL_PUBLISH')  : void 0;
      autoScroller.start(state);
      return;
    }

    next(action);
    autoScroller.scroll(store.getState());
  });

  const pendingDrop = store => next => action => {
    next(action);
    if (action.type !== 'PUBLISH_WHILE_DRAGGING') {
      return;
    }

    const postActionState = store.getState();

    if (postActionState.phase !== 'DROP_PENDING') {
      return;
    }

    if (postActionState.isWaiting) {
      return;
    }
    store.dispatch(drop$1({
      reason: postActionState.reason
    }));
  };
  var pendingDrop$1 = pendingDrop;

  const composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
    name: '@hello-pangea/dnd'
  }) : redux.compose;
  var createStore$1 = (_ref => {
    let {
      dimensionMarshal,
      focusMarshal,
      styleMarshal,
      getResponders,
      announce,
      autoScroller
    } = _ref;
    return redux.createStore(reducer$1, composeEnhancers(redux.applyMiddleware(

    style(styleMarshal),
    dimensionMarshalStopper(dimensionMarshal),
    lift(dimensionMarshal), drop,
    dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop$1, autoScroll(autoScroller), scrollListener$1, focus(focusMarshal),
    responders(getResponders, announce))));
  });

  const clean$1 = () => ({
    additions: {},
    removals: {},
    modified: {}
  });
  function createPublisher(_ref) {
    let {
      registry,
      callbacks
    } = _ref;
    let staging = clean$1();
    let frameId = null;
    const collect = () => {
      if (frameId) {
        return;
      }
      callbacks.collectionStarting();
      frameId = requestAnimationFrame(() => {
        frameId = null;
        const {
          additions,
          removals,
          modified
        } = staging;
        const added = Object.keys(additions).map(
        id => registry.draggable.getById(id).getDimension(origin))
        .sort((a, b) => a.descriptor.index - b.descriptor.index);
        const updated = Object.keys(modified).map(id => {
          const entry = registry.droppable.getById(id);
          const scroll = entry.callbacks.getScrollWhileDragging();
          return {
            droppableId: id,
            scroll
          };
        });
        const result = {
          additions: added,
          removals: Object.keys(removals),
          modified: updated
        };
        staging = clean$1();
        callbacks.publish(result);
      });
    };
    const add = entry => {
      const id = entry.descriptor.id;
      staging.additions[id] = entry;
      staging.modified[entry.descriptor.droppableId] = true;
      if (staging.removals[id]) {
        delete staging.removals[id];
      }
      collect();
    };
    const remove = entry => {
      const descriptor = entry.descriptor;
      staging.removals[descriptor.id] = true;
      staging.modified[descriptor.droppableId] = true;
      if (staging.additions[descriptor.id]) {
        delete staging.additions[descriptor.id];
      }
      collect();
    };
    const stop = () => {
      if (!frameId) {
        return;
      }
      cancelAnimationFrame(frameId);
      frameId = null;
      staging = clean$1();
    };
    return {
      add,
      remove,
      stop
    };
  }

  var getMaxScroll = (_ref => {
    let {
      scrollHeight,
      scrollWidth,
      height,
      width
    } = _ref;
    const maxScroll = subtract(
    {
      x: scrollWidth,
      y: scrollHeight
    },
    {
      x: width,
      y: height
    });
    const adjustedMaxScroll = {
      x: Math.max(0, maxScroll.x),
      y: Math.max(0, maxScroll.y)
    };
    return adjustedMaxScroll;
  });

  var getDocumentElement = (() => {
    const doc = document.documentElement;
    !doc ? invariant(false, 'Cannot find document.documentElement')  : void 0;
    return doc;
  });

  var getMaxWindowScroll = (() => {
    const doc = getDocumentElement();
    const maxScroll = getMaxScroll({
      scrollHeight: doc.scrollHeight,
      scrollWidth: doc.scrollWidth,
      width: doc.clientWidth,
      height: doc.clientHeight
    });
    return maxScroll;
  });

  var getViewport = (() => {
    const scroll = getWindowScroll();
    const maxScroll = getMaxWindowScroll();
    const top = scroll.y;
    const left = scroll.x;

    const doc = getDocumentElement();
    const width = doc.clientWidth;
    const height = doc.clientHeight;

    const right = left + width;
    const bottom = top + height;
    const frame = cssBoxModel.getRect({
      top,
      left,
      right,
      bottom
    });
    const viewport = {
      frame,
      scroll: {
        initial: scroll,
        current: scroll,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
    return viewport;
  });

  var getInitialPublish = (_ref => {
    let {
      critical,
      scrollOptions,
      registry
    } = _ref;
    const viewport = getViewport();
    const windowScroll = viewport.scroll.current;
    const home = critical.droppable;
    const droppables = registry.droppable.getAllByType(home.type).map(entry => entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions));
    const draggables = registry.draggable.getAllByType(critical.draggable.type).map(entry => entry.getDimension(windowScroll));
    const dimensions = {
      draggables: toDraggableMap(draggables),
      droppables: toDroppableMap(droppables)
    };
    const result = {
      dimensions,
      critical,
      viewport
    };
    return result;
  });

  function shouldPublishUpdate(registry, dragging, entry) {
    if (entry.descriptor.id === dragging.id) {
      return false;
    }
    if (entry.descriptor.type !== dragging.type) {
      return false;
    }
    const home = registry.droppable.getById(entry.descriptor.droppableId);
    if (home.descriptor.mode !== 'virtual') {
      warning(`
      You are attempting to add or remove a Draggable [id: ${entry.descriptor.id}]
      while a drag is occurring. This is only supported for virtual lists.

      See https://github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    `) ;
      return false;
    }
    return true;
  }
  var createDimensionMarshal = ((registry, callbacks) => {
    let collection = null;
    const publisher = createPublisher({
      callbacks: {
        publish: callbacks.publishWhileDragging,
        collectionStarting: callbacks.collectionStarting
      },
      registry
    });
    const updateDroppableIsEnabled = (id, isEnabled) => {
      !registry.droppable.exists(id) ? invariant(false, `Cannot update is enabled flag of Droppable ${id} as it is not registered`)  : void 0;

      if (!collection) {
        return;
      }

      callbacks.updateDroppableIsEnabled({
        id,
        isEnabled
      });
    };
    const updateDroppableIsCombineEnabled = (id, isCombineEnabled) => {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id) ? invariant(false, `Cannot update isCombineEnabled flag of Droppable ${id} as it is not registered`)  : void 0;
      callbacks.updateDroppableIsCombineEnabled({
        id,
        isCombineEnabled
      });
    };
    const updateDroppableScroll = (id, newScroll) => {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id) ? invariant(false, `Cannot update the scroll on Droppable ${id} as it is not registered`)  : void 0;
      callbacks.updateDroppableScroll({
        id,
        newScroll
      });
    };
    const scrollDroppable = (id, change) => {
      if (!collection) {
        return;
      }
      registry.droppable.getById(id).callbacks.scroll(change);
    };
    const stopPublishing = () => {
      if (!collection) {
        return;
      }
      publisher.stop();

      const home = collection.critical.droppable;
      registry.droppable.getAllByType(home.type).forEach(entry => entry.callbacks.dragStopped());

      collection.unsubscribe();
      collection = null;
    };
    const subscriber = event => {
      !collection ? invariant(false, 'Should only be subscribed when a collection is occurring')  : void 0;
      const dragging = collection.critical.draggable;
      if (event.type === 'ADDITION') {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.add(event.value);
        }
      }
      if (event.type === 'REMOVAL') {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.remove(event.value);
        }
      }
    };
    const startPublishing = request => {
      !!collection ? invariant(false, 'Cannot start capturing critical dimensions as there is already a collection')  : void 0;
      const entry = registry.draggable.getById(request.draggableId);
      const home = registry.droppable.getById(entry.descriptor.droppableId);
      const critical = {
        draggable: entry.descriptor,
        droppable: home.descriptor
      };
      const unsubscribe = registry.subscribe(subscriber);
      collection = {
        critical,
        unsubscribe
      };
      return getInitialPublish({
        critical,
        registry,
        scrollOptions: request.scrollOptions
      });
    };
    const marshal = {
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      scrollDroppable,
      updateDroppableScroll,
      startPublishing,
      stopPublishing
    };
    return marshal;
  });

  var canStartDrag = ((state, id) => {
    if (state.phase === 'IDLE') {
      return true;
    }

    if (state.phase !== 'DROP_ANIMATING') {
      return false;
    }

    if (state.completed.result.draggableId === id) {
      return false;
    }

    return state.completed.result.reason === 'DROP';
  });

  var scrollWindow = (change => {
    window.scrollBy(change.x, change.y);
  });

  const getScrollableDroppables = memoizeOne__default["default"](droppables => toDroppableList(droppables).filter(droppable => {
    if (!droppable.isEnabled) {
      return false;
    }

    if (!droppable.frame) {
      return false;
    }
    return true;
  }));
  const getScrollableDroppableOver = (target, droppables) => {
    const maybe = getScrollableDroppables(droppables).find(droppable => {
      !droppable.frame ? invariant(false, 'Invalid result')  : void 0;
      return isPositionInFrame(droppable.frame.pageMarginBox)(target);
    }) || null;
    return maybe;
  };
  var getBestScrollableDroppable = (_ref => {
    let {
      center,
      destination,
      droppables
    } = _ref;

    if (destination) {
      const dimension = droppables[destination];
      if (!dimension.frame) {
        return null;
      }
      return dimension;
    }

    const dimension = getScrollableDroppableOver(center, droppables);
    return dimension;
  });

  const defaultAutoScrollerOptions = {
    startFromPercentage: 0.25,
    maxScrollAtPercentage: 0.05,
    maxPixelScroll: 28,
    ease: percentage => percentage ** 2,
    durationDampening: {
      stopDampeningAt: 1200,
      accelerateAt: 360
    },
    disabled: false
  };

  var getDistanceThresholds = (function (container, axis, getAutoScrollerOptions) {
    if (getAutoScrollerOptions === void 0) {
      getAutoScrollerOptions = () => defaultAutoScrollerOptions;
    }
    const autoScrollerOptions = getAutoScrollerOptions();
    const startScrollingFrom = container[axis.size] * autoScrollerOptions.startFromPercentage;
    const maxScrollValueAt = container[axis.size] * autoScrollerOptions.maxScrollAtPercentage;
    const thresholds = {
      startScrollingFrom,
      maxScrollValueAt
    };
    return thresholds;
  });

  var getPercentage = (_ref => {
    let {
      startOfRange,
      endOfRange,
      current
    } = _ref;
    const range = endOfRange - startOfRange;
    if (range === 0) {
      warning(`
      Detected distance range of 0 in the fluid auto scroller
      This is unexpected and would cause a divide by 0 issue.
      Not allowing an auto scroll
    `) ;
      return 0;
    }
    const currentInRange = current - startOfRange;
    const percentage = currentInRange / range;
    return percentage;
  });

  var minScroll = 1;

  var getValueFromDistance = (function (distanceToEdge, thresholds, getAutoScrollerOptions) {
    if (getAutoScrollerOptions === void 0) {
      getAutoScrollerOptions = () => defaultAutoScrollerOptions;
    }
    const autoScrollerOptions = getAutoScrollerOptions();

    if (distanceToEdge > thresholds.startScrollingFrom) {
      return 0;
    }

    if (distanceToEdge <= thresholds.maxScrollValueAt) {
      return autoScrollerOptions.maxPixelScroll;
    }

    if (distanceToEdge === thresholds.startScrollingFrom) {
      return minScroll;
    }

    const percentageFromMaxScrollValueAt = getPercentage({
      startOfRange: thresholds.maxScrollValueAt,
      endOfRange: thresholds.startScrollingFrom,
      current: distanceToEdge
    });
    const percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
    const scroll = autoScrollerOptions.maxPixelScroll * autoScrollerOptions.ease(percentageFromStartScrollingFrom);

    return Math.ceil(scroll);
  });

  var dampenValueByTime = ((proposedScroll, dragStartTime, getAutoScrollerOptions) => {
    const autoScrollerOptions = getAutoScrollerOptions();
    const accelerateAt = autoScrollerOptions.durationDampening.accelerateAt;
    const stopAt = autoScrollerOptions.durationDampening.stopDampeningAt;
    const startOfRange = dragStartTime;
    const endOfRange = stopAt;
    const now = Date.now();
    const runTime = now - startOfRange;

    if (runTime >= stopAt) {
      return proposedScroll;
    }

    if (runTime < accelerateAt) {
      return minScroll;
    }
    const betweenAccelerateAtAndStopAtPercentage = getPercentage({
      startOfRange: accelerateAt,
      endOfRange,
      current: runTime
    });
    const scroll = proposedScroll * autoScrollerOptions.ease(betweenAccelerateAtAndStopAtPercentage);
    return Math.ceil(scroll);
  });

  var getValue = (_ref => {
    let {
      distanceToEdge,
      thresholds,
      dragStartTime,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    } = _ref;
    const scroll = getValueFromDistance(distanceToEdge, thresholds, getAutoScrollerOptions);

    if (scroll === 0) {
      return 0;
    }

    if (!shouldUseTimeDampening) {
      return scroll;
    }

    return Math.max(dampenValueByTime(scroll, dragStartTime, getAutoScrollerOptions), minScroll);
  });

  var getScrollOnAxis = (_ref => {
    let {
      container,
      distanceToEdges,
      dragStartTime,
      axis,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    } = _ref;
    const thresholds = getDistanceThresholds(container, axis, getAutoScrollerOptions);
    const isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
    if (isCloserToEnd) {
      return getValue({
        distanceToEdge: distanceToEdges[axis.end],
        thresholds,
        dragStartTime,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
    }
    return -1 * getValue({
      distanceToEdge: distanceToEdges[axis.start],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
  });

  var adjustForSizeLimits = (_ref => {
    let {
      container,
      subject,
      proposedScroll
    } = _ref;
    const isTooBigVertically = subject.height > container.height;
    const isTooBigHorizontally = subject.width > container.width;

    if (!isTooBigHorizontally && !isTooBigVertically) {
      return proposedScroll;
    }

    if (isTooBigHorizontally && isTooBigVertically) {
      return null;
    }

    return {
      x: isTooBigHorizontally ? 0 : proposedScroll.x,
      y: isTooBigVertically ? 0 : proposedScroll.y
    };
  });

  const clean = apply(value => value === 0 ? 0 : value);
  var getScroll$1 = (_ref => {
    let {
      dragStartTime,
      container,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    } = _ref;
    const distanceToEdges = {
      top: center.y - container.top,
      right: container.right - center.x,
      bottom: container.bottom - center.y,
      left: center.x - container.left
    };

    const y = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: vertical,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    const x = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: horizontal,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    const required = clean({
      x,
      y
    });

    if (isEqual$1(required, origin)) {
      return null;
    }

    const limited = adjustForSizeLimits({
      container,
      subject,
      proposedScroll: required
    });
    if (!limited) {
      return null;
    }
    return isEqual$1(limited, origin) ? null : limited;
  });

  const smallestSigned = apply(value => {
    if (value === 0) {
      return 0;
    }
    return value > 0 ? 1 : -1;
  });
  const getOverlap = (() => {
    const getRemainder = (target, max) => {
      if (target < 0) {
        return target;
      }
      if (target > max) {
        return target - max;
      }
      return 0;
    };
    return _ref => {
      let {
        current,
        max,
        change
      } = _ref;
      const targetScroll = add(current, change);
      const overlap = {
        x: getRemainder(targetScroll.x, max.x),
        y: getRemainder(targetScroll.y, max.y)
      };
      if (isEqual$1(overlap, origin)) {
        return null;
      }
      return overlap;
    };
  })();
  const canPartiallyScroll = _ref2 => {
    let {
      max: rawMax,
      current,
      change
    } = _ref2;
    const max = {
      x: Math.max(current.x, rawMax.x),
      y: Math.max(current.y, rawMax.y)
    };

    const smallestChange = smallestSigned(change);
    const overlap = getOverlap({
      max,
      current,
      change: smallestChange
    });

    if (!overlap) {
      return true;
    }

    if (smallestChange.x !== 0 && overlap.x === 0) {
      return true;
    }

    if (smallestChange.y !== 0 && overlap.y === 0) {
      return true;
    }
    return false;
  };
  const canScrollWindow = (viewport, change) => canPartiallyScroll({
    current: viewport.scroll.current,
    max: viewport.scroll.max,
    change
  });
  const getWindowOverlap = (viewport, change) => {
    if (!canScrollWindow(viewport, change)) {
      return null;
    }
    const max = viewport.scroll.max;
    const current = viewport.scroll.current;
    return getOverlap({
      current,
      max,
      change
    });
  };
  const canScrollDroppable = (droppable, change) => {
    const frame = droppable.frame;

    if (!frame) {
      return false;
    }
    return canPartiallyScroll({
      current: frame.scroll.current,
      max: frame.scroll.max,
      change
    });
  };
  const getDroppableOverlap = (droppable, change) => {
    const frame = droppable.frame;
    if (!frame) {
      return null;
    }
    if (!canScrollDroppable(droppable, change)) {
      return null;
    }
    return getOverlap({
      current: frame.scroll.current,
      max: frame.scroll.max,
      change
    });
  };

  var getWindowScrollChange = (_ref => {
    let {
      viewport,
      subject,
      center,
      dragStartTime,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    } = _ref;
    const scroll = getScroll$1({
      dragStartTime,
      container: viewport.frame,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    return scroll && canScrollWindow(viewport, scroll) ? scroll : null;
  });

  var getDroppableScrollChange = (_ref => {
    let {
      droppable,
      subject,
      center,
      dragStartTime,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    } = _ref;
    const frame = droppable.frame;

    if (!frame) {
      return null;
    }
    const scroll = getScroll$1({
      dragStartTime,
      container: frame.pageMarginBox,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    return scroll && canScrollDroppable(droppable, scroll) ? scroll : null;
  });

  var scroll = (_ref => {
    let {
      state,
      dragStartTime,
      shouldUseTimeDampening,
      scrollWindow,
      scrollDroppable,
      getAutoScrollerOptions
    } = _ref;
    const center = state.current.page.borderBoxCenter;
    const draggable = state.dimensions.draggables[state.critical.draggable.id];
    const subject = draggable.page.marginBox;
    if (state.isWindowScrollAllowed) {
      const viewport = state.viewport;
      const change = getWindowScrollChange({
        dragStartTime,
        viewport,
        subject,
        center,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
      if (change) {
        scrollWindow(change);
        return;
      }
    }
    const droppable = getBestScrollableDroppable({
      center,
      destination: whatIsDraggedOver(state.impact),
      droppables: state.dimensions.droppables
    });
    if (!droppable) {
      return;
    }
    const change = getDroppableScrollChange({
      dragStartTime,
      droppable,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    if (change) {
      scrollDroppable(droppable.descriptor.id, change);
    }
  });

  var createFluidScroller = (_ref => {
    let {
      scrollWindow,
      scrollDroppable,
      getAutoScrollerOptions = () => defaultAutoScrollerOptions
    } = _ref;
    const scheduleWindowScroll = rafSchd__default["default"](scrollWindow);
    const scheduleDroppableScroll = rafSchd__default["default"](scrollDroppable);
    let dragging = null;
    const tryScroll = state => {
      !dragging ? invariant(false, 'Cannot fluid scroll if not dragging')  : void 0;
      const {
        shouldUseTimeDampening,
        dragStartTime
      } = dragging;
      scroll({
        state,
        scrollWindow: scheduleWindowScroll,
        scrollDroppable: scheduleDroppableScroll,
        dragStartTime,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
    };
    const start$1 = state => {
      !!dragging ? invariant(false, 'Cannot start auto scrolling when already started')  : void 0;
      const dragStartTime = Date.now();
      let wasScrollNeeded = false;
      const fakeScrollCallback = () => {
        wasScrollNeeded = true;
      };
      scroll({
        state,
        dragStartTime: 0,
        shouldUseTimeDampening: false,
        scrollWindow: fakeScrollCallback,
        scrollDroppable: fakeScrollCallback,
        getAutoScrollerOptions
      });
      dragging = {
        dragStartTime,
        shouldUseTimeDampening: wasScrollNeeded
      };

      if (wasScrollNeeded) {
        tryScroll(state);
      }
    };
    const stop = () => {
      if (!dragging) {
        return;
      }
      scheduleWindowScroll.cancel();
      scheduleDroppableScroll.cancel();
      dragging = null;
    };
    return {
      start: start$1,
      stop,
      scroll: tryScroll
    };
  });

  var createJumpScroller = (_ref => {
    let {
      move,
      scrollDroppable,
      scrollWindow
    } = _ref;
    const moveByOffset = (state, offset) => {
      const client = add(state.current.client.selection, offset);
      move({
        client
      });
    };
    const scrollDroppableAsMuchAsItCan = (droppable, change) => {
      if (!canScrollDroppable(droppable, change)) {
        return change;
      }
      const overlap = getDroppableOverlap(droppable, change);

      if (!overlap) {
        scrollDroppable(droppable.descriptor.id, change);
        return null;
      }

      const whatTheDroppableCanScroll = subtract(change, overlap);
      scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);
      const remainder = subtract(change, whatTheDroppableCanScroll);
      return remainder;
    };
    const scrollWindowAsMuchAsItCan = (isWindowScrollAllowed, viewport, change) => {
      if (!isWindowScrollAllowed) {
        return change;
      }
      if (!canScrollWindow(viewport, change)) {
        return change;
      }
      const overlap = getWindowOverlap(viewport, change);

      if (!overlap) {
        scrollWindow(change);
        return null;
      }

      const whatTheWindowCanScroll = subtract(change, overlap);
      scrollWindow(whatTheWindowCanScroll);
      const remainder = subtract(change, whatTheWindowCanScroll);
      return remainder;
    };
    const jumpScroller = state => {
      const request = state.scrollJumpRequest;
      if (!request) {
        return;
      }
      const destination = whatIsDraggedOver(state.impact);
      !destination ? invariant(false, 'Cannot perform a jump scroll when there is no destination')  : void 0;

      const droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);

      if (!droppableRemainder) {
        return;
      }
      const viewport = state.viewport;
      const windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);

      if (!windowRemainder) {
        return;
      }

      moveByOffset(state, windowRemainder);
    };
    return jumpScroller;
  });

  var createAutoScroller = (_ref => {
    let {
      scrollDroppable,
      scrollWindow,
      move,
      getAutoScrollerOptions
    } = _ref;
    const fluidScroller = createFluidScroller({
      scrollWindow,
      scrollDroppable,
      getAutoScrollerOptions
    });
    const jumpScroll = createJumpScroller({
      move,
      scrollWindow,
      scrollDroppable
    });
    const scroll = state => {
      const autoScrollerOptions = getAutoScrollerOptions();

      if (autoScrollerOptions.disabled || state.phase !== 'DRAGGING') {
        return;
      }
      if (state.movementMode === 'FLUID') {
        fluidScroller.scroll(state);
        return;
      }
      if (!state.scrollJumpRequest) {
        return;
      }
      jumpScroll(state);
    };
    const scroller = {
      scroll,
      start: fluidScroller.start,
      stop: fluidScroller.stop
    };
    return scroller;
  });

  const prefix = 'data-rfd';
  const dragHandle = (() => {
    const base = `${prefix}-drag-handle`;
    return {
      base,
      draggableId: `${base}-draggable-id`,
      contextId: `${base}-context-id`
    };
  })();
  const draggable = (() => {
    const base = `${prefix}-draggable`;
    return {
      base,
      contextId: `${base}-context-id`,
      id: `${base}-id`
    };
  })();
  const droppable = (() => {
    const base = `${prefix}-droppable`;
    return {
      base,
      contextId: `${base}-context-id`,
      id: `${base}-id`
    };
  })();
  const scrollContainer = {
    contextId: `${prefix}-scroll-container-context-id`
  };

  const makeGetSelector = context => attribute => `[${attribute}="${context}"]`;
  const getStyles = (rules, property) => rules.map(rule => {
    const value = rule.styles[property];
    if (!value) {
      return '';
    }
    return `${rule.selector} { ${value} }`;
  }).join(' ');
  const noPointerEvents = 'pointer-events: none;';
  var getStyles$1 = (contextId => {
    const getSelector = makeGetSelector(contextId);

    const dragHandle$1 = (() => {
      const grabCursor = `
      cursor: -webkit-grab;
      cursor: grab;
    `;
      return {
        selector: getSelector(dragHandle.contextId),
        styles: {
          always: `
          -webkit-touch-callout: none;
          -webkit-tap-highlight-color: rgba(0,0,0,0);
          touch-action: manipulation;
        `,
          resting: grabCursor,
          dragging: noPointerEvents,
          dropAnimating: grabCursor
        }
      };
    })();

    const draggable$1 = (() => {
      const transition = `
      transition: ${transitions.outOfTheWay};
    `;
      return {
        selector: getSelector(draggable.contextId),
        styles: {
          dragging: transition,
          dropAnimating: transition,
          userCancel: transition
        }
      };
    })();

    const droppable$1 = {
      selector: getSelector(droppable.contextId),
      styles: {
        always: `overflow-anchor: none;`
      }
    };

    const body = {
      selector: 'body',
      styles: {
        dragging: `
        cursor: grabbing;
        cursor: -webkit-grabbing;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        overflow-anchor: none;
      `
      }
    };
    const rules = [draggable$1, dragHandle$1, droppable$1, body];
    return {
      always: getStyles(rules, 'always'),
      resting: getStyles(rules, 'resting'),
      dragging: getStyles(rules, 'dragging'),
      dropAnimating: getStyles(rules, 'dropAnimating'),
      userCancel: getStyles(rules, 'userCancel')
    };
  });

  const useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;
  var useLayoutEffect = useIsomorphicLayoutEffect;

  const getHead = () => {
    const head = document.querySelector('head');
    !head ? invariant(false, 'Cannot find the head to append a style to')  : void 0;
    return head;
  };
  const createStyleEl = nonce => {
    const el = document.createElement('style');
    if (nonce) {
      el.setAttribute('nonce', nonce);
    }
    el.type = 'text/css';
    return el;
  };
  function useStyleMarshal(contextId, nonce) {
    const styles = useMemoOne.useMemo(() => getStyles$1(contextId), [contextId]);
    const alwaysRef = React.useRef(null);
    const dynamicRef = React.useRef(null);

    const setDynamicStyle = useMemoOne.useCallback(
    memoizeOne__default["default"](proposed => {
      const el = dynamicRef.current;
      !el ? invariant(false, 'Cannot set dynamic style element if it is not set')  : void 0;
      el.textContent = proposed;
    }), []);
    const setAlwaysStyle = useMemoOne.useCallback(proposed => {
      const el = alwaysRef.current;
      !el ? invariant(false, 'Cannot set dynamic style element if it is not set')  : void 0;
      el.textContent = proposed;
    }, []);

    useLayoutEffect(() => {
      !(!alwaysRef.current && !dynamicRef.current) ? invariant(false, 'style elements already mounted')  : void 0;
      const always = createStyleEl(nonce);
      const dynamic = createStyleEl(nonce);

      alwaysRef.current = always;
      dynamicRef.current = dynamic;

      always.setAttribute(`${prefix}-always`, contextId);
      dynamic.setAttribute(`${prefix}-dynamic`, contextId);

      getHead().appendChild(always);
      getHead().appendChild(dynamic);

      setAlwaysStyle(styles.always);
      setDynamicStyle(styles.resting);
      return () => {
        const remove = ref => {
          const current = ref.current;
          !current ? invariant(false, 'Cannot unmount ref as it is not set')  : void 0;
          getHead().removeChild(current);
          ref.current = null;
        };
        remove(alwaysRef);
        remove(dynamicRef);
      };
    }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
    const dragging = useMemoOne.useCallback(() => setDynamicStyle(styles.dragging), [setDynamicStyle, styles.dragging]);
    const dropping = useMemoOne.useCallback(reason => {
      if (reason === 'DROP') {
        setDynamicStyle(styles.dropAnimating);
        return;
      }
      setDynamicStyle(styles.userCancel);
    }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
    const resting = useMemoOne.useCallback(() => {
      if (!dynamicRef.current) {
        return;
      }
      setDynamicStyle(styles.resting);
    }, [setDynamicStyle, styles.resting]);
    const marshal = useMemoOne.useMemo(() => ({
      dragging,
      dropping,
      resting
    }), [dragging, dropping, resting]);
    return marshal;
  }

  function querySelectorAll(parentNode, selector) {
    return Array.from(parentNode.querySelectorAll(selector));
  }

  var getWindowFromEl = (el => {
    var _el$ownerDocument;
    return (el == null ? void 0 : (_el$ownerDocument = el.ownerDocument) == null ? void 0 : _el$ownerDocument.defaultView) || window;
  });

  function isHtmlElement(el) {
    return el instanceof getWindowFromEl(el).HTMLElement;
  }

  function findDragHandle(contextId, draggableId) {
    const selector = `[${dragHandle.contextId}="${contextId}"]`;
    const possible = querySelectorAll(document, selector);
    if (!possible.length) {
      warning(`Unable to find any drag handles in the context "${contextId}"`) ;
      return null;
    }
    const handle = possible.find(el => {
      return el.getAttribute(dragHandle.draggableId) === draggableId;
    });
    if (!handle) {
      warning(`Unable to find drag handle with id "${draggableId}" as no handle with a matching id was found`) ;
      return null;
    }
    if (!isHtmlElement(handle)) {
      warning('drag handle needs to be a HTMLElement') ;
      return null;
    }
    return handle;
  }

  function useFocusMarshal(contextId) {
    const entriesRef = React.useRef({});
    const recordRef = React.useRef(null);
    const restoreFocusFrameRef = React.useRef(null);
    const isMountedRef = React.useRef(false);
    const register = useMemoOne.useCallback(function register(id, focus) {
      const entry = {
        id,
        focus
      };
      entriesRef.current[id] = entry;
      return function unregister() {
        const entries = entriesRef.current;
        const current = entries[id];
        if (current !== entry) {
          delete entries[id];
        }
      };
    }, []);
    const tryGiveFocus = useMemoOne.useCallback(function tryGiveFocus(tryGiveFocusTo) {
      const handle = findDragHandle(contextId, tryGiveFocusTo);
      if (handle && handle !== document.activeElement) {
        handle.focus();
      }
    }, [contextId]);
    const tryShiftRecord = useMemoOne.useCallback(function tryShiftRecord(previous, redirectTo) {
      if (recordRef.current === previous) {
        recordRef.current = redirectTo;
      }
    }, []);
    const tryRestoreFocusRecorded = useMemoOne.useCallback(function tryRestoreFocusRecorded() {
      if (restoreFocusFrameRef.current) {
        return;
      }

      if (!isMountedRef.current) {
        return;
      }
      restoreFocusFrameRef.current = requestAnimationFrame(() => {
        restoreFocusFrameRef.current = null;
        const record = recordRef.current;
        if (record) {
          tryGiveFocus(record);
        }
      });
    }, [tryGiveFocus]);
    const tryRecordFocus = useMemoOne.useCallback(function tryRecordFocus(id) {
      recordRef.current = null;
      const focused = document.activeElement;

      if (!focused) {
        return;
      }

      if (focused.getAttribute(dragHandle.draggableId) !== id) {
        return;
      }
      recordRef.current = id;
    }, []);
    useLayoutEffect(() => {
      isMountedRef.current = true;
      return function clearFrameOnUnmount() {
        isMountedRef.current = false;
        const frameId = restoreFocusFrameRef.current;
        if (frameId) {
          cancelAnimationFrame(frameId);
        }
      };
    }, []);
    const marshal = useMemoOne.useMemo(() => ({
      register,
      tryRecordFocus,
      tryRestoreFocusRecorded,
      tryShiftRecord
    }), [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
    return marshal;
  }

  function createRegistry() {
    const entries = {
      draggables: {},
      droppables: {}
    };
    const subscribers = [];
    function subscribe(cb) {
      subscribers.push(cb);
      return function unsubscribe() {
        const index = subscribers.indexOf(cb);

        if (index === -1) {
          return;
        }
        subscribers.splice(index, 1);
      };
    }
    function notify(event) {
      if (subscribers.length) {
        subscribers.forEach(cb => cb(event));
      }
    }
    function findDraggableById(id) {
      return entries.draggables[id] || null;
    }
    function getDraggableById(id) {
      const entry = findDraggableById(id);
      !entry ? invariant(false, `Cannot find draggable entry with id [${id}]`)  : void 0;
      return entry;
    }
    const draggableAPI = {
      register: entry => {
        entries.draggables[entry.descriptor.id] = entry;
        notify({
          type: 'ADDITION',
          value: entry
        });
      },
      update: (entry, last) => {
        const current = entries.draggables[last.descriptor.id];

        if (!current) {
          return;
        }

        if (current.uniqueId !== entry.uniqueId) {
          return;
        }

        delete entries.draggables[last.descriptor.id];
        entries.draggables[entry.descriptor.id] = entry;
      },
      unregister: entry => {
        const draggableId = entry.descriptor.id;
        const current = findDraggableById(draggableId);

        if (!current) {
          return;
        }

        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.draggables[draggableId];

        if (entries.droppables[entry.descriptor.droppableId]) {
          notify({
            type: 'REMOVAL',
            value: entry
          });
        }
      },
      getById: getDraggableById,
      findById: findDraggableById,
      exists: id => Boolean(findDraggableById(id)),
      getAllByType: type => Object.values(entries.draggables).filter(entry => entry.descriptor.type === type)
    };
    function findDroppableById(id) {
      return entries.droppables[id] || null;
    }
    function getDroppableById(id) {
      const entry = findDroppableById(id);
      !entry ? invariant(false, `Cannot find droppable entry with id [${id}]`)  : void 0;
      return entry;
    }
    const droppableAPI = {
      register: entry => {
        entries.droppables[entry.descriptor.id] = entry;
      },
      unregister: entry => {
        const current = findDroppableById(entry.descriptor.id);

        if (!current) {
          return;
        }

        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.droppables[entry.descriptor.id];
      },
      getById: getDroppableById,
      findById: findDroppableById,
      exists: id => Boolean(findDroppableById(id)),
      getAllByType: type => Object.values(entries.droppables).filter(entry => entry.descriptor.type === type)
    };
    function clean() {
      entries.draggables = {};
      entries.droppables = {};
      subscribers.length = 0;
    }
    return {
      draggable: draggableAPI,
      droppable: droppableAPI,
      subscribe,
      clean
    };
  }

  function useRegistry() {
    const registry = useMemoOne.useMemo(createRegistry, []);
    React.useEffect(() => {
      return function unmount() {
        if (React__default["default"].version.startsWith('16') || React__default["default"].version.startsWith('17')) {
          requestAnimationFrame(registry.clean);
        } else {
          registry.clean();
        }
      };
    }, [registry]);
    return registry;
  }

  var StoreContext = React__default["default"].createContext(null);

  var getBodyElement = (() => {
    const body = document.body;
    !body ? invariant(false, 'Cannot find document.body')  : void 0;
    return body;
  });

  const visuallyHidden = {
    position: 'absolute',
    width: '1px',
    height: '1px',
    margin: '-1px',
    border: '0',
    padding: '0',
    overflow: 'hidden',
    clip: 'rect(0 0 0 0)',
    'clip-path': 'inset(100%)'
  };
  var visuallyHidden$1 = visuallyHidden;

  const getId = contextId => `rfd-announcement-${contextId}`;
  function useAnnouncer(contextId) {
    const id = useMemoOne.useMemo(() => getId(contextId), [contextId]);
    const ref = React.useRef(null);
    React.useEffect(function setup() {
      const el = document.createElement('div');
      ref.current = el;

      el.id = id;

      el.setAttribute('aria-live', 'assertive');
      el.setAttribute('aria-atomic', 'true');

      _extends__default["default"](el.style, visuallyHidden$1);

      getBodyElement().appendChild(el);
      return function cleanup() {

        setTimeout(function remove() {
          const body = getBodyElement();
          if (body.contains(el)) {
            body.removeChild(el);
          }
          if (el === ref.current) {
            ref.current = null;
          }
        });
      };
    }, [id]);
    const announce = useMemoOne.useCallback(message => {
      const el = ref.current;
      if (el) {
        el.textContent = message;
        return;
      }
      warning(`
      A screen reader message was trying to be announced but it was unable to do so.
      This can occur if you unmount your <DragDropContext /> in your onDragEnd.
      Consider calling provided.announce() before the unmount so that the instruction will
      not be lost for users relying on a screen reader.

      Message not passed to screen reader:

      "${message}"
    `) ;
    }, []);
    return announce;
  }

  let count$1 = 0;
  const defaults$2 = {
    separator: '::'
  };
  function resetDeprecatedUniqueId() {
    count$1 = 0;
  }
  function useDeprecatedUniqueId(prefix, options) {
    if (options === void 0) {
      options = defaults$2;
    }
    return useMemoOne.useMemo(() => `${prefix}${options.separator}${count$1++}`, [options.separator, prefix]);
  }
  function useUniqueId(prefix, options) {
    if (options === void 0) {
      options = defaults$2;
    }
    const id = React__default["default"].useId();
    return useMemoOne.useMemo(() => `${prefix}${options.separator}${id}`, [options.separator, prefix, id]);
  }

  var useUniqueId$1 = 'useId' in React__default["default"] ? useUniqueId : useDeprecatedUniqueId;

  function getElementId(_ref) {
    let {
      contextId,
      uniqueId
    } = _ref;
    return `rfd-hidden-text-${contextId}-${uniqueId}`;
  }
  function useHiddenTextElement(_ref2) {
    let {
      contextId,
      text
    } = _ref2;
    const uniqueId = useUniqueId$1('hidden-text', {
      separator: '-'
    });
    const id = useMemoOne.useMemo(() => getElementId({
      contextId,
      uniqueId
    }), [uniqueId, contextId]);
    React.useEffect(function mount() {
      const el = document.createElement('div');

      el.id = id;

      el.textContent = text;

      el.style.display = 'none';

      getBodyElement().appendChild(el);
      return function unmount() {
        const body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
      };
    }, [id, text]);
    return id;
  }

  var AppContext = React__default["default"].createContext(null);

  var peerDependencies = {
  	react: "^16.8.5 || ^17.0.0 || ^18.0.0",
  	"react-dom": "^16.8.5 || ^17.0.0 || ^18.0.0"
  };

  const semver = /(\d+)\.(\d+)\.(\d+)/;
  const getVersion = value => {
    const result = semver.exec(value);
    !(result != null) ? invariant(false, `Unable to parse React version ${value}`)  : void 0;
    const major = Number(result[1]);
    const minor = Number(result[2]);
    const patch = Number(result[3]);
    return {
      major,
      minor,
      patch,
      raw: value
    };
  };
  const isSatisfied = (expected, actual) => {
    if (actual.major > expected.major) {
      return true;
    }
    if (actual.major < expected.major) {
      return false;
    }

    if (actual.minor > expected.minor) {
      return true;
    }
    if (actual.minor < expected.minor) {
      return false;
    }

    return actual.patch >= expected.patch;
  };
  var checkReactVersion = ((peerDepValue, actualValue) => {
    const peerDep = getVersion(peerDepValue);
    const actual = getVersion(actualValue);
    if (isSatisfied(peerDep, actual)) {
      return;
    }
    warning(`
    React version: [${actual.raw}]
    does not satisfy expected peer dependency version: [${peerDep.raw}]

    This can result in run time bugs, and even fatal crashes
  `) ;
  });

  const suffix = `
  We expect a html5 doctype: <!doctype html>
  This is to ensure consistent browser layout and measurement

  More information: https://github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
`;
  var checkDoctype = (doc => {
    const doctype = doc.doctype;
    if (!doctype) {
      warning(`
      No <!doctype html> found.

      ${suffix}
    `) ;
      return;
    }
    if (doctype.name.toLowerCase() !== 'html') {
      warning(`
      Unexpected <!doctype> found: (${doctype.name})

      ${suffix}
    `) ;
    }
    if (doctype.publicId !== '') {
      warning(`
      Unexpected <!doctype> publicId found: (${doctype.publicId})
      A html5 doctype does not have a publicId

      ${suffix}
    `) ;
    }
  });

  function useDev(useHook) {
    {
      useHook();
    }
  }

  function useDevSetupWarning(fn, inputs) {
    useDev(() => {
      React.useEffect(() => {
        try {
          fn();
        } catch (e) {
          error(`
          A setup problem was encountered.

          > ${e.message}
        `);
        }
      }, inputs);
    });
  }

  function useStartupValidation() {
    useDevSetupWarning(() => {
      checkReactVersion(peerDependencies.react, React__default["default"].version);
      checkDoctype(document);
    }, []);
  }

  function usePrevious(current) {
    const ref = React.useRef(current);

    React.useEffect(() => {
      ref.current = current;
    });

    return ref;
  }

  function create() {
    let lock = null;
    function isClaimed() {
      return Boolean(lock);
    }
    function isActive(value) {
      return value === lock;
    }
    function claim(abandon) {
      !!lock ? invariant(false, 'Cannot claim lock as it is already claimed')  : void 0;
      const newLock = {
        abandon
      };
      lock = newLock;
      return newLock;
    }
    function release() {
      !lock ? invariant(false, 'Cannot release lock when there is no lock')  : void 0;
      lock = null;
    }
    function tryAbandon() {
      if (lock) {
        lock.abandon();
        release();
      }
    }
    return {
      isClaimed,
      isActive,
      claim,
      release,
      tryAbandon
    };
  }

  function isDragging(state) {
    if (state.phase === 'IDLE' || state.phase === 'DROP_ANIMATING') {
      return false;
    }
    return state.isDragging;
  }

  const tab = 9;
  const enter = 13;
  const escape$2 = 27;
  const space = 32;
  const pageUp = 33;
  const pageDown = 34;
  const end = 35;
  const home = 36;
  const arrowLeft = 37;
  const arrowUp = 38;
  const arrowRight = 39;
  const arrowDown = 40;

  const preventedKeys = {
    [enter]: true,
    [tab]: true
  };
  var preventStandardKeyEvents = (event => {
    if (preventedKeys[event.keyCode]) {
      event.preventDefault();
    }
  });

  const supportedEventName = (() => {
    const base = 'visibilitychange';

    if (typeof document === 'undefined') {
      return base;
    }

    const candidates = [base, `ms${base}`, `webkit${base}`, `moz${base}`, `o${base}`];
    const supported = candidates.find(eventName => `on${eventName}` in document);
    return supported || base;
  })();
  var supportedPageVisibilityEventName = supportedEventName;

  const primaryButton = 0;
  const sloppyClickThreshold = 5;
  function isSloppyClickThresholdExceeded(original, current) {
    return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
  }
  const idle$1 = {
    type: 'IDLE'
  };
  function getCaptureBindings(_ref) {
    let {
      cancel,
      completed,
      getPhase,
      setPhase
    } = _ref;
    return [{
      eventName: 'mousemove',
      fn: event => {
        const {
          button,
          clientX,
          clientY
        } = event;
        if (button !== primaryButton) {
          return;
        }
        const point = {
          x: clientX,
          y: clientY
        };
        const phase = getPhase();

        if (phase.type === 'DRAGGING') {
          event.preventDefault();
          phase.actions.move(point);
          return;
        }

        !(phase.type === 'PENDING') ? invariant(false, 'Cannot be IDLE')  : void 0;
        const pending = phase.point;

        if (!isSloppyClickThresholdExceeded(pending, point)) {
          return;
        }

        event.preventDefault();

        const actions = phase.actions.fluidLift(point);
        setPhase({
          type: 'DRAGGING',
          actions
        });
      }
    }, {
      eventName: 'mouseup',
      fn: event => {
        const phase = getPhase();
        if (phase.type !== 'DRAGGING') {
          cancel();
          return;
        }

        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: 'mousedown',
      fn: event => {
        if (getPhase().type === 'DRAGGING') {
          event.preventDefault();
        }
        cancel();
      }
    }, {
      eventName: 'keydown',
      fn: event => {
        const phase = getPhase();
        if (phase.type === 'PENDING') {
          cancel();
          return;
        }

        if (event.keyCode === escape$2) {
          event.preventDefault();
          cancel();
          return;
        }
        preventStandardKeyEvents(event);
      }
    }, {
      eventName: 'resize',
      fn: cancel
    }, {
      eventName: 'scroll',
      options: {
        passive: true,
        capture: false
      },
      fn: () => {
        if (getPhase().type === 'PENDING') {
          cancel();
        }
      }
    },
    {
      eventName: 'webkitmouseforcedown',
      fn: event => {
        const phase = getPhase();
        !(phase.type !== 'IDLE') ? invariant(false, 'Unexpected phase')  : void 0;
        if (phase.actions.shouldRespectForcePress()) {
          cancel();
          return;
        }

        event.preventDefault();
      }
    },
    {
      eventName: supportedPageVisibilityEventName,
      fn: cancel
    }];
  }
  function useMouseSensor(api) {
    const phaseRef = React.useRef(idle$1);
    const unbindEventsRef = React.useRef(noop$2);
    const startCaptureBinding = useMemoOne.useMemo(() => ({
      eventName: 'mousedown',
      fn: function onMouseDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== primaryButton) {
          return;
        }

        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
          return;
        }
        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const actions = api.tryGetLock(draggableId,
        stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }

        event.preventDefault();
        const point = {
          x: event.clientX,
          y: event.clientY
        };

        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    }),
    [api]);
    const preventForcePressBinding = useMemoOne.useMemo(() => ({
      eventName: 'webkitmouseforcewillbegin',
      fn: event => {
        if (event.defaultPrevented) {
          return;
        }
        const id = api.findClosestDraggableId(event);
        if (!id) {
          return;
        }
        const options = api.findOptionsForDraggable(id);
        if (!options) {
          return;
        }
        if (options.shouldRespectForcePress) {
          return;
        }
        if (!api.canGetLock(id)) {
          return;
        }
        event.preventDefault();
      }
    }), [api]);
    const listenForCapture = useMemoOne.useCallback(function listenForCapture() {
      const options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
    }, [preventForcePressBinding, startCaptureBinding]);
    const stop = useMemoOne.useCallback(() => {
      const current = phaseRef.current;
      if (current.type === 'IDLE') {
        return;
      }
      phaseRef.current = idle$1;
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture]);
    const cancel = useMemoOne.useCallback(() => {
      const phase = phaseRef.current;
      stop();
      if (phase.type === 'DRAGGING') {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === 'PENDING') {
        phase.actions.abort();
      }
    }, [stop]);
    const bindCapturingEvents = useMemoOne.useCallback(function bindCapturingEvents() {
      const options = {
        capture: true,
        passive: false
      };
      const bindings = getCaptureBindings({
        cancel,
        completed: stop,
        getPhase: () => phaseRef.current,
        setPhase: phase => {
          phaseRef.current = phase;
        }
      });
      unbindEventsRef.current = bindEvents(window, bindings, options);
    }, [cancel, stop]);
    const startPendingDrag = useMemoOne.useCallback(function startPendingDrag(actions, point) {
      !(phaseRef.current.type === 'IDLE') ? invariant(false, 'Expected to move from IDLE to PENDING drag')  : void 0;
      phaseRef.current = {
        type: 'PENDING',
        point,
        actions
      };
      bindCapturingEvents();
    }, [bindCapturingEvents]);
    useLayoutEffect(function mount() {
      listenForCapture();

      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }

  function noop$1() {}
  const scrollJumpKeys = {
    [pageDown]: true,
    [pageUp]: true,
    [home]: true,
    [end]: true
  };
  function getDraggingBindings(actions, stop) {
    function cancel() {
      stop();
      actions.cancel();
    }
    function drop() {
      stop();
      actions.drop();
    }
    return [{
      eventName: 'keydown',
      fn: event => {
        if (event.keyCode === escape$2) {
          event.preventDefault();
          cancel();
          return;
        }

        if (event.keyCode === space) {
          event.preventDefault();
          drop();
          return;
        }

        if (event.keyCode === arrowDown) {
          event.preventDefault();
          actions.moveDown();
          return;
        }
        if (event.keyCode === arrowUp) {
          event.preventDefault();
          actions.moveUp();
          return;
        }
        if (event.keyCode === arrowRight) {
          event.preventDefault();
          actions.moveRight();
          return;
        }
        if (event.keyCode === arrowLeft) {
          event.preventDefault();
          actions.moveLeft();
          return;
        }

        if (scrollJumpKeys[event.keyCode]) {
          event.preventDefault();
          return;
        }
        preventStandardKeyEvents(event);
      }
    },
    {
      eventName: 'mousedown',
      fn: cancel
    }, {
      eventName: 'mouseup',
      fn: cancel
    }, {
      eventName: 'click',
      fn: cancel
    }, {
      eventName: 'touchstart',
      fn: cancel
    },
    {
      eventName: 'resize',
      fn: cancel
    },
    {
      eventName: 'wheel',
      fn: cancel,
      options: {
        passive: true
      }
    },
    {
      eventName: supportedPageVisibilityEventName,
      fn: cancel
    }];
  }
  function useKeyboardSensor(api) {
    const unbindEventsRef = React.useRef(noop$1);
    const startCaptureBinding = useMemoOne.useMemo(() => ({
      eventName: 'keydown',
      fn: function onKeyDown(event) {
        if (event.defaultPrevented) {
          return;
        }

        if (event.keyCode !== space) {
          return;
        }
        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const preDrag = api.tryGetLock(draggableId,
        stop, {
          sourceEvent: event
        });

        if (!preDrag) {
          return;
        }

        event.preventDefault();
        let isCapturing = true;

        const actions = preDrag.snapLift();

        unbindEventsRef.current();

        function stop() {
          !isCapturing ? invariant(false, 'Cannot stop capturing a keyboard drag when not capturing')  : void 0;
          isCapturing = false;

          unbindEventsRef.current();
          listenForCapture();
        }

        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
          capture: true,
          passive: false
        });
      }
    }),
    [api]);
    const listenForCapture = useMemoOne.useCallback(function tryStartCapture() {
      const options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    useLayoutEffect(function mount() {
      listenForCapture();

      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }

  const idle = {
    type: 'IDLE'
  };
  const timeForLongPress = 120;
  const forcePressThreshold = 0.15;
  function getWindowBindings(_ref) {
    let {
      cancel,
      getPhase
    } = _ref;
    return [
    {
      eventName: 'orientationchange',
      fn: cancel
    },
    {
      eventName: 'resize',
      fn: cancel
    },
    {
      eventName: 'contextmenu',
      fn: event => {
        event.preventDefault();
      }
    },
    {
      eventName: 'keydown',
      fn: event => {
        if (getPhase().type !== 'DRAGGING') {
          cancel();
          return;
        }

        if (event.keyCode === escape$2) {
          event.preventDefault();
        }
        cancel();
      }
    },
    {
      eventName: supportedPageVisibilityEventName,
      fn: cancel
    }];
  }

  function getHandleBindings(_ref2) {
    let {
      cancel,
      completed,
      getPhase
    } = _ref2;
    return [{
      eventName: 'touchmove',
      options: {
        capture: false
      },
      fn: event => {
        const phase = getPhase();
        if (phase.type !== 'DRAGGING') {
          cancel();
          return;
        }

        phase.hasMoved = true;
        const {
          clientX,
          clientY
        } = event.touches[0];
        const point = {
          x: clientX,
          y: clientY
        };

        event.preventDefault();
        phase.actions.move(point);
      }
    }, {
      eventName: 'touchend',
      fn: event => {
        const phase = getPhase();
        if (phase.type !== 'DRAGGING') {
          cancel();
          return;
        }

        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: 'touchcancel',
      fn: event => {
        if (getPhase().type !== 'DRAGGING') {
          cancel();
          return;
        }

        event.preventDefault();
        cancel();
      }
    },
    {
      eventName: 'touchforcechange',
      fn: event => {
        const phase = getPhase();

        !(phase.type !== 'IDLE') ? invariant(false)  : void 0;

        const touch = event.touches[0];
        if (!touch) {
          return;
        }
        const isForcePress = touch.force >= forcePressThreshold;
        if (!isForcePress) {
          return;
        }
        const shouldRespect = phase.actions.shouldRespectForcePress();
        if (phase.type === 'PENDING') {
          if (shouldRespect) {
            cancel();
          }
          return;
        }

        if (shouldRespect) {
          if (phase.hasMoved) {
            event.preventDefault();
            return;
          }
          cancel();
          return;
        }

        event.preventDefault();
      }
    },
    {
      eventName: supportedPageVisibilityEventName,
      fn: cancel
    }
    ];
  }

  function useTouchSensor(api) {
    const phaseRef = React.useRef(idle);
    const unbindEventsRef = React.useRef(noop$2);
    const getPhase = useMemoOne.useCallback(function getPhase() {
      return phaseRef.current;
    }, []);
    const setPhase = useMemoOne.useCallback(function setPhase(phase) {
      phaseRef.current = phase;
    }, []);
    const startCaptureBinding = useMemoOne.useMemo(() => ({
      eventName: 'touchstart',
      fn: function onTouchStart(event) {
        if (event.defaultPrevented) {
          return;
        }

        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const actions = api.tryGetLock(draggableId,
        stop, {
          sourceEvent: event
        });

        if (!actions) {
          return;
        }
        const touch = event.touches[0];
        const {
          clientX,
          clientY
        } = touch;
        const point = {
          x: clientX,
          y: clientY
        };

        unbindEventsRef.current();

        startPendingDrag(actions, point);
      }
    }),
    [api]);
    const listenForCapture = useMemoOne.useCallback(function listenForCapture() {
      const options = {
        capture: true,
        passive: false
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    const stop = useMemoOne.useCallback(() => {
      const current = phaseRef.current;
      if (current.type === 'IDLE') {
        return;
      }

      if (current.type === 'PENDING') {
        clearTimeout(current.longPressTimerId);
      }
      setPhase(idle);
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture, setPhase]);
    const cancel = useMemoOne.useCallback(() => {
      const phase = phaseRef.current;
      stop();
      if (phase.type === 'DRAGGING') {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === 'PENDING') {
        phase.actions.abort();
      }
    }, [stop]);
    const bindCapturingEvents = useMemoOne.useCallback(function bindCapturingEvents() {
      const options = {
        capture: true,
        passive: false
      };
      const args = {
        cancel,
        completed: stop,
        getPhase
      };

      const unbindTarget = bindEvents(window, getHandleBindings(args), options);
      const unbindWindow = bindEvents(window, getWindowBindings(args), options);
      unbindEventsRef.current = function unbindAll() {
        unbindTarget();
        unbindWindow();
      };
    }, [cancel, getPhase, stop]);
    const startDragging = useMemoOne.useCallback(function startDragging() {
      const phase = getPhase();
      !(phase.type === 'PENDING') ? invariant(false, `Cannot start dragging from phase ${phase.type}`)  : void 0;
      const actions = phase.actions.fluidLift(phase.point);
      setPhase({
        type: 'DRAGGING',
        actions,
        hasMoved: false
      });
    }, [getPhase, setPhase]);
    const startPendingDrag = useMemoOne.useCallback(function startPendingDrag(actions, point) {
      !(getPhase().type === 'IDLE') ? invariant(false, 'Expected to move from IDLE to PENDING drag')  : void 0;
      const longPressTimerId = setTimeout(startDragging, timeForLongPress);
      setPhase({
        type: 'PENDING',
        point,
        actions,
        longPressTimerId
      });
      bindCapturingEvents();
    }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
    useLayoutEffect(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();

        const phase = getPhase();
        if (phase.type === 'PENDING') {
          clearTimeout(phase.longPressTimerId);
          setPhase(idle);
        }
      };
    }, [getPhase, listenForCapture, setPhase]);

    useLayoutEffect(function webkitHack() {
      const unbind = bindEvents(window, [{
        eventName: 'touchmove',
        fn: () => {},
        options: {
          capture: false,
          passive: false
        }
      }]);
      return unbind;
    }, []);
  }

  function useValidateSensorHooks(sensorHooks) {
    useDev(() => {
      const previousRef = usePrevious(sensorHooks);
      useDevSetupWarning(() => {
        !(previousRef.current.length === sensorHooks.length) ? "development" !== "production" ? invariant(false, 'Cannot change the amount of sensor hooks after mounting') : invariant(false) : void 0;
      });
    });
  }

  const interactiveTagNames = ['input', 'button', 'textarea', 'select', 'option', 'optgroup', 'video', 'audio'];
  function isAnInteractiveElement(parent, current) {
    if (current == null) {
      return false;
    }

    const hasAnInteractiveTag = interactiveTagNames.includes(current.tagName.toLowerCase());
    if (hasAnInteractiveTag) {
      return true;
    }

    const attribute = current.getAttribute('contenteditable');
    if (attribute === 'true' || attribute === '') {
      return true;
    }

    if (current === parent) {
      return false;
    }

    return isAnInteractiveElement(parent, current.parentElement);
  }
  function isEventInInteractiveElement(draggable, event) {
    const target = event.target;
    if (!isHtmlElement(target)) {
      return false;
    }
    return isAnInteractiveElement(draggable, target);
  }

  var getBorderBoxCenterPosition = (el => cssBoxModel.getRect(el.getBoundingClientRect()).center);

  function isElement(el) {
    return el instanceof getWindowFromEl(el).Element;
  }

  const supportedMatchesName = (() => {
    const base = 'matches';

    if (typeof document === 'undefined') {
      return base;
    }

    const candidates = [base, 'msMatchesSelector', 'webkitMatchesSelector'];
    const value = candidates.find(name => name in Element.prototype);
    return value || base;
  })();
  function closestPonyfill(el, selector) {
    if (el == null) {
      return null;
    }

    if (el[supportedMatchesName](selector)) {
      return el;
    }

    return closestPonyfill(el.parentElement, selector);
  }
  function closest(el, selector) {
    if (el.closest) {
      return el.closest(selector);
    }
    return closestPonyfill(el, selector);
  }

  function getSelector(contextId) {
    return `[${dragHandle.contextId}="${contextId}"]`;
  }
  function findClosestDragHandleFromEvent(contextId, event) {
    const target = event.target;
    if (!isElement(target)) {
      warning('event.target must be a Element') ;
      return null;
    }
    const selector = getSelector(contextId);
    const handle = closest(target, selector);
    if (!handle) {
      return null;
    }
    if (!isHtmlElement(handle)) {
      warning('drag handle must be a HTMLElement') ;
      return null;
    }
    return handle;
  }
  function tryGetClosestDraggableIdFromEvent(contextId, event) {
    const handle = findClosestDragHandleFromEvent(contextId, event);
    if (!handle) {
      return null;
    }
    return handle.getAttribute(dragHandle.draggableId);
  }

  function findDraggable(contextId, draggableId) {
    const selector = `[${draggable.contextId}="${contextId}"]`;
    const possible = querySelectorAll(document, selector);
    const draggable$1 = possible.find(el => {
      return el.getAttribute(draggable.id) === draggableId;
    });
    if (!draggable$1) {
      return null;
    }
    if (!isHtmlElement(draggable$1)) {
      warning('Draggable element is not a HTMLElement') ;
      return null;
    }
    return draggable$1;
  }

  function preventDefault(event) {
    event.preventDefault();
  }
  function isActive(_ref) {
    let {
      expected,
      phase,
      isLockActive,
      shouldWarn
    } = _ref;
    if (!isLockActive()) {
      if (shouldWarn) {
        warning(`
        Cannot perform action.
        The sensor no longer has an action lock.

        Tips:

        - Throw away your action handlers when forceStop() is called
        - Check actions.isActive() if you really need to
      `) ;
      }
      return false;
    }
    if (expected !== phase) {
      if (shouldWarn) {
        warning(`
        Cannot perform action.
        The actions you used belong to an outdated phase

        Current phase: ${expected}
        You called an action from outdated phase: ${phase}

        Tips:

        - Do not use preDragActions actions after calling preDragActions.lift()
      `) ;
      }
      return false;
    }
    return true;
  }
  function canStart(_ref2) {
    let {
      lockAPI,
      store,
      registry,
      draggableId
    } = _ref2;
    if (lockAPI.isClaimed()) {
      return false;
    }
    const entry = registry.draggable.findById(draggableId);
    if (!entry) {
      warning(`Unable to find draggable with id: ${draggableId}`) ;
      return false;
    }

    if (!entry.options.isEnabled) {
      return false;
    }

    if (!canStartDrag(store.getState(), draggableId)) {
      return false;
    }
    return true;
  }
  function tryStart(_ref3) {
    let {
      lockAPI,
      contextId,
      store,
      registry,
      draggableId,
      forceSensorStop,
      sourceEvent
    } = _ref3;
    const shouldStart = canStart({
      lockAPI,
      store,
      registry,
      draggableId
    });
    if (!shouldStart) {
      return null;
    }
    const entry = registry.draggable.getById(draggableId);
    const el = findDraggable(contextId, entry.descriptor.id);
    if (!el) {
      warning(`Unable to find draggable element with id: ${draggableId}`) ;
      return null;
    }

    if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
      return null;
    }

    const lock = lockAPI.claim(forceSensorStop || noop$2);
    let phase = 'PRE_DRAG';
    function getShouldRespectForcePress() {
      return entry.options.shouldRespectForcePress;
    }
    function isLockActive() {
      return lockAPI.isActive(lock);
    }
    function tryDispatch(expected, getAction) {
      if (isActive({
        expected,
        phase,
        isLockActive,
        shouldWarn: true
      })) {
        store.dispatch(getAction());
      }
    }
    const tryDispatchWhenDragging = tryDispatch.bind(null, 'DRAGGING');
    function lift(args) {
      function completed() {
        lockAPI.release();
        phase = 'COMPLETED';
      }
      if (phase !== 'PRE_DRAG') {
        completed();
        invariant(false, `Cannot lift in phase ${phase}`)  ;
      }
      store.dispatch(lift$1(args.liftActionArgs));

      phase = 'DRAGGING';
      function finish(reason, options) {
        if (options === void 0) {
          options = {
            shouldBlockNextClick: false
          };
        }
        args.cleanup();

        if (options.shouldBlockNextClick) {
          const unbind = bindEvents(window, [{
            eventName: 'click',
            fn: preventDefault,
            options: {
              once: true,
              passive: false,
              capture: true
            }
          }]);
          setTimeout(unbind);
        }

        completed();
        store.dispatch(drop$1({
          reason
        }));
      }
      return {
        isActive: () => isActive({
          expected: 'DRAGGING',
          phase,
          isLockActive,
          shouldWarn: false
        }),
        shouldRespectForcePress: getShouldRespectForcePress,
        drop: options => finish('DROP', options),
        cancel: options => finish('CANCEL', options),
        ...args.actions
      };
    }
    function fluidLift(clientSelection) {
      const move$1 = rafSchd__default["default"](client => {
        tryDispatchWhenDragging(() => move({
          client
        }));
      });
      const api = lift({
        liftActionArgs: {
          id: draggableId,
          clientSelection,
          movementMode: 'FLUID'
        },
        cleanup: () => move$1.cancel(),
        actions: {
          move: move$1
        }
      });
      return {
        ...api,
        move: move$1
      };
    }
    function snapLift() {
      const actions = {
        moveUp: () => tryDispatchWhenDragging(moveUp),
        moveRight: () => tryDispatchWhenDragging(moveRight),
        moveDown: () => tryDispatchWhenDragging(moveDown),
        moveLeft: () => tryDispatchWhenDragging(moveLeft)
      };
      return lift({
        liftActionArgs: {
          id: draggableId,
          clientSelection: getBorderBoxCenterPosition(el),
          movementMode: 'SNAP'
        },
        cleanup: noop$2,
        actions
      });
    }
    function abortPreDrag() {
      const shouldRelease = isActive({
        expected: 'PRE_DRAG',
        phase,
        isLockActive,
        shouldWarn: true
      });
      if (shouldRelease) {
        lockAPI.release();
      }
    }
    const preDrag = {
      isActive: () => isActive({
        expected: 'PRE_DRAG',
        phase,
        isLockActive,
        shouldWarn: false
      }),
      shouldRespectForcePress: getShouldRespectForcePress,
      fluidLift,
      snapLift,
      abort: abortPreDrag
    };
    return preDrag;
  }
  const defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
  function useSensorMarshal(_ref4) {
    let {
      contextId,
      store,
      registry,
      customSensors,
      enableDefaultSensors
    } = _ref4;
    const useSensors = [...(enableDefaultSensors ? defaultSensors : []), ...(customSensors || [])];
    const lockAPI = React.useState(() => create())[0];
    const tryAbandonLock = useMemoOne.useCallback(function tryAbandonLock(previous, current) {
      if (isDragging(previous) && !isDragging(current)) {
        lockAPI.tryAbandon();
      }
    }, [lockAPI]);

    useLayoutEffect(function listenToStore() {
      let previous = store.getState();
      const unsubscribe = store.subscribe(() => {
        const current = store.getState();
        tryAbandonLock(previous, current);
        previous = current;
      });

      return unsubscribe;
    }, [lockAPI, store, tryAbandonLock]);

    useLayoutEffect(() => {
      return lockAPI.tryAbandon;
    }, [lockAPI.tryAbandon]);
    const canGetLock = useMemoOne.useCallback(draggableId => {
      return canStart({
        lockAPI,
        registry,
        store,
        draggableId
      });
    }, [lockAPI, registry, store]);
    const tryGetLock = useMemoOne.useCallback((draggableId, forceStop, options) => tryStart({
      lockAPI,
      registry,
      contextId,
      store,
      draggableId,
      forceSensorStop: forceStop || null,
      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
    }), [contextId, lockAPI, registry, store]);
    const findClosestDraggableId = useMemoOne.useCallback(event => tryGetClosestDraggableIdFromEvent(contextId, event), [contextId]);
    const findOptionsForDraggable = useMemoOne.useCallback(id => {
      const entry = registry.draggable.findById(id);
      return entry ? entry.options : null;
    }, [registry.draggable]);
    const tryReleaseLock = useMemoOne.useCallback(function tryReleaseLock() {
      if (!lockAPI.isClaimed()) {
        return;
      }
      lockAPI.tryAbandon();
      if (store.getState().phase !== 'IDLE') {
        store.dispatch(flush());
      }
    }, [lockAPI, store]);
    const isLockClaimed = useMemoOne.useCallback(() => lockAPI.isClaimed(), [lockAPI]);
    const api = useMemoOne.useMemo(() => ({
      canGetLock,
      tryGetLock,
      findClosestDraggableId,
      findOptionsForDraggable,
      tryReleaseLock,
      isLockClaimed
    }), [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);

    useValidateSensorHooks(useSensors);
    for (let i = 0; i < useSensors.length; i++) {
      useSensors[i](api);
    }
  }

  const createResponders = props => ({
    onBeforeCapture: t => {
      const onBeforeCapureCallback = () => {
        if (props.onBeforeCapture) {
          props.onBeforeCapture(t);
        }
      };
      if (React__default["default"].version.startsWith('16') || React__default["default"].version.startsWith('17')) {
        onBeforeCapureCallback();
      } else {
        ReactDOM.flushSync(onBeforeCapureCallback);
      }
    },
    onBeforeDragStart: props.onBeforeDragStart,
    onDragStart: props.onDragStart,
    onDragEnd: props.onDragEnd,
    onDragUpdate: props.onDragUpdate
  });
  const createAutoScrollerOptions = props => ({
    ...defaultAutoScrollerOptions,
    ...props.autoScrollerOptions,
    durationDampening: {
      ...defaultAutoScrollerOptions.durationDampening,
      ...props.autoScrollerOptions
    }
  });
  function getStore(lazyRef) {
    !lazyRef.current ? invariant(false, 'Could not find store from lazy ref')  : void 0;
    return lazyRef.current;
  }
  function App$1(props) {
    const {
      contextId,
      setCallbacks,
      sensors,
      nonce,
      dragHandleUsageInstructions
    } = props;
    const lazyStoreRef = React.useRef(null);
    useStartupValidation();

    const lastPropsRef = usePrevious(props);
    const getResponders = useMemoOne.useCallback(() => {
      return createResponders(lastPropsRef.current);
    }, [lastPropsRef]);
    const getAutoScrollerOptions = useMemoOne.useCallback(() => {
      return createAutoScrollerOptions(lastPropsRef.current);
    }, [lastPropsRef]);
    const announce = useAnnouncer(contextId);
    const dragHandleUsageInstructionsId = useHiddenTextElement({
      contextId,
      text: dragHandleUsageInstructions
    });
    const styleMarshal = useStyleMarshal(contextId, nonce);
    const lazyDispatch = useMemoOne.useCallback(action => {
      getStore(lazyStoreRef).dispatch(action);
    }, []);
    const marshalCallbacks = useMemoOne.useMemo(() => redux.bindActionCreators({
      publishWhileDragging,
      updateDroppableScroll,
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      collectionStarting
    }, lazyDispatch), [lazyDispatch]);
    const registry = useRegistry();
    const dimensionMarshal = useMemoOne.useMemo(() => {
      return createDimensionMarshal(registry, marshalCallbacks);
    }, [registry, marshalCallbacks]);
    const autoScroller = useMemoOne.useMemo(() => createAutoScroller({
      scrollWindow,
      scrollDroppable: dimensionMarshal.scrollDroppable,
      getAutoScrollerOptions,
      ...redux.bindActionCreators({
        move
      }, lazyDispatch)
    }), [dimensionMarshal.scrollDroppable, lazyDispatch, getAutoScrollerOptions]);
    const focusMarshal = useFocusMarshal(contextId);
    const store = useMemoOne.useMemo(() => createStore$1({
      announce,
      autoScroller,
      dimensionMarshal,
      focusMarshal,
      getResponders,
      styleMarshal
    }), [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);

    {
      if (lazyStoreRef.current && lazyStoreRef.current !== store) {
        warning('unexpected store change') ;
      }
    }

    lazyStoreRef.current = store;
    const tryResetStore = useMemoOne.useCallback(() => {
      const current = getStore(lazyStoreRef);
      const state = current.getState();
      if (state.phase !== 'IDLE') {
        current.dispatch(flush());
      }
    }, []);
    const isDragging = useMemoOne.useCallback(() => {
      const state = getStore(lazyStoreRef).getState();
      if (state.phase === 'DROP_ANIMATING') {
        return true;
      }
      if (state.phase === 'IDLE') {
        return false;
      }
      return state.isDragging;
    }, []);
    const appCallbacks = useMemoOne.useMemo(() => ({
      isDragging,
      tryAbort: tryResetStore
    }), [isDragging, tryResetStore]);

    setCallbacks(appCallbacks);
    const getCanLift = useMemoOne.useCallback(id => canStartDrag(getStore(lazyStoreRef).getState(), id), []);
    const getIsMovementAllowed = useMemoOne.useCallback(() => isMovementAllowed(getStore(lazyStoreRef).getState()), []);
    const appContext = useMemoOne.useMemo(() => ({
      marshal: dimensionMarshal,
      focus: focusMarshal,
      contextId,
      canLift: getCanLift,
      isMovementAllowed: getIsMovementAllowed,
      dragHandleUsageInstructionsId,
      registry
    }), [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
    useSensorMarshal({
      contextId,
      store,
      registry,
      customSensors: sensors || null,
      enableDefaultSensors: props.enableDefaultSensors !== false
    });

    React.useEffect(() => {
      return tryResetStore;
    }, [tryResetStore]);
    return React__default["default"].createElement(AppContext.Provider, {
      value: appContext
    }, React__default["default"].createElement(reactRedux.Provider, {
      context: StoreContext,
      store: store
    }, props.children));
  }

  let count = 0;
  function resetDeprecatedUniqueContextId() {
    count = 0;
  }
  function useDeprecatedUniqueContextId() {
    return useMemoOne.useMemo(() => `${count++}`, []);
  }
  function useUniqueContextId() {
    return React__default["default"].useId();
  }

  var useUniqueContextId$1 = 'useId' in React__default["default"] ? useUniqueContextId : useDeprecatedUniqueContextId;

  function resetServerContext() {
    if ('useId' in React__default["default"]) {
      warning(`It is not necessary to call resetServerContext when using React 18+`) ;
      return;
    }
    resetDeprecatedUniqueContextId();
    resetDeprecatedUniqueId();
  }
  function DragDropContext(props) {
    const contextId = useUniqueContextId$1();
    const dragHandleUsageInstructions = props.dragHandleUsageInstructions || preset$1.dragHandleUsageInstructions;

    return React__default["default"].createElement(ErrorBoundary, null, setCallbacks => React__default["default"].createElement(App$1, {
      nonce: props.nonce,
      contextId: contextId,
      setCallbacks: setCallbacks,
      dragHandleUsageInstructions: dragHandleUsageInstructions,
      enableDefaultSensors: props.enableDefaultSensors,
      sensors: props.sensors,
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragUpdate: props.onDragUpdate,
      onDragEnd: props.onDragEnd,
      autoScrollerOptions: props.autoScrollerOptions
    }, props.children));
  }

  const zIndexOptions = {
    dragging: 5000,
    dropAnimating: 4500
  };
  const getDraggingTransition = (shouldAnimateDragMovement, dropping) => {
    if (dropping) {
      return transitions.drop(dropping.duration);
    }
    if (shouldAnimateDragMovement) {
      return transitions.snap;
    }
    return transitions.fluid;
  };
  const getDraggingOpacity = (isCombining, isDropAnimating) => {
    if (!isCombining) {
      return undefined;
    }
    return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
  };
  const getShouldDraggingAnimate = dragging => {
    if (dragging.forceShouldAnimate != null) {
      return dragging.forceShouldAnimate;
    }
    return dragging.mode === 'SNAP';
  };
  function getDraggingStyle(dragging) {
    const dimension = dragging.dimension;
    const box = dimension.client;
    const {
      offset,
      combineWith,
      dropping
    } = dragging;
    const isCombining = Boolean(combineWith);
    const shouldAnimate = getShouldDraggingAnimate(dragging);
    const isDropAnimating = Boolean(dropping);
    const transform = isDropAnimating ? transforms.drop(offset, isCombining) : transforms.moveTo(offset);
    const style = {
      position: 'fixed',
      top: box.marginBox.top,
      left: box.marginBox.left,
      boxSizing: 'border-box',
      width: box.borderBox.width,
      height: box.borderBox.height,
      transition: getDraggingTransition(shouldAnimate, dropping),
      transform,
      opacity: getDraggingOpacity(isCombining, isDropAnimating),
      zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
      pointerEvents: 'none'
    };
    return style;
  }
  function getSecondaryStyle(secondary) {
    return {
      transform: transforms.moveTo(secondary.offset),
      transition: secondary.shouldAnimateDisplacement ? undefined : 'none'
    };
  }
  function getStyle$1(mapped) {
    return mapped.type === 'DRAGGING' ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
  }

  function getDimension$1(descriptor, el, windowScroll) {
    if (windowScroll === void 0) {
      windowScroll = origin;
    }
    const computedStyles = window.getComputedStyle(el);
    const borderBox = el.getBoundingClientRect();
    const client = cssBoxModel.calculateBox(borderBox, computedStyles);
    const page = cssBoxModel.withScroll(client, windowScroll);
    const placeholder = {
      client,
      tagName: el.tagName.toLowerCase(),
      display: computedStyles.display
    };
    const displaceBy = {
      x: client.marginBox.width,
      y: client.marginBox.height
    };
    const dimension = {
      descriptor,
      placeholder,
      displaceBy,
      client,
      page
    };
    return dimension;
  }

  function useDraggablePublisher(args) {
    const uniqueId = useUniqueId$1('draggable');
    const {
      descriptor,
      registry,
      getDraggableRef,
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    } = args;
    const options = useMemoOne.useMemo(() => ({
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    }), [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
    const getDimension = useMemoOne.useCallback(windowScroll => {
      const el = getDraggableRef();
      !el ? invariant(false, 'Cannot get dimension when no ref is set')  : void 0;
      return getDimension$1(descriptor, el, windowScroll);
    }, [descriptor, getDraggableRef]);
    const entry = useMemoOne.useMemo(() => ({
      uniqueId,
      descriptor,
      options,
      getDimension
    }), [descriptor, getDimension, options, uniqueId]);
    const publishedRef = React.useRef(entry);
    const isFirstPublishRef = React.useRef(true);

    useLayoutEffect(() => {
      registry.draggable.register(publishedRef.current);
      return () => registry.draggable.unregister(publishedRef.current);
    }, [registry.draggable]);

    useLayoutEffect(() => {
      if (isFirstPublishRef.current) {
        isFirstPublishRef.current = false;
        return;
      }
      const last = publishedRef.current;
      publishedRef.current = entry;
      registry.draggable.update(entry, last);
    }, [entry, registry.draggable]);
  }

  var DroppableContext = React__default["default"].createContext(null);

  function checkIsValidInnerRef(el) {
    !(el && isHtmlElement(el)) ? invariant(false, `
    provided.innerRef has not been provided with a HTMLElement.

    You can find a guide on using the innerRef callback functions at:
    https://github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
  `)  : void 0;
  }

  function useValidation$1(props, contextId, getRef) {
    useDevSetupWarning(() => {
      function prefix(id) {
        return `Draggable[id: ${id}]: `;
      }

      const id = props.draggableId;
      !id ? "development" !== "production" ? invariant(false, 'Draggable requires a draggableId') : invariant(false) : void 0;
      !(typeof id === 'string') ? "development" !== "production" ? invariant(false, `Draggable requires a [string] draggableId.
      Provided: [type: ${typeof id}] (value: ${id})`) : invariant(false) : void 0;
      !Number.isInteger(props.index) ? "development" !== "production" ? invariant(false, `${prefix(id)} requires an integer index prop`) : invariant(false) : void 0;
      if (props.mapped.type === 'DRAGGING') {
        return;
      }

      checkIsValidInnerRef(getRef());

      if (props.isEnabled) {
        !findDragHandle(contextId, id) ? "development" !== "production" ? invariant(false, `${prefix(id)} Unable to find drag handle`) : invariant(false) : void 0;
      }
    });
  }

  function useClonePropValidation(isClone) {
    useDev(() => {
      const initialRef = React.useRef(isClone);

      useDevSetupWarning(() => {
        !(isClone === initialRef.current) ? "development" !== "production" ? invariant(false, 'Draggable isClone prop value changed during component life') : invariant(false) : void 0;
      }, [isClone]);
    });
  }

  function useRequiredContext(Context) {
    const result = React.useContext(Context);
    !result ? invariant(false, 'Could not find required context')  : void 0;
    return result;
  }

  function preventHtml5Dnd(event) {
    event.preventDefault();
  }
  const Draggable = props => {
    const ref = React.useRef(null);
    const setRef = useMemoOne.useCallback(function (el) {
      if (el === void 0) {
        el = null;
      }
      ref.current = el;
    }, []);
    const getRef = useMemoOne.useCallback(() => ref.current, []);

    const {
      contextId,
      dragHandleUsageInstructionsId,
      registry
    } = useRequiredContext(AppContext);
    const {
      type,
      droppableId
    } = useRequiredContext(DroppableContext);
    const descriptor = useMemoOne.useMemo(() => ({
      id: props.draggableId,
      index: props.index,
      type,
      droppableId
    }), [props.draggableId, props.index, type, droppableId]);

    const {
      children,
      draggableId,
      isEnabled,
      shouldRespectForcePress,
      canDragInteractiveElements,
      isClone,
      mapped,
      dropAnimationFinished: dropAnimationFinishedAction
    } = props;

    useValidation$1(props, contextId, getRef);

    useClonePropValidation(isClone);
    if (!isClone) {
      const forPublisher = useMemoOne.useMemo(() => ({
        descriptor,
        registry,
        getDraggableRef: getRef,
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      }), [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
      useDraggablePublisher(forPublisher);
    }

    const dragHandleProps = useMemoOne.useMemo(() => isEnabled ? {
      tabIndex: 0,
      role: 'button',
      'aria-describedby': dragHandleUsageInstructionsId,
      'data-rfd-drag-handle-draggable-id': draggableId,
      'data-rfd-drag-handle-context-id': contextId,
      draggable: false,
      onDragStart: preventHtml5Dnd
    } : null, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
    const onMoveEnd = useMemoOne.useCallback(event => {
      if (mapped.type !== 'DRAGGING') {
        return;
      }
      if (!mapped.dropping) {
        return;
      }

      if (event.propertyName !== 'transform') {
        return;
      }
      if (React__default["default"].version.startsWith('16') || React__default["default"].version.startsWith('17')) {
        dropAnimationFinishedAction();
      } else {
        ReactDOM.flushSync(dropAnimationFinishedAction);
      }
    }, [dropAnimationFinishedAction, mapped]);
    const provided = useMemoOne.useMemo(() => {
      const style = getStyle$1(mapped);
      const onTransitionEnd = mapped.type === 'DRAGGING' && mapped.dropping ? onMoveEnd : undefined;
      const result = {
        innerRef: setRef,
        draggableProps: {
          'data-rfd-draggable-context-id': contextId,
          'data-rfd-draggable-id': draggableId,
          style,
          onTransitionEnd
        },
        dragHandleProps
      };
      return result;
    }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef]);
    const rubric = useMemoOne.useMemo(() => ({
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    }), [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
    return React__default["default"].createElement(React__default["default"].Fragment, null, children(provided, mapped.snapshot, rubric));
  };
  var Draggable$1 = Draggable;

  var isStrictEqual = ((a, b) => a === b);

  var whatIsDraggedOverFromResult = (result => {
    const {
      combine,
      destination
    } = result;
    if (destination) {
      return destination.droppableId;
    }
    if (combine) {
      return combine.droppableId;
    }
    return null;
  });

  const getCombineWithFromResult = result => {
    return result.combine ? result.combine.draggableId : null;
  };
  const getCombineWithFromImpact = impact => {
    return impact.at && impact.at.type === 'COMBINE' ? impact.at.combine.draggableId : null;
  };
  function getDraggableSelector() {
    const memoizedOffset = memoizeOne__default["default"]((x, y) => ({
      x,
      y
    }));
    const getMemoizedSnapshot = memoizeOne__default["default"](function (mode, isClone, draggingOver, combineWith, dropping) {
      if (draggingOver === void 0) {
        draggingOver = null;
      }
      if (combineWith === void 0) {
        combineWith = null;
      }
      if (dropping === void 0) {
        dropping = null;
      }
      return {
        isDragging: true,
        isClone,
        isDropAnimating: Boolean(dropping),
        dropAnimation: dropping,
        mode,
        draggingOver,
        combineWith,
        combineTargetFor: null
      };
    });
    const getMemoizedProps = memoizeOne__default["default"](function (offset, mode, dimension, isClone,
    draggingOver,
    combineWith, forceShouldAnimate) {
      if (draggingOver === void 0) {
        draggingOver = null;
      }
      if (combineWith === void 0) {
        combineWith = null;
      }
      if (forceShouldAnimate === void 0) {
        forceShouldAnimate = null;
      }
      return {
        mapped: {
          type: 'DRAGGING',
          dropping: null,
          draggingOver,
          combineWith,
          mode,
          offset,
          dimension,
          forceShouldAnimate,
          snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
        }
      };
    });
    const selector = (state, ownProps) => {
      if (isDragging(state)) {
        if (state.critical.draggable.id !== ownProps.draggableId) {
          return null;
        }
        const offset = state.current.client.offset;
        const dimension = state.dimensions.draggables[ownProps.draggableId];
        const draggingOver = whatIsDraggedOver(state.impact);
        const combineWith = getCombineWithFromImpact(state.impact);
        const forceShouldAnimate = state.forceShouldAnimate;
        return getMemoizedProps(memoizedOffset(offset.x, offset.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
      }

      if (state.phase === 'DROP_ANIMATING') {
        const completed = state.completed;
        if (completed.result.draggableId !== ownProps.draggableId) {
          return null;
        }
        const isClone = ownProps.isClone;
        const dimension = state.dimensions.draggables[ownProps.draggableId];
        const result = completed.result;
        const mode = result.mode;
        const draggingOver = whatIsDraggedOverFromResult(result);
        const combineWith = getCombineWithFromResult(result);
        const duration = state.dropDuration;

        const dropping = {
          duration,
          curve: curves.drop,
          moveTo: state.newHomeClientOffset,
          opacity: combineWith ? combine.opacity.drop : null,
          scale: combineWith ? combine.scale.drop : null
        };
        return {
          mapped: {
            type: 'DRAGGING',
            offset: state.newHomeClientOffset,
            dimension,
            dropping,
            draggingOver,
            combineWith,
            mode,
            forceShouldAnimate: null,
            snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, dropping)
          }
        };
      }
      return null;
    };
    return selector;
  }
  function getSecondarySnapshot(combineTargetFor) {
    if (combineTargetFor === void 0) {
      combineTargetFor = null;
    }
    return {
      isDragging: false,
      isDropAnimating: false,
      isClone: false,
      dropAnimation: null,
      mode: null,
      draggingOver: null,
      combineTargetFor,
      combineWith: null
    };
  }
  const atRest = {
    mapped: {
      type: 'SECONDARY',
      offset: origin,
      combineTargetFor: null,
      shouldAnimateDisplacement: true,
      snapshot: getSecondarySnapshot(null)
    }
  };
  function getSecondarySelector() {
    const memoizedOffset = memoizeOne__default["default"]((x, y) => ({
      x,
      y
    }));
    const getMemoizedSnapshot = memoizeOne__default["default"](getSecondarySnapshot);
    const getMemoizedProps = memoizeOne__default["default"](function (offset,
    combineTargetFor, shouldAnimateDisplacement) {
      if (combineTargetFor === void 0) {
        combineTargetFor = null;
      }
      return {
        mapped: {
          type: 'SECONDARY',
          offset,
          combineTargetFor,
          shouldAnimateDisplacement,
          snapshot: getMemoizedSnapshot(combineTargetFor)
        }
      };
    });

    const getFallback = combineTargetFor => {
      return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
    };
    const getProps = (ownId, draggingId, impact, afterCritical) => {
      const visualDisplacement = impact.displaced.visible[ownId];
      const isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
      const combine = tryGetCombine(impact);
      const combineTargetFor = combine && combine.draggableId === ownId ? draggingId : null;
      if (!visualDisplacement) {
        if (!isAfterCriticalInVirtualList) {
          return getFallback(combineTargetFor);
        }

        if (impact.displaced.invisible[ownId]) {
          return null;
        }

        const change = negate(afterCritical.displacedBy.point);
        const offset = memoizedOffset(change.x, change.y);
        return getMemoizedProps(offset, combineTargetFor, true);
      }
      if (isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      const displaceBy = impact.displacedBy.point;
      const offset = memoizedOffset(displaceBy.x, displaceBy.y);
      return getMemoizedProps(offset, combineTargetFor, visualDisplacement.shouldAnimate);
    };
    const selector = (state, ownProps) => {
      if (isDragging(state)) {
        if (state.critical.draggable.id === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
      }

      if (state.phase === 'DROP_ANIMATING') {
        const completed = state.completed;
        if (completed.result.draggableId === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
      }

      return null;
    };
    return selector;
  }

  const makeMapStateToProps$1 = () => {
    const draggingSelector = getDraggableSelector();
    const secondarySelector = getSecondarySelector();
    const selector = (state, ownProps) => draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
    return selector;
  };
  const mapDispatchToProps$1$1 = {
    dropAnimationFinished: dropAnimationFinished
  };

  const ConnectedDraggable = reactRedux.connect(
  makeMapStateToProps$1, mapDispatchToProps$1$1,
  null,
  {
    context: StoreContext,
    areStatePropsEqual: isStrictEqual
  }
  )(Draggable$1);
  var ConnectedDraggable$1 = ConnectedDraggable;

  function PrivateDraggable(props) {
    const droppableContext = useRequiredContext(DroppableContext);
    const isUsingCloneFor = droppableContext.isUsingCloneFor;
    if (isUsingCloneFor === props.draggableId && !props.isClone) {
      return null;
    }
    return React__default["default"].createElement(ConnectedDraggable$1, props);
  }

  function PublicDraggable(props) {
    const isEnabled = typeof props.isDragDisabled === 'boolean' ? !props.isDragDisabled : true;
    const canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
    const shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
    return React__default["default"].createElement(PrivateDraggable, _extends__default["default"]({}, props, {
      isClone: false,
      isEnabled: isEnabled,
      canDragInteractiveElements: canDragInteractiveElements,
      shouldRespectForcePress: shouldRespectForcePress
    }));
  }

  const isEqual = base => value => base === value;
  const isScroll = isEqual('scroll');
  const isAuto = isEqual('auto');
  const isVisible = isEqual('visible');
  const isEither = (overflow, fn) => fn(overflow.overflowX) || fn(overflow.overflowY);
  const isBoth = (overflow, fn) => fn(overflow.overflowX) && fn(overflow.overflowY);
  const isElementScrollable = el => {
    const style = window.getComputedStyle(el);
    const overflow = {
      overflowX: style.overflowX,
      overflowY: style.overflowY
    };
    return isEither(overflow, isScroll) || isEither(overflow, isAuto);
  };

  const isBodyScrollable = () => {
    const body = getBodyElement();
    const html = document.documentElement;
    !html ? invariant(false)  : void 0;

    if (!isElementScrollable(body)) {
      return false;
    }
    const htmlStyle = window.getComputedStyle(html);
    const htmlOverflow = {
      overflowX: htmlStyle.overflowX,
      overflowY: htmlStyle.overflowY
    };
    if (isBoth(htmlOverflow, isVisible)) {
      return false;
    }
    warning(`
    We have detected that your <body> element might be a scroll container.
    We have found no reliable way of detecting whether the <body> element is a scroll container.
    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)

    Because we cannot determine if the <body> is a scroll container, and generally it is not one,
    we will be treating the <body> as *not* a scroll container

    More information: https://github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
  `) ;
    return false;
  };
  const getClosestScrollable = el => {
    if (el == null) {
      return null;
    }

    if (el === document.body) {
      return isBodyScrollable() ? el : null;
    }

    if (el === document.documentElement) {
      return null;
    }
    if (!isElementScrollable(el)) {
      return getClosestScrollable(el.parentElement);
    }

    return el;
  };
  var getClosestScrollable$1 = getClosestScrollable;

  var checkForNestedScrollContainers = (scrollable => {
    if (!scrollable) {
      return;
    }
    const anotherScrollParent = getClosestScrollable$1(scrollable.parentElement);
    if (!anotherScrollParent) {
      return;
    }
    warning(`
    Droppable: unsupported nested scroll container detected.
    A Droppable can only have one scroll parent (which can be itself)
    Nested scroll containers are currently not supported.

    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131
  `) ;
  });

  var getScroll = (el => ({
    x: el.scrollLeft,
    y: el.scrollTop
  }));

  const getIsFixed = el => {
    if (!el) {
      return false;
    }
    const style = window.getComputedStyle(el);
    if (style.position === 'fixed') {
      return true;
    }
    return getIsFixed(el.parentElement);
  };
  var getEnv = (start => {
    const closestScrollable = getClosestScrollable$1(start);
    const isFixedOnPage = getIsFixed(start);
    return {
      closestScrollable,
      isFixedOnPage
    };
  });

  var getDroppableDimension = (_ref => {
    let {
      descriptor,
      isEnabled,
      isCombineEnabled,
      isFixedOnPage,
      direction,
      client,
      page,
      closest
    } = _ref;
    const frame = (() => {
      if (!closest) {
        return null;
      }
      const {
        scrollSize,
        client: frameClient
      } = closest;

      const maxScroll = getMaxScroll({
        scrollHeight: scrollSize.scrollHeight,
        scrollWidth: scrollSize.scrollWidth,
        height: frameClient.paddingBox.height,
        width: frameClient.paddingBox.width
      });
      return {
        pageMarginBox: closest.page.marginBox,
        frameClient,
        scrollSize,
        shouldClipSubject: closest.shouldClipSubject,
        scroll: {
          initial: closest.scroll,
          current: closest.scroll,
          max: maxScroll,
          diff: {
            value: origin,
            displacement: origin
          }
        }
      };
    })();
    const axis = direction === 'vertical' ? vertical : horizontal;
    const subject = getSubject({
      page,
      withPlaceholder: null,
      axis,
      frame
    });
    const dimension = {
      descriptor,
      isCombineEnabled,
      isFixedOnPage,
      axis,
      isEnabled,
      client,
      page,
      frame,
      subject
    };
    return dimension;
  });

  const getClient = (targetRef, closestScrollable) => {
    const base = cssBoxModel.getBox(targetRef);

    if (!closestScrollable) {
      return base;
    }

    if (targetRef !== closestScrollable) {
      return base;
    }

    const top = base.paddingBox.top - closestScrollable.scrollTop;
    const left = base.paddingBox.left - closestScrollable.scrollLeft;
    const bottom = top + closestScrollable.scrollHeight;
    const right = left + closestScrollable.scrollWidth;

    const paddingBox = {
      top,
      right,
      bottom,
      left
    };

    const borderBox = cssBoxModel.expand(paddingBox, base.border);

    const client = cssBoxModel.createBox({
      borderBox,
      margin: base.margin,
      border: base.border,
      padding: base.padding
    });
    return client;
  };
  var getDimension = (_ref => {
    let {
      ref,
      descriptor,
      env,
      windowScroll,
      direction,
      isDropDisabled,
      isCombineEnabled,
      shouldClipSubject
    } = _ref;
    const closestScrollable = env.closestScrollable;
    const client = getClient(ref, closestScrollable);
    const page = cssBoxModel.withScroll(client, windowScroll);
    const closest = (() => {
      if (!closestScrollable) {
        return null;
      }
      const frameClient = cssBoxModel.getBox(closestScrollable);
      const scrollSize = {
        scrollHeight: closestScrollable.scrollHeight,
        scrollWidth: closestScrollable.scrollWidth
      };
      return {
        client: frameClient,
        page: cssBoxModel.withScroll(frameClient, windowScroll),
        scroll: getScroll(closestScrollable),
        scrollSize,
        shouldClipSubject
      };
    })();
    const dimension = getDroppableDimension({
      descriptor,
      isEnabled: !isDropDisabled,
      isCombineEnabled,
      isFixedOnPage: env.isFixedOnPage,
      direction,
      client,
      page,
      closest
    });
    return dimension;
  });

  const immediate = {
    passive: false
  };
  const delayed = {
    passive: true
  };
  var getListenerOptions = (options => options.shouldPublishImmediately ? immediate : delayed);

  const getClosestScrollableFromDrag = dragging => dragging && dragging.env.closestScrollable || null;
  function useDroppablePublisher(args) {
    const whileDraggingRef = React.useRef(null);
    const appContext = useRequiredContext(AppContext);
    const uniqueId = useUniqueId$1('droppable');
    const {
      registry,
      marshal
    } = appContext;
    const previousRef = usePrevious(args);
    const descriptor = useMemoOne.useMemo(() => ({
      id: args.droppableId,
      type: args.type,
      mode: args.mode
    }), [args.droppableId, args.mode, args.type]);
    const publishedDescriptorRef = React.useRef(descriptor);
    const memoizedUpdateScroll = useMemoOne.useMemo(() => memoizeOne__default["default"]((x, y) => {
      !whileDraggingRef.current ? invariant(false, 'Can only update scroll when dragging')  : void 0;
      const scroll = {
        x,
        y
      };
      marshal.updateDroppableScroll(descriptor.id, scroll);
    }), [descriptor.id, marshal]);
    const getClosestScroll = useMemoOne.useCallback(() => {
      const dragging = whileDraggingRef.current;
      if (!dragging || !dragging.env.closestScrollable) {
        return origin;
      }
      return getScroll(dragging.env.closestScrollable);
    }, []);
    const updateScroll = useMemoOne.useCallback(() => {
      const scroll = getClosestScroll();
      memoizedUpdateScroll(scroll.x, scroll.y);
    }, [getClosestScroll, memoizedUpdateScroll]);
    const scheduleScrollUpdate = useMemoOne.useMemo(() => rafSchd__default["default"](updateScroll), [updateScroll]);
    const onClosestScroll = useMemoOne.useCallback(() => {
      const dragging = whileDraggingRef.current;
      const closest = getClosestScrollableFromDrag(dragging);
      !(dragging && closest) ? invariant(false, 'Could not find scroll options while scrolling')  : void 0;
      const options = dragging.scrollOptions;
      if (options.shouldPublishImmediately) {
        updateScroll();
        return;
      }
      scheduleScrollUpdate();
    }, [scheduleScrollUpdate, updateScroll]);
    const getDimensionAndWatchScroll = useMemoOne.useCallback((windowScroll, options) => {
      !!whileDraggingRef.current ? invariant(false, 'Cannot collect a droppable while a drag is occurring')  : void 0;
      const previous = previousRef.current;
      const ref = previous.getDroppableRef();
      !ref ? invariant(false, 'Cannot collect without a droppable ref')  : void 0;
      const env = getEnv(ref);
      const dragging = {
        ref,
        descriptor,
        env,
        scrollOptions: options
      };
      whileDraggingRef.current = dragging;
      const dimension = getDimension({
        ref,
        descriptor,
        env,
        windowScroll,
        direction: previous.direction,
        isDropDisabled: previous.isDropDisabled,
        isCombineEnabled: previous.isCombineEnabled,
        shouldClipSubject: !previous.ignoreContainerClipping
      });
      const scrollable = env.closestScrollable;
      if (scrollable) {
        scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);

        scrollable.addEventListener('scroll', onClosestScroll, getListenerOptions(dragging.scrollOptions));
        {
          checkForNestedScrollContainers(scrollable);
        }
      }
      return dimension;
    }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
    const getScrollWhileDragging = useMemoOne.useCallback(() => {
      const dragging = whileDraggingRef.current;
      const closest = getClosestScrollableFromDrag(dragging);
      !(dragging && closest) ? invariant(false, 'Can only recollect Droppable client for Droppables that have a scroll container')  : void 0;
      return getScroll(closest);
    }, []);
    const dragStopped = useMemoOne.useCallback(() => {
      const dragging = whileDraggingRef.current;
      !dragging ? invariant(false, 'Cannot stop drag when no active drag')  : void 0;
      const closest = getClosestScrollableFromDrag(dragging);

      whileDraggingRef.current = null;
      if (!closest) {
        return;
      }

      scheduleScrollUpdate.cancel();
      closest.removeAttribute(scrollContainer.contextId);
      closest.removeEventListener('scroll', onClosestScroll,
      getListenerOptions(dragging.scrollOptions));
    }, [onClosestScroll, scheduleScrollUpdate]);
    const scroll = useMemoOne.useCallback(change => {
      const dragging = whileDraggingRef.current;
      !dragging ? invariant(false, 'Cannot scroll when there is no drag')  : void 0;
      const closest = getClosestScrollableFromDrag(dragging);
      !closest ? invariant(false, 'Cannot scroll a droppable with no closest scrollable')  : void 0;

      closest.scrollTop += change.y;
      closest.scrollLeft += change.x;
    }, []);
    const callbacks = useMemoOne.useMemo(() => {
      return {
        getDimensionAndWatchScroll,
        getScrollWhileDragging,
        dragStopped,
        scroll
      };
    }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll]);
    const entry = useMemoOne.useMemo(() => ({
      uniqueId,
      descriptor,
      callbacks
    }), [callbacks, descriptor, uniqueId]);

    useLayoutEffect(() => {
      publishedDescriptorRef.current = entry.descriptor;
      registry.droppable.register(entry);
      return () => {
        if (whileDraggingRef.current) {
          warning('Unsupported: changing the droppableId or type of a Droppable during a drag') ;
          dragStopped();
        }
        registry.droppable.unregister(entry);
      };
    }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);

    useLayoutEffect(() => {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
    }, [args.isDropDisabled, marshal]);

    useLayoutEffect(() => {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
    }, [args.isCombineEnabled, marshal]);
  }

  function noop$3() {}
  const empty = {
    width: 0,
    height: 0,
    margin: noSpacing
  };
  const getSize = _ref => {
    let {
      isAnimatingOpenOnMount,
      placeholder,
      animate
    } = _ref;
    if (isAnimatingOpenOnMount) {
      return empty;
    }
    if (animate === 'close') {
      return empty;
    }
    return {
      height: placeholder.client.borderBox.height,
      width: placeholder.client.borderBox.width,
      margin: placeholder.client.margin
    };
  };
  const getStyle = _ref2 => {
    let {
      isAnimatingOpenOnMount,
      placeholder,
      animate
    } = _ref2;
    const size = getSize({
      isAnimatingOpenOnMount,
      placeholder,
      animate
    });
    return {
      display: placeholder.display,

      boxSizing: 'border-box',
      width: size.width,
      height: size.height,
      marginTop: size.margin.top,
      marginRight: size.margin.right,
      marginBottom: size.margin.bottom,
      marginLeft: size.margin.left,
      flexShrink: '0',
      flexGrow: '0',
      pointerEvents: 'none',
      transition: animate !== 'none' ? transitions.placeholder : null
    };
  };
  const Placeholder = props => {
    const animateOpenTimerRef = React.useRef(null);
    const tryClearAnimateOpenTimer = useMemoOne.useCallback(() => {
      if (!animateOpenTimerRef.current) {
        return;
      }
      clearTimeout(animateOpenTimerRef.current);
      animateOpenTimerRef.current = null;
    }, []);
    const {
      animate,
      onTransitionEnd,
      onClose,
      contextId
    } = props;
    const [isAnimatingOpenOnMount, setIsAnimatingOpenOnMount] = React.useState(props.animate === 'open');

    React.useEffect(() => {
      if (!isAnimatingOpenOnMount) {
        return noop$3;
      }

      if (animate !== 'open') {
        tryClearAnimateOpenTimer();
        setIsAnimatingOpenOnMount(false);
        return noop$3;
      }

      if (animateOpenTimerRef.current) {
        return noop$3;
      }
      animateOpenTimerRef.current = setTimeout(() => {
        animateOpenTimerRef.current = null;
        setIsAnimatingOpenOnMount(false);
      });

      return tryClearAnimateOpenTimer;
    }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
    const onSizeChangeEnd = useMemoOne.useCallback(event => {
      if (event.propertyName !== 'height') {
        return;
      }
      onTransitionEnd();
      if (animate === 'close') {
        onClose();
      }
    }, [animate, onClose, onTransitionEnd]);
    const style = getStyle({
      isAnimatingOpenOnMount,
      animate: props.animate,
      placeholder: props.placeholder
    });
    return React__default["default"].createElement(props.placeholder.tagName, {
      style,
      'data-rfd-placeholder-context-id': contextId,
      onTransitionEnd: onSizeChangeEnd,
      ref: props.innerRef
    });
  };
  var Placeholder$1 = React__default["default"].memo(Placeholder);

  function isBoolean(value) {
    return typeof value === 'boolean';
  }
  function runChecks(args, checks) {
    checks.forEach(check => check(args));
  }
  const shared = [function required(_ref) {
    let {
      props
    } = _ref;
    !props.droppableId ? invariant(false, 'A Droppable requires a droppableId prop')  : void 0;
    !(typeof props.droppableId === 'string') ? invariant(false, `A Droppable requires a [string] droppableId. Provided: [${typeof props.droppableId}]`)  : void 0;
  }, function boolean(_ref2) {
    let {
      props
    } = _ref2;
    !isBoolean(props.isDropDisabled) ? invariant(false, 'isDropDisabled must be a boolean')  : void 0;
    !isBoolean(props.isCombineEnabled) ? invariant(false, 'isCombineEnabled must be a boolean')  : void 0;
    !isBoolean(props.ignoreContainerClipping) ? invariant(false, 'ignoreContainerClipping must be a boolean')  : void 0;
  }, function ref(_ref3) {
    let {
      getDroppableRef
    } = _ref3;
    checkIsValidInnerRef(getDroppableRef());
  }];
  const standard = [function placeholder(_ref4) {
    let {
      props,
      getPlaceholderRef
    } = _ref4;
    if (!props.placeholder) {
      return;
    }
    const ref = getPlaceholderRef();
    if (ref) {
      return;
    }
    warning(`
      Droppable setup issue [droppableId: "${props.droppableId}"]:
      DroppableProvided > placeholder could not be found.

      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.
      More information: https://github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    `) ;
  }];
  const virtual = [function hasClone(_ref5) {
    let {
      props
    } = _ref5;
    !props.renderClone ? invariant(false, 'Must provide a clone render function (renderClone) for virtual lists')  : void 0;
  }, function hasNoPlaceholder(_ref6) {
    let {
      getPlaceholderRef
    } = _ref6;
    !!getPlaceholderRef() ? invariant(false, 'Expected virtual list to not have a placeholder')  : void 0;
  }];
  function useValidation(args) {
    useDevSetupWarning(() => {
      runChecks(args, shared);
      if (args.props.mode === 'standard') {
        runChecks(args, standard);
      }
      if (args.props.mode === 'virtual') {
        runChecks(args, virtual);
      }
    });
  }

  class AnimateInOut extends React__default["default"].PureComponent {
    constructor() {
      super(...arguments);
      this.state = {
        isVisible: Boolean(this.props.on),
        data: this.props.on,
        animate: this.props.shouldAnimate && this.props.on ? 'open' : 'none'
      };
      this.onClose = () => {
        if (this.state.animate !== 'close') {
          return;
        }
        this.setState({
          isVisible: false
        });
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (!props.shouldAnimate) {
        return {
          isVisible: Boolean(props.on),
          data: props.on,
          animate: 'none'
        };
      }

      if (props.on) {
        return {
          isVisible: true,
          data: props.on,
          animate: 'open'
        };
      }

      if (state.isVisible) {
        return {
          isVisible: true,
          data: state.data,
          animate: 'close'
        };
      }

      return {
        isVisible: false,
        animate: 'close',
        data: null
      };
    }
    render() {
      if (!this.state.isVisible) {
        return null;
      }
      const provided = {
        onClose: this.onClose,
        data: this.state.data,
        animate: this.state.animate
      };
      return this.props.children(provided);
    }
  }

  const Droppable = props => {
    const appContext = React.useContext(AppContext);
    !appContext ? invariant(false, 'Could not find app context')  : void 0;
    const {
      contextId,
      isMovementAllowed
    } = appContext;
    const droppableRef = React.useRef(null);
    const placeholderRef = React.useRef(null);
    const {
      children,
      droppableId,
      type,
      mode,
      direction,
      ignoreContainerClipping,
      isDropDisabled,
      isCombineEnabled,
      snapshot,
      useClone,
      updateViewportMaxScroll,
      getContainerForClone
    } = props;
    const getDroppableRef = useMemoOne.useCallback(() => droppableRef.current, []);
    const setDroppableRef = useMemoOne.useCallback(function (value) {
      if (value === void 0) {
        value = null;
      }
      droppableRef.current = value;
    }, []);
    const getPlaceholderRef = useMemoOne.useCallback(() => placeholderRef.current, []);
    const setPlaceholderRef = useMemoOne.useCallback(function (value) {
      if (value === void 0) {
        value = null;
      }
      placeholderRef.current = value;
    }, []);
    useValidation({
      props,
      getDroppableRef,
      getPlaceholderRef
    });
    const onPlaceholderTransitionEnd = useMemoOne.useCallback(() => {
      if (isMovementAllowed()) {
        updateViewportMaxScroll({
          maxScroll: getMaxWindowScroll()
        });
      }
    }, [isMovementAllowed, updateViewportMaxScroll]);
    useDroppablePublisher({
      droppableId,
      type,
      mode,
      direction,
      isDropDisabled,
      isCombineEnabled,
      ignoreContainerClipping,
      getDroppableRef
    });
    const placeholder = useMemoOne.useMemo(() => React__default["default"].createElement(AnimateInOut, {
      on: props.placeholder,
      shouldAnimate: props.shouldAnimatePlaceholder
    }, _ref => {
      let {
        onClose,
        data,
        animate
      } = _ref;
      return React__default["default"].createElement(Placeholder$1, {
        placeholder: data,
        onClose: onClose,
        innerRef: setPlaceholderRef,
        animate: animate,
        contextId: contextId,
        onTransitionEnd: onPlaceholderTransitionEnd
      });
    }), [contextId, onPlaceholderTransitionEnd, props.placeholder, props.shouldAnimatePlaceholder, setPlaceholderRef]);
    const provided = useMemoOne.useMemo(() => ({
      innerRef: setDroppableRef,
      placeholder,
      droppableProps: {
        'data-rfd-droppable-id': droppableId,
        'data-rfd-droppable-context-id': contextId
      }
    }), [contextId, droppableId, placeholder, setDroppableRef]);
    const isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
    const droppableContext = useMemoOne.useMemo(() => ({
      droppableId,
      type,
      isUsingCloneFor
    }), [droppableId, isUsingCloneFor, type]);
    function getClone() {
      if (!useClone) {
        return null;
      }
      const {
        dragging,
        render
      } = useClone;
      const node = React__default["default"].createElement(PrivateDraggable, {
        draggableId: dragging.draggableId,
        index: dragging.source.index,
        isClone: true,
        isEnabled: true
        ,
        shouldRespectForcePress: false,
        canDragInteractiveElements: true
      }, (draggableProvided, draggableSnapshot) => render(draggableProvided, draggableSnapshot, dragging));
      return ReactDOM__default["default"].createPortal(node, getContainerForClone());
    }
    return React__default["default"].createElement(DroppableContext.Provider, {
      value: droppableContext
    }, children(provided, snapshot), getClone());
  };
  var Droppable$1 = Droppable;

  const isMatchingType = (type, critical) => type === critical.droppable.type;
  const getDraggable = (critical, dimensions) => dimensions.draggables[critical.draggable.id];

  const makeMapStateToProps = () => {
    const idleWithAnimation = {
      placeholder: null,
      shouldAnimatePlaceholder: true,
      snapshot: {
        isDraggingOver: false,
        draggingOverWith: null,
        draggingFromThisWith: null,
        isUsingPlaceholder: false
      },
      useClone: null
    };
    const idleWithoutAnimation = {
      ...idleWithAnimation,
      shouldAnimatePlaceholder: false
    };
    const getDraggableRubric = memoizeOne__default["default"](descriptor => ({
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    }));
    const getMapProps = memoizeOne__default["default"]((id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) => {
      const draggableId = dragging.descriptor.id;
      const isHome = dragging.descriptor.droppableId === id;
      if (isHome) {
        const useClone = renderClone ? {
          render: renderClone,
          dragging: getDraggableRubric(dragging.descriptor)
        } : null;
        const snapshot = {
          isDraggingOver: isDraggingOverForConsumer,
          draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
          draggingFromThisWith: draggableId,
          isUsingPlaceholder: true
        };
        return {
          placeholder: dragging.placeholder,
          shouldAnimatePlaceholder: false,
          snapshot,
          useClone
        };
      }
      if (!isEnabled) {
        return idleWithoutAnimation;
      }

      if (!isDraggingOverForImpact) {
        return idleWithAnimation;
      }
      const snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: draggableId,
        draggingFromThisWith: null,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: true,
        snapshot,
        useClone: null
      };
    });
    const selector = (state, ownProps) => {

      const id = ownProps.droppableId;
      const type = ownProps.type;
      const isEnabled = !ownProps.isDropDisabled;
      const renderClone = ownProps.renderClone;
      if (isDragging(state)) {
        const critical = state.critical;
        if (!isMatchingType(type, critical)) {
          return idleWithoutAnimation;
        }
        const dragging = getDraggable(critical, state.dimensions);
        const isDraggingOver = whatIsDraggedOver(state.impact) === id;
        return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
      }
      if (state.phase === 'DROP_ANIMATING') {
        const completed = state.completed;
        if (!isMatchingType(type, completed.critical)) {
          return idleWithoutAnimation;
        }
        const dragging = getDraggable(completed.critical, state.dimensions);

        return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, dragging, renderClone);
      }
      if (state.phase === 'IDLE' && state.completed && !state.shouldFlush) {
        const completed = state.completed;
        if (!isMatchingType(type, completed.critical)) {
          return idleWithoutAnimation;
        }

        const wasOver = whatIsDraggedOver(completed.impact) === id;
        const wasCombining = Boolean(completed.impact.at && completed.impact.at.type === 'COMBINE');
        const isHome = completed.critical.droppable.id === id;
        if (wasOver) {
          return wasCombining ? idleWithAnimation : idleWithoutAnimation;
        }

        if (isHome) {
          return idleWithAnimation;
        }
        return idleWithoutAnimation;
      }

      return idleWithoutAnimation;
    };
    return selector;
  };
  const mapDispatchToProps$2 = {
    updateViewportMaxScroll: updateViewportMaxScroll
  };
  function getBody() {
    !document.body ? invariant(false, 'document.body is not ready')  : void 0;
    return document.body;
  }
  const defaultProps = {
    mode: 'standard',
    type: 'DEFAULT',
    direction: 'vertical',
    isDropDisabled: false,
    isCombineEnabled: false,
    ignoreContainerClipping: false,
    renderClone: null,
    getContainerForClone: getBody
  };

  const ConnectedDroppable = reactRedux.connect(
  makeMapStateToProps,
  mapDispatchToProps$2,
  null, {
    context: StoreContext,
    areStatePropsEqual: isStrictEqual
  }
  )(Droppable$1);
  ConnectedDroppable.defaultProps = defaultProps;
  var ConnectedDroppable$1 = ConnectedDroppable;

  var DragDropContext_1 = dnd_cjs.DragDropContext = DragDropContext;
  var Draggable_1 = dnd_cjs.Draggable = PublicDraggable;
  var Droppable_1 = dnd_cjs.Droppable = ConnectedDroppable$1;
  dnd_cjs.resetServerContext = resetServerContext;
  dnd_cjs.useKeyboardSensor = useKeyboardSensor;
  dnd_cjs.useMouseSensor = useMouseSensor;
  dnd_cjs.useTouchSensor = useTouchSensor;

  function _extends$p() { _extends$p = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$p.apply(this, arguments); }
  const AddNewItemButton = props => {
    const {
      resource,
      property,
      ...btnProps
    } = props;
    const {
      translateProperty,
      translateButton
    } = useTranslation();
    const label = translateProperty(`${property.path}.addNewItem`, resource.id, {
      defaultValue: translateButton('addNewItem', resource.id)
    });
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, _extends$p({
      type: "button",
      variant: "outlined"
    }, btnProps), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Plus"
    }), label);
  };

  // eslint-disable-next-line no-shadow
  let ErrorTypeEnum = /*#__PURE__*/function (ErrorTypeEnum) {
    ErrorTypeEnum["App"] = "AppError";
    ErrorTypeEnum["Configuration"] = "ConfigurationError";
    ErrorTypeEnum["Forbidden"] = "ForbiddenError";
    ErrorTypeEnum["NotFound"] = "NotFoundError";
    ErrorTypeEnum["NotImplemented"] = "NotImplementedError";
    ErrorTypeEnum["Record"] = "RecordError";
    ErrorTypeEnum["Validation"] = "ValidationError";
    return ErrorTypeEnum;
  }({});

  const PropertyDescription = props => {
    const {
      property
    } = props;
    const {
      tm
    } = useTranslation();
    if (!property.description) {
      return null;
    }
    const direction = property.custom?.tooltipDirection || 'top';
    const translatedDescription = tm(property.description, property.resourceId);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mx: "sm",
      display: "inline-flex"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Tooltip, {
      direction: direction,
      title: translatedDescription,
      size: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "HelpCircle",
      color: "info"
    }))));
  };
  const OverridablePropertyDescription = allowOverride(PropertyDescription, 'PropertyDescription');

  function _extends$o() { _extends$o = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$o.apply(this, arguments); }
  const PropertyLabel = props => {
    const {
      property,
      props: labelProps,
      filter = false
    } = props;
    const {
      translateProperty
    } = useTranslation();
    if (property.hideLabel) {
      return null;
    }
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, _extends$o({
      htmlFor: filter ? ['filter', property.path].join('-') : property.path,
      required: !filter && property.isRequired
    }, labelProps), translateProperty(property.label, property.resourceId), property.description && /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyDescription, {
      property: property
    }));
  };
  const OverridablePropertyLabel = allowOverride(PropertyLabel, 'PropertyLabel');

  const getSubpropertyPath = (path, index) => [path, index].join(DELIMITER);

  /**
   * Converts property: PropertyJSON from an array to a sub-property for an actual item in the array
   * It change path that it has index inside along with the label. Futhermore flat isArray is removed
   * ,because it was already handled, so that itemRenderer can render property as a regular one
   *
   * @param {PropertyJSON}  arrayProperty property with path set to an root Array type property,
   * @param {Number}        index         index under which sub-property should be placed
   * @private
   * @hide
   */
  const convertToSubProperty$1 = (arrayProperty, index) => ({
    ...arrayProperty,
    path: getSubpropertyPath(arrayProperty.path, index),
    label: `[${index + 1}]`,
    isArray: false,
    isDraggable: false
  });

  /**
   * Removes selected array item from given record. It performs following tasks:
   * 1. removes array item from the array
   * 2. reorders keys in new array item
   * 3. if property has populated fields it also reorders them
   * it uses {@link flat } module and its removePath method
   *
   * @param {RecordJSON} record
   * @param {string}     subPropertyPath            which has to be removed. It has to be flattened
   *                                                in notation, and ending with array index
   * @private
   * @hide
   */
  const removeSubProperty = (record, subPropertyPath) => {
    // by default populated is flatten just to the path level - object itself is not flatten. That is
    // why we have to retrieve the original state. That is why we have to replace record.populated to
    // from { 'some.nested.1.key': RecordJSON } to { 'some.nested.1.key': 'some.nested.1.key' },
    // then remove keys, and refill back some.nested.1.key to the value from the original populated
    // object.
    const populatedKeyMap = Object.keys(record.populated).reduce((memo, propertyKey) => ({
      ...memo,
      [propertyKey]: propertyKey
    }), {});
    const newPopulatedKeyMap = flat.removePath(populatedKeyMap, subPropertyPath);
    const newPopulated = Object.entries(newPopulatedKeyMap).reduce((memo, [newPropertyKey, oldPropertyKey]) => ({
      ...memo,
      [newPropertyKey]: oldPropertyKey && record.populated[oldPropertyKey?.toString()]
    }), {});
    return {
      ...record,
      params: flat.removePath(record.params, subPropertyPath),
      populated: newPopulated
    };
  };

  function _extends$n() { _extends$n = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$n.apply(this, arguments); }
  const ItemRenderer = props => {
    const {
      ItemComponent,
      property,
      onDelete,
      index,
      record,
      isDraggable
    } = props;
    const uniqueDraggableId = window.btoa(unescape(encodeURIComponent(`${JSON.stringify(flat.get(record.params, property.path))}-${property.path}`)));
    return /*#__PURE__*/React__default$1.default.createElement(Draggable_1, {
      draggableId: uniqueDraggableId,
      index: index,
      key: uniqueDraggableId,
      isDragDisabled: !isDraggable
    }, provided => /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, _extends$n({
      as: "div",
      ref: provided.innerRef
    }, provided.draggableProps, provided.dragHandleProps, {
      backgroundColor: "white",
      flex: true,
      flexDirection: "row",
      alignItems: "start",
      variant: "transparent",
      "data-testid": property.path
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      as: "div",
      flexGrow: 1
    }, /*#__PURE__*/React__default$1.default.createElement(ItemComponent, props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      rounded: true,
      mt: "xl",
      ml: "default",
      "data-testid": "delete-item",
      type: "button",
      size: "icon",
      onClick: event => onDelete(event, property),
      variant: "text",
      color: "danger"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Trash2"
    }))));
  };
  const InputsInSection = props => {
    const {
      property,
      record,
      resource,
      onChange
    } = props;
    const items = flat.get(record.params, property.path) || [];
    const addNew = React$1.useCallback(event => {
      const newItems = [...items, property.subProperties.length ? {} : ''];
      onChange(property.path, newItems);
      event.preventDefault();
      return false;
    }, [record, onChange, property]);
    const removeItem = React$1.useCallback((event, subProperty) => {
      const newRecord = removeSubProperty(record, subProperty.path);
      onChange(newRecord);
      event.preventDefault();
      return false;
    }, [record, onChange, property]);
    const handleOnDragEnd = React$1.useCallback(result => {
      const {
        source,
        destination
      } = result;
      if (!source || !destination || destination.index === source.index) return;
      const itemsCopy = Array.from(items);
      const [sourceItem] = itemsCopy.splice(source.index, 1);
      itemsCopy.splice(destination.index, 0, sourceItem);
      onChange(property.path, itemsCopy);
    }, [record, onChange, property]);
    return /*#__PURE__*/React__default$1.default.createElement(DragDropContext_1, {
      onDragEnd: handleOnDragEnd
    }, /*#__PURE__*/React__default$1.default.createElement(Droppable_1, {
      droppableId: property.path
    }, provided => /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, _extends$n({
      ref: provided.innerRef
    }, provided.droppableProps, {
      mt: "xl",
      className: property.path
    }), items.map((item, i) => {
      const itemProperty = convertToSubProperty$1(property, i);
      return /*#__PURE__*/React__default$1.default.createElement(ItemRenderer, _extends$n({}, props, {
        property: itemProperty,
        isDraggable: property.isDraggable,
        key: itemProperty.path,
        onDelete: removeItem,
        index: i
      }));
    }), provided.placeholder, /*#__PURE__*/React__default$1.default.createElement(AddNewItemButton, {
      resource: resource,
      property: property,
      onClick: addNew,
      "data-testid": `${property.path}-add`
    }))));
  };
  const Edit$c = props => {
    const {
      property,
      record,
      testId
    } = props;
    const error = record.errors && record.errors[property.propertyPath];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error,
      "data-testid": testId
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(InputsInSection, props), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  const OverridableEdit$1 = allowOverride(Edit$c, 'DefaultArrayEditProperty');

  const List$9 = props => {
    const {
      property,
      record
    } = props;
    const values = flat.get(record.params, property.path) || [];
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement("span", null, `${translateProperty('length')}: ${values.length}`);
  };
  var list$8 = allowOverride(List$9, 'DefaultArrayListProperty');

  function _extends$m() { _extends$m = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$m.apply(this, arguments); }
  const Show$b = props => {
    const {
      property,
      record,
      ItemComponent
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const items = flat.get(record.params, property.path) || [];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, null, (items || []).map((item, i) => {
      const itemProperty = convertToSubProperty$1(property, i);
      return /*#__PURE__*/React__default$1.default.createElement(ItemComponent, _extends$m({}, props, {
        key: itemProperty.path,
        property: itemProperty
      }));
    })));
  };
  var show$9 = allowOverride(Show$b, 'DefaultArrayShowProperty');

  var ArrayType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: OverridableEdit$1,
    list: list$8,
    show: show$9
  });

  function _extends$l() { _extends$l = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$l.apply(this, arguments); }
  const EditKeyValuePair = props => {
    const {
      onKeyChange,
      onValueChange,
      onRemoveItem,
      property,
      objectValue,
      objectKey,
      error
    } = props;
    const {
      tm
    } = useTranslation();
    const [currentValue, setValue] = React$1.useState(objectValue ?? '');
    const [currentKey, setKey] = React$1.useState(objectKey ?? '');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      mb: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      justifyContent: "space-between",
      flexGrow: 1,
      flexShrink: 0
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error),
      mr: "lg",
      mb: "0px"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, _extends$l({
      placeholder: tm('keyPlaceholder'),
      onChange: e => setKey(e.target.value),
      onBlur: () => onKeyChange(objectKey, currentKey),
      onKeyDown: e => e.keyCode === 13 && onKeyChange(objectKey, currentKey),
      value: currentKey
    }, property.props?.keyInputProps ?? {})), error && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error.message)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      mb: "0px"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, _extends$l({
      placeholder: tm('valuePlaceholder'),
      onChange: e => setValue(e.target.value),
      onBlur: () => onValueChange(currentKey, currentValue),
      onKeyDown: e => e.keyCode === 13 && onValueChange(currentKey, currentValue),
      value: currentValue,
      disabled: !objectKey
    }, property.props?.valueInputProps ?? {})))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      rounded: true,
      ml: "sm",
      "data-testid": "delete-item",
      type: "button",
      size: "icon",
      onClick: () => onRemoveItem(currentKey),
      variant: "contained",
      color: "danger",
      flexGrow: 0,
      flexShrink: 1
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Trash2"
    })));
  };
  const Edit$b = props => {
    const {
      property,
      record,
      onChange,
      resource
    } = props;
    const {
      tm,
      tb
    } = useTranslation();
    const [objectValue, setObjectValue] = React$1.useState(flat.get(record.params, property.path) ?? {});
    const handleKeyChange = (oldKey, newKey) => {
      if (oldKey === newKey) return;
      const tmpValue = objectValue[oldKey];

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const {
        [oldKey]: _removedKey,
        ...objectCopy
      } = objectValue;
      objectCopy[newKey] = tmpValue ?? '';
      setObjectValue(parseObjectValue(objectCopy));
    };
    const handleValueChange = (key, value) => {
      objectValue[key] = value;
      setObjectValue(parseObjectValue({
        ...objectValue
      }));
    };
    const parseObjectValue = obj => Object.entries(obj).reduce((memo, [k, v]) => {
      if (!k || !k.length) return memo;
      memo[k] = v;
      return memo;
    }, {});

    /**
     * This is used to prevent empty/duplicate keys from being added to JSON
     */
    const getNextKey = previousId => {
      const nextId = previousId ? previousId + 1 : Object.keys(objectValue ?? {}).length + 1;
      const nextKey = `${tm('initialKey', resource.id, {
      number: nextId
    })}`;
      if (objectValue[nextKey] !== undefined) {
        return getNextKey(nextId);
      }
      return nextKey;
    };
    const addNewKeyValuePair = event => {
      event.preventDefault();
      const key = getNextKey();
      objectValue[key] = '';
      setObjectValue(parseObjectValue({
        ...objectValue
      }));
    };
    const handleRemoveItem = key => {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const {
        [key]: _removedKey,
        ...objectCopy
      } = objectValue;
      setObjectValue(parseObjectValue(objectCopy));
    };
    React$1.useEffect(() => {
      onChange(property.path, objectValue);
    }, [objectValue]);
    const error = record.errors && record.errors[property.path];
    if (property.description === undefined) {
      property.description = tm('keyValuePropertyDefaultDescription', resource.id);
    }
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, property.props, Object.entries(objectValue).map(([key, value]) => /*#__PURE__*/React__default$1.default.createElement(EditKeyValuePair, {
      key: key,
      property: property,
      objectValue: value,
      objectKey: key,
      onKeyChange: handleKeyChange,
      onValueChange: handleValueChange,
      onRemoveItem: handleRemoveItem,
      error: record.errors[`${property.path}${flat.DELIMITER}${key}`]
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      mt: "lg",
      onClick: addNewKeyValuePair
    }, tb('addNewItem', resource.id))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };

  const ShowKeyValuePair = props => {
    const {
      objectValue,
      objectKey
    } = props;
    const {
      tm
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      mb: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      mr: "lg",
      mb: "0px"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, {
      placeholder: tm('keyPlaceholder'),
      value: objectKey,
      disabled: true
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      mb: "0px"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, {
      placeholder: tm('valuePlaceholder'),
      value: objectValue,
      disabled: true
    })));
  };
  const Show$a = props => {
    const {
      property,
      record
    } = props;
    const objectValue = flat.get(record.params, property.path) ?? {};
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: property.label
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, null, Object.entries(objectValue).map(([key, value]) => /*#__PURE__*/React__default$1.default.createElement(ShowKeyValuePair, {
      key: key,
      objectValue: value,
      objectKey: key
    }))));
  };

  var KeyValueType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: Edit$b,
    show: Show$a
  });

  function convertToSubProperty(property, subProperty) {
    const [subPropertyPath] = subProperty.name.split(DELIMITER).slice(-1);
    return {
      ...subProperty,
      path: [property.path, subPropertyPath].join(DELIMITER)
    };
  }

  function _extends$k() { _extends$k = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$k.apply(this, arguments); }
  const Edit$a = props => {
    const {
      property,
      record,
      ItemComponent
    } = props;
    const error = record.errors && record.errors[property.path];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, property.props, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
      const subPropertyWithPath = convertToSubProperty(property, subProperty);
      return /*#__PURE__*/React__default$1.default.createElement(ItemComponent, _extends$k({}, props, {
        key: subPropertyWithPath.path,
        property: subPropertyWithPath
      }));
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$9 = allowOverride(Edit$a, 'DefaultMixedEditProperty');

  function _extends$j() { _extends$j = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$j.apply(this, arguments); }
  const Show$9 = props => {
    const {
      property,
      ItemComponent
    } = props;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Section, null, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
      const subPropertyWithPath = convertToSubProperty(property, subProperty);
      return /*#__PURE__*/React__default$1.default.createElement(ItemComponent, _extends$j({}, props, {
        key: subPropertyWithPath.path,
        property: subPropertyWithPath
      }));
    })));
  };
  var show$8 = allowOverride(Show$9, 'DefaultMixedShowProperty');

  function _extends$i() { _extends$i = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$i.apply(this, arguments); }
  const List$8 = props => {
    const {
      property,
      record,
      resource,
      ItemComponent
    } = props;
    const renderItems = () => /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, property.subProperties.filter(subProperty => !subProperty.isId).map(subProperty => {
      const subPropertyWithPath = convertToSubProperty(property, subProperty);
      return /*#__PURE__*/React__default$1.default.createElement("div", {
        key: subPropertyWithPath.path
      }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, {
        inline: true
      }, `${subProperty.label}: `), /*#__PURE__*/React__default$1.default.createElement(ItemComponent, _extends$i({}, props, {
        property: subPropertyWithPath
      })));
    }));
    const showAction = record.recordActions.find(a => a.name === 'show');
    if (resource.titleProperty.propertyPath === property.propertyPath && showAction) {
      const h = new ViewHelpers();
      const href = h.recordActionUrl({
        resourceId: resource.id,
        recordId: record.id,
        actionName: 'show'
      });
      return /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Link, {
        to: href
      }, renderItems());
    }
    return renderItems();
  };
  var list$7 = allowOverride(List$8, 'DefaultMixedListProperty');

  var MixedType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$9,
    list: list$7,
    show: show$8
  });

  /* eslint-disable import/prefer-default-export */

  /**
   * Function used in React memo to compare if previous property value and next
   * property value are the same.
   *
   * @private
   */
  const recordPropertyIsEqual = (prevProps, nextProps) => {
    const prevValue = prevProps.record.params[prevProps.property.path];
    const nextValue = nextProps.record.params[nextProps.property.path];
    const prevError = prevProps.record.errors[prevProps.property.path];
    const nextError = nextProps.record.errors[nextProps.property.path];
    return prevValue === nextValue && prevError === nextError;
  };

  function _extends$h() { _extends$h = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$h.apply(this, arguments); }
  const parseValue = value => !(!value || value === 'false');
  const Edit$9 = props => {
    const {
      property,
      onChange,
      record
    } = props;
    const value = parseValue(record.params && record.params[property.path]);
    const error = record.errors && record.errors[property.path];
    const handleChange = () => {
      if (!property.isDisabled) {
        onChange(property.path, !value);
      }
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CheckBox, _extends$h({
      id: property.path,
      name: property.path,
      onChange: handleChange,
      checked: value,
      disabled: property.isDisabled
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      props: {
        inline: true
      }
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$8 = allowOverride( /*#__PURE__*/React$1.memo(Edit$9, recordPropertyIsEqual), 'DefaultBooleanEditProperty');

  var mapValue$1 = (value => {
    if (typeof value === 'undefined') {
      return '';
    }
    return value ? 'Yes' : 'No';
  });

  const BooleanPropertyValue = props => {
    const {
      record,
      property,
      resource
    } = props;
    const {
      tl
    } = useTranslation();
    const rawValue = record?.params[property.path];
    if (typeof rawValue === 'undefined' || rawValue === '') {
      return null;
    }
    const base = mapValue$1(rawValue);
    const translation = tl(`${property.path}.${rawValue}`, resource.id, {
      defaultValue: base
    });
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Badge, {
      outline: true,
      size: "sm"
    }, translation);
  };
  var BooleanPropertyValue$1 = allowOverride(BooleanPropertyValue, 'BooleanPropertyValue');

  const Show$8 = props => {
    const {
      property
    } = props;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(BooleanPropertyValue$1, props));
  };
  var show$7 = allowOverride(Show$8, 'DefaultBooleanShowProperty');

  const List$7 = props => /*#__PURE__*/React__default$1.default.createElement(BooleanPropertyValue$1, props);
  var list$6 = allowOverride(List$7, 'DefaultBooleanListProperty');

  const boolValue = s => {
    if (/true/i.test(s)) {
      return true;
    }
    return false;
  };
  const Filter$6 = props => {
    const {
      property,
      filter = {},
      onChange
    } = props;
    const {
      tl
    } = useTranslation();
    const value = typeof filter[property.path] === 'undefined' ? '' : boolValue(filter[property.path]);
    const options = [{
      value: true,
      label: tl(`${property.path}.true`, property.resourceId, {
        defaultValue: mapValue$1(true)
      })
    }, {
      value: false,
      label: tl(`${property.path}.false`, property.resourceId, {
        defaultValue: mapValue$1(false)
      })
    }];
    const selected = options.find(o => o.value === value);
    const handleChange = s => {
      const newValue = s ? s.value : undefined;
      onChange(property.path, newValue);
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Select, {
      variant: "filter",
      value: typeof selected === 'undefined' ? '' : selected,
      isClearable: true,
      options: options,
      onChange: handleChange
    }));
  };
  var filter$5 = allowOverride(Filter$6, 'DefaultBooleanFilterProperty');

  var boolean = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$8,
    filter: filter$5,
    list: list$6,
    show: show$7
  });

  function _extends$g() { _extends$g = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$g.apply(this, arguments); }
  const CurrencyInputWrapper = props => {
    const {
      id,
      initial,
      onChange,
      options
    } = props;
    const [value, setValue] = React$1.useState(initial);
    const onValueChange = currentValue => {
      setValue(currentValue);
      onChange(currentValue);
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CurrencyInput, _extends$g({
      id: id,
      name: id,
      value: value,
      onValueChange: onValueChange
    }, options));
  };
  const OverridableCurrencyInputWrapper = allowOverride(CurrencyInputWrapper, 'CurrencyPropertyInputWrapper');

  const Edit$8 = props => {
    const {
      onChange,
      property,
      record
    } = props;
    const propValue = record.params?.[property.path] ?? '';
    const error = record.errors?.[property.path];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(OverridableCurrencyInputWrapper, {
      id: property.path,
      initial: propValue,
      options: property.props,
      onChange: value => onChange(property.path, value)
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$7 = allowOverride( /*#__PURE__*/React$1.memo(Edit$8, recordPropertyIsEqual), 'DefaultCurrencyEditProperty');

  function _extends$f() { _extends$f = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }
  const Filter$5 = props => {
    const {
      onChange,
      property,
      filter
    } = props;
    const handleChange = value => {
      onChange(property.path, value);
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      variant: "filter"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CurrencyInput, _extends$f({
      id: property.path,
      name: `filter-${property.path}`,
      onValueChange: handleChange,
      value: filter[property.path]
    }, property.props)));
  };
  var filter$4 = allowOverride(Filter$5, 'DefaultCurrencyFilterProperty');

  const optionsKeys = ['value', 'decimalSeparator', 'groupSeparator', 'disableGroupSeparators', 'intlConfig', 'decimalScale', 'prefix', 'suffix'];
  const pickFormatOptions = props => {
    const pickedProps = Object.keys(props).reduce((acc, curr) => {
      if (optionsKeys.includes(curr)) {
        if (props[curr] !== null && props[curr] !== undefined) {
          acc[curr] = props[curr].toString();
        }
      }
      return acc;
    }, {});
    return pickedProps;
  };
  const formatValue = (value, props = {}) => {
    const formatOptions = pickFormatOptions({
      value,
      ...props
    });
    return DesignSystem.formatCurrencyProperty(formatOptions);
  };

  const List$6 = props => {
    const {
      property,
      record
    } = props;
    const value = formatValue(record.params[property.path], property.props);
    return /*#__PURE__*/React__default$1.default.createElement("span", null, value);
  };
  var list$5 = allowOverride(List$6, 'DefaultCurrencyListProperty');

  const Show$7 = props => {
    const {
      property,
      record
    } = props;
    const value = `${record.params[property.path]}`;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, formatValue(value, property.props));
  };
  var show$6 = allowOverride(Show$7, 'DefaultCurrencyShowProperty');

  var currency = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$7,
    filter: filter$4,
    list: list$5,
    show: show$6
  });

  function _extends$e() { _extends$e = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }
  const Edit$7 = props => {
    const {
      property,
      onChange,
      record
    } = props;
    const value = record.params && record.params[property.path] || '';
    const error = record.errors && record.errors[property.path];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DatePicker, _extends$e({
      value: value,
      disabled: property.isDisabled,
      onChange: date => onChange(property.path, date),
      propertyType: property.type
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$6 = allowOverride( /*#__PURE__*/React$1.memo(Edit$7, recordPropertyIsEqual), 'DefaultDatetimeEditProperty');

  var mapValue = ((value, propertyType) => {
    if (!value) {
      return '';
    }
    const date = new Date(value);
    if (date) {
      return DesignSystem.formatDateProperty(date, propertyType);
    }
    return '';
  });

  const Show$6 = props => {
    const {
      property,
      record
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const value = mapValue(record.params[property.path], property.type);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, value);
  };
  var show$5 = allowOverride(Show$6, 'DefaultDatetimeShowProperty');

  const List$5 = props => {
    const {
      property,
      record
    } = props;
    const value = mapValue(record.params[property.path], property.type);
    return /*#__PURE__*/React__default$1.default.createElement("span", null, value);
  };
  var list$4 = allowOverride(List$5, 'DefaultDatetimeListProperty');

  const PARAM_SEPARATOR$1 = '~~';
  /**
   * Filter object wrapping up selected filters.
   * @private
   */
  let Filter$4 = class Filter {
    /**
     * Changes raw nested filters to form Object<path, value>.
     *
     * @example
     * const filters = {
     *  nested: {field: 'ala'},
     *  'dataField~~from': '2019-08-14'
     * }
     *
     * const normalized = Filter.normalizeFilters(filters)
     * // {
     * //   'nested.filter': 'ala',
     * //   'dataField': {from: '2019-08-14'}
     * // }
     *
     *
     * @param   {Object}  filters
     *
     * @return  {Object}
     */
    static normalizeKeys(filters) {
      return flat.unflatten(flat.flatten(filters), {
        delimiter: PARAM_SEPARATOR$1
      });
    }

    /**
     * @param   {Object<String,Object | String>}  filters   selected filters
     * @param   {BaseResource}                    resource    resource which is filtered
     */
    constructor(filters = {}, resource) {
      this.resource = resource;
      const normalized = Filter.normalizeKeys(filters);
      this.filters = Object.keys(normalized).reduce((memo, path) => {
        memo[path] = {
          path,
          property: this.resource.property(path),
          value: normalized[path]
        };
        return memo;
      }, {});
    }

    /**
     * Returns filter for a given property key
     *
     * @param {String} key      property key
     * @returns {Filter.Property | undefined}
     */
    get(key) {
      return this.filters[key];
    }

    /**
     * Populates all filtered properties which refers to other resources
     */
    async populate(context) {
      const keys = Object.keys(this.filters);
      for (let index = 0; index < keys.length; index += 1) {
        const key = keys[index];
        const referenceResource = this.resource.decorate().getPropertyByKey(key)?.reference();
        if (referenceResource) {
          const value = this.filters[key].value;
          this.filters[key].populated = await referenceResource.findOne(value, context);
        }
      }
      return this;
    }
    reduce(callback, initial) {
      return Object.values(this.filters).reduce(callback, initial || {});
    }
    isVisible() {
      return !!Object.keys(this.filters).length;
    }
  };

  var BackendFilter = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Filter: Filter$4,
    PARAM_SEPARATOR: PARAM_SEPARATOR$1,
    default: Filter$4
  });

  const {
    PARAM_SEPARATOR
  } = BackendFilter;
  const Filter$3 = props => {
    const {
      property,
      filter,
      onChange
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const fromKey = `${property.path}${PARAM_SEPARATOR}from`;
    const toKey = `${property.path}${PARAM_SEPARATOR}to`;
    const fromValue = filter[fromKey];
    const toValue = filter[toKey];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      variant: "filter"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, null, `- ${translateProperty('from')}: `), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DatePicker, {
      value: fromValue,
      onChange: date => onChange(fromKey, date),
      propertyType: property.type
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, {
      mt: "default"
    }, `- ${translateProperty('to')}: `), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DatePicker, {
      value: toValue,
      onChange: date => onChange(toKey, date),
      propertyType: property.type
    }));
  };
  var filter$3 = allowOverride(Filter$3, 'DefaultDatetimeFilterProperty');

  var datetime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$6,
    filter: filter$3,
    list: list$4,
    show: show$5
  });

  const DefaultPropertyValue = ({
    property: {
      propertyPath,
      availableValues,
      path
    },
    record,
    resource: {
      id: resourceId
    }
  }) => {
    const rawValue = record?.params[path];
    const {
      translateProperty
    } = useTranslation();
    if (typeof rawValue === 'undefined') return null;

    // eslint-disable-next-line eqeqeq
    const option = availableValues?.find(opt => opt.value == rawValue);
    if (option) {
      const label = option.label || rawValue;
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Badge, null, translateProperty(`${propertyPath}.${label}`, resourceId, {
        defaultValue: startCase$1(label)
      }));
    }
    return rawValue;
  };
  var DefaultPropertyValue$1 = allowOverride(DefaultPropertyValue, 'DefaultPropertyValue');

  const Show$5 = props => {
    const {
      property
    } = props;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(DefaultPropertyValue$1, props));
  };
  var show$4 = allowOverride(Show$5, 'DefaultShowProperty');

  function _extends$d() { _extends$d = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }
  const Edit$6 = props => {
    const {
      property,
      record
    } = props;
    const error = record.errors?.[property.path];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), property.availableValues ? /*#__PURE__*/React__default$1.default.createElement(SelectEdit, props) : /*#__PURE__*/React__default$1.default.createElement(TextEdit, props), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  const SelectEdit = props => {
    const {
      record,
      property,
      onChange
    } = props;
    const {
      tl
    } = useTranslation();
    if (!property.availableValues) {
      return null;
    }
    const propValue = record.params?.[property.path] ?? property.props.value ?? '';
    // eslint-disable-next-line max-len
    const availableValues = property.availableValues.map(v => ({
      ...v,
      label: tl(`${property.path}.${v.value}`, property.resourceId, {
        defaultValue: v.label ?? v.value
      })
    }));
    // eslint-disable-next-line eqeqeq
    const selected = availableValues.find(av => av.value == propValue);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Select, _extends$d({
      value: selected,
      options: availableValues,
      onChange: s => onChange(property.path, s?.value ?? ''),
      isDisabled: property.isDisabled
    }, property.props));
  };
  const TextEdit = props => {
    const {
      property,
      record,
      onChange
    } = props;
    const propValue = record.params?.[property.path] ?? property.props.value ?? '';
    const [value, setValue] = React$1.useState(propValue);
    React$1.useEffect(() => {
      if (value !== propValue) {
        setValue(propValue);
      }
    }, [propValue]);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, _extends$d({
      id: property.path,
      name: property.path,
      required: property.isRequired,
      onChange: e => setValue(e.target.value),
      onBlur: () => onChange(property.path, value)
      // handle clicking ENTER
      ,
      onKeyDown: e => e.keyCode === 13 && onChange(property.path, value),
      value: value,
      disabled: property.isDisabled
    }, property.props));
  };
  var edit$5 = allowOverride( /*#__PURE__*/React$1.memo(Edit$6, recordPropertyIsEqual), 'DefaultEditProperty');

  const Filter$2 = props => {
    const {
      property,
      onChange,
      filter
    } = props;
    const {
      tl
    } = useTranslation();
    const handleInputChange = event => {
      onChange(property.path, event.target.value);
    };
    const handleSelectChange = selected => {
      const value = selected ? selected.value : '';
      onChange(property.path, value);
    };
    const renderInput = () => {
      const filterKey = `filter-${property.path}`;
      const value = filter[property.path] || '';
      if (property.availableValues) {
        const availableValues = property.availableValues.map(v => ({
          ...v,
          label: tl(`${property.path}.${v.value}`, property.resourceId, {
            defaultValue: v.label ?? v.value
          })
        }));
        const selected = availableValues.find(av => av.value === value);
        return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Select, {
          variant: "filter",
          value: typeof selected === 'undefined' ? '' : selected,
          isClearable: true,
          options: availableValues,
          onChange: handleSelectChange
        });
      }
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, {
        name: filterKey,
        onChange: handleInputChange,
        value: value
      });
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      variant: "filter"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), renderInput());
  };
  var filter$2 = allowOverride(Filter$2, 'DefaultFilterProperty');

  const List$4 = props => /*#__PURE__*/React__default$1.default.createElement(DefaultPropertyValue$1, props);
  var list$3 = allowOverride(List$4, 'DefaultListProperty');

  var defaultType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$5,
    filter: filter$2,
    list: list$3,
    show: show$4
  });

  function _extends$c() { _extends$c = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }
  const Edit$5 = props => {
    const {
      property,
      record,
      onChange
    } = props;
    const propValue = record.params[property.path];
    const [value, setValue] = React$1.useState(propValue);
    const error = record.errors && record.errors[property.path];
    const [isInput, setIsInput] = React$1.useState(false);
    React$1.useEffect(() => {
      if (value !== propValue) {
        setValue(propValue);
      }
    }, [propValue]);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: !!error
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InputGroup, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, _extends$c({
      type: isInput ? 'input' : 'password',
      className: "input",
      id: property.path,
      name: property.path,
      onChange: event => setValue(event.target.value),
      onBlur: () => onChange(property.path, value),
      onKeyDown: e => e.keyCode === 13 && onChange(property.path, value),
      value: value ?? '',
      disabled: property.isDisabled
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      type: "button",
      size: "icon",
      onClick: () => setIsInput(!isInput)
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Eye"
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$4 = allowOverride( /*#__PURE__*/React$1.memo(Edit$5, recordPropertyIsEqual), 'DefaultPasswordEditProperty');

  /* eslint-disable import/prefer-default-export */

  var password = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$4
  });

  function _extends$b() { _extends$b = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }
  const Edit$4 = props => {
    const {
      onChange,
      property,
      record
    } = props;
    const propValue = record.params?.[property.path] ?? '';
    const [value, setValue] = React$1.useState(propValue);
    const error = record.errors?.[property.path];
    React$1.useEffect(() => {
      if (value !== propValue) {
        setValue(propValue);
      }
    }, [propValue]);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.PhoneInput, _extends$b({
      id: property.path,
      inputProps: {
        name: property.path,
        required: property.isRequired
      },
      onChange: setValue,
      onBlur: () => onChange(property.path, value),
      value: value
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit$3 = allowOverride( /*#__PURE__*/React$1.memo(Edit$4, recordPropertyIsEqual), 'DefaultPhoneEditProperty');

  function _extends$a() { _extends$a = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }
  const Filter$1 = props => {
    const {
      onChange,
      property,
      filter
    } = props;
    const handleChange = React$1.useCallback(value => {
      onChange(property.path, value);
    }, []);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      variant: "filter"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.PhoneInput, _extends$a({
      id: property.path,
      inputProps: {
        name: `filter-${property.path}`
      },
      onChange: handleChange,
      value: filter[property.path]
    }, property.props)));
  };
  var filter$1 = allowOverride(Filter$1, 'DefaultPhoneFilterProperty');

  const List$3 = props => /*#__PURE__*/React__default$1.default.createElement(DefaultPropertyValue$1, props);
  var list$2 = allowOverride(List$3, 'DefaultPhoneListProperty');

  const Show$4 = props => {
    const {
      property
    } = props;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(DefaultPropertyValue$1, props));
  };
  var show$3 = allowOverride(Show$4, 'DefaultPhoneShowProperty');

  var phone = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$3,
    filter: filter$1,
    list: list$2,
    show: show$3
  });

  function _extends$9() { _extends$9 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }
  const Edit$3 = props => {
    const {
      onChange,
      property,
      record
    } = props;
    const {
      reference: resourceId
    } = property;
    if (!resourceId) {
      throw new Error(`Cannot reference resource in property '${property.path}'`);
    }
    const handleChange = selected => {
      if (selected) {
        onChange(property.path, selected.value, selected.record);
      } else {
        onChange(property.path, null);
      }
    };
    const loadOptions = async inputValue => {
      const api = new ApiClient();
      const optionRecords = await api.searchRecords({
        resourceId,
        query: inputValue
      });
      return optionRecords.map(optionRecord => ({
        value: optionRecord.id,
        label: optionRecord.title,
        record: optionRecord
      }));
    };
    const error = record?.errors[property.path];
    const selectedId = React$1.useMemo(() => flat.get(record?.params, property.path), [record]);
    const [loadedRecord, setLoadedRecord] = React$1.useState();
    const [loadingRecord, setLoadingRecord] = React$1.useState(0);
    React$1.useEffect(() => {
      if (selectedId) {
        setLoadingRecord(c => c + 1);
        const api = new ApiClient();
        api.recordAction({
          actionName: 'show',
          resourceId,
          recordId: selectedId
        }).then(({
          data
        }) => {
          setLoadedRecord(data.record);
        }).finally(() => {
          setLoadingRecord(c => c - 1);
        });
      }
    }, [selectedId, resourceId]);
    const selectedValue = loadedRecord;
    const selectedOption = selectedId && selectedValue ? {
      value: selectedValue.id,
      label: selectedValue.title
    } : {
      value: '',
      label: ''
    };
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.SelectAsync, _extends$9({
      cacheOptions: true,
      value: selectedOption,
      defaultOptions: true,
      loadOptions: loadOptions,
      onChange: handleChange,
      isClearable: true,
      isDisabled: property.isDisabled,
      isLoading: !!loadingRecord
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error?.message));
  };
  var edit$2 = allowOverride( /*#__PURE__*/React$1.memo(Edit$3, recordPropertyIsEqual), 'DefaultReferenceEditProperty');

  const StyledLink = styledComponents.styled(reactRouterDom.Link)`
  ${DesignSystem.ButtonCSS};
  padding-left: ${({
  theme
}) => theme.space.xs};
  padding-right: ${({
  theme
}) => theme.space.xs};
`;
  const ReferenceValue = props => {
    const {
      property,
      record
    } = props;
    const h = new ViewHelpers();
    const refId = record.params[property.path];
    const populated = record.populated[property.path];
    const value = populated && populated.title || refId;
    if (!property.reference) {
      throw new Error(`property: "${property.path}" does not have a reference`);
    }
    if (populated?.recordActions?.find(a => a.name === 'show')) {
      const href = h.recordActionUrl({
        resourceId: property.reference,
        recordId: refId,
        actionName: 'show'
      });
      return /*#__PURE__*/React__default$1.default.createElement(StyledLink, {
        variant: "text",
        to: href
      }, value);
    }
    return /*#__PURE__*/React__default$1.default.createElement("span", null, value);
  };
  var ReferenceValue$1 = allowOverride(ReferenceValue, 'DefaultReferenceValue');

  const Show$3 = props => {
    const {
      property,
      record
    } = props;
    const {
      translateProperty
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(ReferenceValue$1, {
      property: property,
      record: record
    }));
  };
  var show$2 = allowOverride(Show$3, 'DefaultReferenceShowProperty');

  const List$2 = props => /*#__PURE__*/React__default$1.default.createElement(ReferenceValue$1, props);
  var list$1 = allowOverride(List$2, 'DefaultReferenceListProperty');

  const Filter = props => {
    const {
      property,
      filter,
      onChange
    } = props;
    const [options, setOptions] = React$1.useState([]);
    const api = new ApiClient();
    const handleChange = selected => {
      onChange(property.path, selected ? selected.value : '');
    };
    const loadOptions = async inputValue => {
      const records = await api.searchRecords({
        resourceId: property.reference,
        query: inputValue
      });
      const loadedOptions = records.map(r => ({
        value: r.id,
        label: r.title
      }));
      setOptions(loadedOptions);
      return loadedOptions;
    };
    const value = typeof filter[property.path] === 'undefined' ? '' : filter[property.path];
    const selected = (options || []).find(o => String(o.value) === String(value));
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property,
      filter: true
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.SelectAsync, {
      variant: "filter",
      value: typeof selected === 'undefined' ? '' : selected,
      isClearable: true,
      cacheOptions: true,
      loadOptions: loadOptions,
      onChange: handleChange,
      defaultOptions: true
    }));
  };
  var filter = allowOverride(Filter, 'DefaultReferenceFilterProperty');

  var reference = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$2,
    filter: filter,
    list: list$1,
    show: show$2
  });

  const Edit$2 = props => {
    const {
      property,
      record,
      onChange
    } = props;
    const value = record.params?.[property.path];
    const error = record.errors && record.errors[property.path];
    const handleUpdate = React$1.useCallback(newValue => {
      onChange(property.path, newValue);
    }, []);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.RichTextEditor, {
      value: value,
      onChange: handleUpdate,
      options: property.props
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error?.message));
  };
  var edit$1 = allowOverride( /*#__PURE__*/React$1.memo(Edit$2, recordPropertyIsEqual), 'DefaultRichtextEditProperty');

  var lib$1 = {exports: {}};

  var _default$1 = {};

  var lib = {exports: {}};

  var _default = {};

  /**
   * cssfilter
   *
   * @author 老雷<leizongmin@gmail.com>
   */

  function getDefaultWhiteList$1 () {
    // 白名单值说明：
    // true: 允许该属性
    // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
    // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
    // 除上面列出的值外均表示不允许
    var whiteList = {};

    whiteList['align-content'] = false; // default: auto
    whiteList['align-items'] = false; // default: auto
    whiteList['align-self'] = false; // default: auto
    whiteList['alignment-adjust'] = false; // default: auto
    whiteList['alignment-baseline'] = false; // default: baseline
    whiteList['all'] = false; // default: depending on individual properties
    whiteList['anchor-point'] = false; // default: none
    whiteList['animation'] = false; // default: depending on individual properties
    whiteList['animation-delay'] = false; // default: 0
    whiteList['animation-direction'] = false; // default: normal
    whiteList['animation-duration'] = false; // default: 0
    whiteList['animation-fill-mode'] = false; // default: none
    whiteList['animation-iteration-count'] = false; // default: 1
    whiteList['animation-name'] = false; // default: none
    whiteList['animation-play-state'] = false; // default: running
    whiteList['animation-timing-function'] = false; // default: ease
    whiteList['azimuth'] = false; // default: center
    whiteList['backface-visibility'] = false; // default: visible
    whiteList['background'] = true; // default: depending on individual properties
    whiteList['background-attachment'] = true; // default: scroll
    whiteList['background-clip'] = true; // default: border-box
    whiteList['background-color'] = true; // default: transparent
    whiteList['background-image'] = true; // default: none
    whiteList['background-origin'] = true; // default: padding-box
    whiteList['background-position'] = true; // default: 0% 0%
    whiteList['background-repeat'] = true; // default: repeat
    whiteList['background-size'] = true; // default: auto
    whiteList['baseline-shift'] = false; // default: baseline
    whiteList['binding'] = false; // default: none
    whiteList['bleed'] = false; // default: 6pt
    whiteList['bookmark-label'] = false; // default: content()
    whiteList['bookmark-level'] = false; // default: none
    whiteList['bookmark-state'] = false; // default: open
    whiteList['border'] = true; // default: depending on individual properties
    whiteList['border-bottom'] = true; // default: depending on individual properties
    whiteList['border-bottom-color'] = true; // default: current color
    whiteList['border-bottom-left-radius'] = true; // default: 0
    whiteList['border-bottom-right-radius'] = true; // default: 0
    whiteList['border-bottom-style'] = true; // default: none
    whiteList['border-bottom-width'] = true; // default: medium
    whiteList['border-collapse'] = true; // default: separate
    whiteList['border-color'] = true; // default: depending on individual properties
    whiteList['border-image'] = true; // default: none
    whiteList['border-image-outset'] = true; // default: 0
    whiteList['border-image-repeat'] = true; // default: stretch
    whiteList['border-image-slice'] = true; // default: 100%
    whiteList['border-image-source'] = true; // default: none
    whiteList['border-image-width'] = true; // default: 1
    whiteList['border-left'] = true; // default: depending on individual properties
    whiteList['border-left-color'] = true; // default: current color
    whiteList['border-left-style'] = true; // default: none
    whiteList['border-left-width'] = true; // default: medium
    whiteList['border-radius'] = true; // default: 0
    whiteList['border-right'] = true; // default: depending on individual properties
    whiteList['border-right-color'] = true; // default: current color
    whiteList['border-right-style'] = true; // default: none
    whiteList['border-right-width'] = true; // default: medium
    whiteList['border-spacing'] = true; // default: 0
    whiteList['border-style'] = true; // default: depending on individual properties
    whiteList['border-top'] = true; // default: depending on individual properties
    whiteList['border-top-color'] = true; // default: current color
    whiteList['border-top-left-radius'] = true; // default: 0
    whiteList['border-top-right-radius'] = true; // default: 0
    whiteList['border-top-style'] = true; // default: none
    whiteList['border-top-width'] = true; // default: medium
    whiteList['border-width'] = true; // default: depending on individual properties
    whiteList['bottom'] = false; // default: auto
    whiteList['box-decoration-break'] = true; // default: slice
    whiteList['box-shadow'] = true; // default: none
    whiteList['box-sizing'] = true; // default: content-box
    whiteList['box-snap'] = true; // default: none
    whiteList['box-suppress'] = true; // default: show
    whiteList['break-after'] = true; // default: auto
    whiteList['break-before'] = true; // default: auto
    whiteList['break-inside'] = true; // default: auto
    whiteList['caption-side'] = false; // default: top
    whiteList['chains'] = false; // default: none
    whiteList['clear'] = true; // default: none
    whiteList['clip'] = false; // default: auto
    whiteList['clip-path'] = false; // default: none
    whiteList['clip-rule'] = false; // default: nonzero
    whiteList['color'] = true; // default: implementation dependent
    whiteList['color-interpolation-filters'] = true; // default: auto
    whiteList['column-count'] = false; // default: auto
    whiteList['column-fill'] = false; // default: balance
    whiteList['column-gap'] = false; // default: normal
    whiteList['column-rule'] = false; // default: depending on individual properties
    whiteList['column-rule-color'] = false; // default: current color
    whiteList['column-rule-style'] = false; // default: medium
    whiteList['column-rule-width'] = false; // default: medium
    whiteList['column-span'] = false; // default: none
    whiteList['column-width'] = false; // default: auto
    whiteList['columns'] = false; // default: depending on individual properties
    whiteList['contain'] = false; // default: none
    whiteList['content'] = false; // default: normal
    whiteList['counter-increment'] = false; // default: none
    whiteList['counter-reset'] = false; // default: none
    whiteList['counter-set'] = false; // default: none
    whiteList['crop'] = false; // default: auto
    whiteList['cue'] = false; // default: depending on individual properties
    whiteList['cue-after'] = false; // default: none
    whiteList['cue-before'] = false; // default: none
    whiteList['cursor'] = false; // default: auto
    whiteList['direction'] = false; // default: ltr
    whiteList['display'] = true; // default: depending on individual properties
    whiteList['display-inside'] = true; // default: auto
    whiteList['display-list'] = true; // default: none
    whiteList['display-outside'] = true; // default: inline-level
    whiteList['dominant-baseline'] = false; // default: auto
    whiteList['elevation'] = false; // default: level
    whiteList['empty-cells'] = false; // default: show
    whiteList['filter'] = false; // default: none
    whiteList['flex'] = false; // default: depending on individual properties
    whiteList['flex-basis'] = false; // default: auto
    whiteList['flex-direction'] = false; // default: row
    whiteList['flex-flow'] = false; // default: depending on individual properties
    whiteList['flex-grow'] = false; // default: 0
    whiteList['flex-shrink'] = false; // default: 1
    whiteList['flex-wrap'] = false; // default: nowrap
    whiteList['float'] = false; // default: none
    whiteList['float-offset'] = false; // default: 0 0
    whiteList['flood-color'] = false; // default: black
    whiteList['flood-opacity'] = false; // default: 1
    whiteList['flow-from'] = false; // default: none
    whiteList['flow-into'] = false; // default: none
    whiteList['font'] = true; // default: depending on individual properties
    whiteList['font-family'] = true; // default: implementation dependent
    whiteList['font-feature-settings'] = true; // default: normal
    whiteList['font-kerning'] = true; // default: auto
    whiteList['font-language-override'] = true; // default: normal
    whiteList['font-size'] = true; // default: medium
    whiteList['font-size-adjust'] = true; // default: none
    whiteList['font-stretch'] = true; // default: normal
    whiteList['font-style'] = true; // default: normal
    whiteList['font-synthesis'] = true; // default: weight style
    whiteList['font-variant'] = true; // default: normal
    whiteList['font-variant-alternates'] = true; // default: normal
    whiteList['font-variant-caps'] = true; // default: normal
    whiteList['font-variant-east-asian'] = true; // default: normal
    whiteList['font-variant-ligatures'] = true; // default: normal
    whiteList['font-variant-numeric'] = true; // default: normal
    whiteList['font-variant-position'] = true; // default: normal
    whiteList['font-weight'] = true; // default: normal
    whiteList['grid'] = false; // default: depending on individual properties
    whiteList['grid-area'] = false; // default: depending on individual properties
    whiteList['grid-auto-columns'] = false; // default: auto
    whiteList['grid-auto-flow'] = false; // default: none
    whiteList['grid-auto-rows'] = false; // default: auto
    whiteList['grid-column'] = false; // default: depending on individual properties
    whiteList['grid-column-end'] = false; // default: auto
    whiteList['grid-column-start'] = false; // default: auto
    whiteList['grid-row'] = false; // default: depending on individual properties
    whiteList['grid-row-end'] = false; // default: auto
    whiteList['grid-row-start'] = false; // default: auto
    whiteList['grid-template'] = false; // default: depending on individual properties
    whiteList['grid-template-areas'] = false; // default: none
    whiteList['grid-template-columns'] = false; // default: none
    whiteList['grid-template-rows'] = false; // default: none
    whiteList['hanging-punctuation'] = false; // default: none
    whiteList['height'] = true; // default: auto
    whiteList['hyphens'] = false; // default: manual
    whiteList['icon'] = false; // default: auto
    whiteList['image-orientation'] = false; // default: auto
    whiteList['image-resolution'] = false; // default: normal
    whiteList['ime-mode'] = false; // default: auto
    whiteList['initial-letters'] = false; // default: normal
    whiteList['inline-box-align'] = false; // default: last
    whiteList['justify-content'] = false; // default: auto
    whiteList['justify-items'] = false; // default: auto
    whiteList['justify-self'] = false; // default: auto
    whiteList['left'] = false; // default: auto
    whiteList['letter-spacing'] = true; // default: normal
    whiteList['lighting-color'] = true; // default: white
    whiteList['line-box-contain'] = false; // default: block inline replaced
    whiteList['line-break'] = false; // default: auto
    whiteList['line-grid'] = false; // default: match-parent
    whiteList['line-height'] = false; // default: normal
    whiteList['line-snap'] = false; // default: none
    whiteList['line-stacking'] = false; // default: depending on individual properties
    whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
    whiteList['line-stacking-shift'] = false; // default: consider-shifts
    whiteList['line-stacking-strategy'] = false; // default: inline-line-height
    whiteList['list-style'] = true; // default: depending on individual properties
    whiteList['list-style-image'] = true; // default: none
    whiteList['list-style-position'] = true; // default: outside
    whiteList['list-style-type'] = true; // default: disc
    whiteList['margin'] = true; // default: depending on individual properties
    whiteList['margin-bottom'] = true; // default: 0
    whiteList['margin-left'] = true; // default: 0
    whiteList['margin-right'] = true; // default: 0
    whiteList['margin-top'] = true; // default: 0
    whiteList['marker-offset'] = false; // default: auto
    whiteList['marker-side'] = false; // default: list-item
    whiteList['marks'] = false; // default: none
    whiteList['mask'] = false; // default: border-box
    whiteList['mask-box'] = false; // default: see individual properties
    whiteList['mask-box-outset'] = false; // default: 0
    whiteList['mask-box-repeat'] = false; // default: stretch
    whiteList['mask-box-slice'] = false; // default: 0 fill
    whiteList['mask-box-source'] = false; // default: none
    whiteList['mask-box-width'] = false; // default: auto
    whiteList['mask-clip'] = false; // default: border-box
    whiteList['mask-image'] = false; // default: none
    whiteList['mask-origin'] = false; // default: border-box
    whiteList['mask-position'] = false; // default: center
    whiteList['mask-repeat'] = false; // default: no-repeat
    whiteList['mask-size'] = false; // default: border-box
    whiteList['mask-source-type'] = false; // default: auto
    whiteList['mask-type'] = false; // default: luminance
    whiteList['max-height'] = true; // default: none
    whiteList['max-lines'] = false; // default: none
    whiteList['max-width'] = true; // default: none
    whiteList['min-height'] = true; // default: 0
    whiteList['min-width'] = true; // default: 0
    whiteList['move-to'] = false; // default: normal
    whiteList['nav-down'] = false; // default: auto
    whiteList['nav-index'] = false; // default: auto
    whiteList['nav-left'] = false; // default: auto
    whiteList['nav-right'] = false; // default: auto
    whiteList['nav-up'] = false; // default: auto
    whiteList['object-fit'] = false; // default: fill
    whiteList['object-position'] = false; // default: 50% 50%
    whiteList['opacity'] = false; // default: 1
    whiteList['order'] = false; // default: 0
    whiteList['orphans'] = false; // default: 2
    whiteList['outline'] = false; // default: depending on individual properties
    whiteList['outline-color'] = false; // default: invert
    whiteList['outline-offset'] = false; // default: 0
    whiteList['outline-style'] = false; // default: none
    whiteList['outline-width'] = false; // default: medium
    whiteList['overflow'] = false; // default: depending on individual properties
    whiteList['overflow-wrap'] = false; // default: normal
    whiteList['overflow-x'] = false; // default: visible
    whiteList['overflow-y'] = false; // default: visible
    whiteList['padding'] = true; // default: depending on individual properties
    whiteList['padding-bottom'] = true; // default: 0
    whiteList['padding-left'] = true; // default: 0
    whiteList['padding-right'] = true; // default: 0
    whiteList['padding-top'] = true; // default: 0
    whiteList['page'] = false; // default: auto
    whiteList['page-break-after'] = false; // default: auto
    whiteList['page-break-before'] = false; // default: auto
    whiteList['page-break-inside'] = false; // default: auto
    whiteList['page-policy'] = false; // default: start
    whiteList['pause'] = false; // default: implementation dependent
    whiteList['pause-after'] = false; // default: implementation dependent
    whiteList['pause-before'] = false; // default: implementation dependent
    whiteList['perspective'] = false; // default: none
    whiteList['perspective-origin'] = false; // default: 50% 50%
    whiteList['pitch'] = false; // default: medium
    whiteList['pitch-range'] = false; // default: 50
    whiteList['play-during'] = false; // default: auto
    whiteList['position'] = false; // default: static
    whiteList['presentation-level'] = false; // default: 0
    whiteList['quotes'] = false; // default: text
    whiteList['region-fragment'] = false; // default: auto
    whiteList['resize'] = false; // default: none
    whiteList['rest'] = false; // default: depending on individual properties
    whiteList['rest-after'] = false; // default: none
    whiteList['rest-before'] = false; // default: none
    whiteList['richness'] = false; // default: 50
    whiteList['right'] = false; // default: auto
    whiteList['rotation'] = false; // default: 0
    whiteList['rotation-point'] = false; // default: 50% 50%
    whiteList['ruby-align'] = false; // default: auto
    whiteList['ruby-merge'] = false; // default: separate
    whiteList['ruby-position'] = false; // default: before
    whiteList['shape-image-threshold'] = false; // default: 0.0
    whiteList['shape-outside'] = false; // default: none
    whiteList['shape-margin'] = false; // default: 0
    whiteList['size'] = false; // default: auto
    whiteList['speak'] = false; // default: auto
    whiteList['speak-as'] = false; // default: normal
    whiteList['speak-header'] = false; // default: once
    whiteList['speak-numeral'] = false; // default: continuous
    whiteList['speak-punctuation'] = false; // default: none
    whiteList['speech-rate'] = false; // default: medium
    whiteList['stress'] = false; // default: 50
    whiteList['string-set'] = false; // default: none
    whiteList['tab-size'] = false; // default: 8
    whiteList['table-layout'] = false; // default: auto
    whiteList['text-align'] = true; // default: start
    whiteList['text-align-last'] = true; // default: auto
    whiteList['text-combine-upright'] = true; // default: none
    whiteList['text-decoration'] = true; // default: none
    whiteList['text-decoration-color'] = true; // default: currentColor
    whiteList['text-decoration-line'] = true; // default: none
    whiteList['text-decoration-skip'] = true; // default: objects
    whiteList['text-decoration-style'] = true; // default: solid
    whiteList['text-emphasis'] = true; // default: depending on individual properties
    whiteList['text-emphasis-color'] = true; // default: currentColor
    whiteList['text-emphasis-position'] = true; // default: over right
    whiteList['text-emphasis-style'] = true; // default: none
    whiteList['text-height'] = true; // default: auto
    whiteList['text-indent'] = true; // default: 0
    whiteList['text-justify'] = true; // default: auto
    whiteList['text-orientation'] = true; // default: mixed
    whiteList['text-overflow'] = true; // default: clip
    whiteList['text-shadow'] = true; // default: none
    whiteList['text-space-collapse'] = true; // default: collapse
    whiteList['text-transform'] = true; // default: none
    whiteList['text-underline-position'] = true; // default: auto
    whiteList['text-wrap'] = true; // default: normal
    whiteList['top'] = false; // default: auto
    whiteList['transform'] = false; // default: none
    whiteList['transform-origin'] = false; // default: 50% 50% 0
    whiteList['transform-style'] = false; // default: flat
    whiteList['transition'] = false; // default: depending on individual properties
    whiteList['transition-delay'] = false; // default: 0s
    whiteList['transition-duration'] = false; // default: 0s
    whiteList['transition-property'] = false; // default: all
    whiteList['transition-timing-function'] = false; // default: ease
    whiteList['unicode-bidi'] = false; // default: normal
    whiteList['vertical-align'] = false; // default: baseline
    whiteList['visibility'] = false; // default: visible
    whiteList['voice-balance'] = false; // default: center
    whiteList['voice-duration'] = false; // default: auto
    whiteList['voice-family'] = false; // default: implementation dependent
    whiteList['voice-pitch'] = false; // default: medium
    whiteList['voice-range'] = false; // default: medium
    whiteList['voice-rate'] = false; // default: normal
    whiteList['voice-stress'] = false; // default: normal
    whiteList['voice-volume'] = false; // default: medium
    whiteList['volume'] = false; // default: medium
    whiteList['white-space'] = false; // default: normal
    whiteList['widows'] = false; // default: 2
    whiteList['width'] = true; // default: auto
    whiteList['will-change'] = false; // default: auto
    whiteList['word-break'] = true; // default: normal
    whiteList['word-spacing'] = true; // default: normal
    whiteList['word-wrap'] = true; // default: normal
    whiteList['wrap-flow'] = false; // default: auto
    whiteList['wrap-through'] = false; // default: wrap
    whiteList['writing-mode'] = false; // default: horizontal-tb
    whiteList['z-index'] = false; // default: auto

    return whiteList;
  }


  /**
   * 匹配到白名单上的一个属性时
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @return {String}
   */
  function onAttr (name, value, options) {
    // do nothing
  }

  /**
   * 匹配到不在白名单上的一个属性时
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @return {String}
   */
  function onIgnoreAttr (name, value, options) {
    // do nothing
  }

  var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;

  /**
   * 过滤属性值
   *
   * @param {String} name
   * @param {String} value
   * @return {String}
   */
  function safeAttrValue$1(name, value) {
    if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
    return value;
  }


  _default.whiteList = getDefaultWhiteList$1();
  _default.getDefaultWhiteList = getDefaultWhiteList$1;
  _default.onAttr = onAttr;
  _default.onIgnoreAttr = onIgnoreAttr;
  _default.safeAttrValue = safeAttrValue$1;

  var util$1 = {
    indexOf: function (arr, item) {
      var i, j;
      if (Array.prototype.indexOf) {
        return arr.indexOf(item);
      }
      for (i = 0, j = arr.length; i < j; i++) {
        if (arr[i] === item) {
          return i;
        }
      }
      return -1;
    },
    forEach: function (arr, fn, scope) {
      var i, j;
      if (Array.prototype.forEach) {
        return arr.forEach(fn, scope);
      }
      for (i = 0, j = arr.length; i < j; i++) {
        fn.call(scope, arr[i], i, arr);
      }
    },
    trim: function (str) {
      if (String.prototype.trim) {
        return str.trim();
      }
      return str.replace(/(^\s*)|(\s*$)/g, '');
    },
    trimRight: function (str) {
      if (String.prototype.trimRight) {
        return str.trimRight();
      }
      return str.replace(/(\s*$)/g, '');
    }
  };

  /**
   * cssfilter
   *
   * @author 老雷<leizongmin@gmail.com>
   */

  var _$3 = util$1;


  /**
   * 解析style
   *
   * @param {String} css
   * @param {Function} onAttr 处理属性的函数
   *   参数格式： function (sourcePosition, position, name, value, source)
   * @return {String}
   */
  function parseStyle$1 (css, onAttr) {
    css = _$3.trimRight(css);
    if (css[css.length - 1] !== ';') css += ';';
    var cssLength = css.length;
    var isParenthesisOpen = false;
    var lastPos = 0;
    var i = 0;
    var retCSS = '';

    function addNewAttr () {
      // 如果没有正常的闭合圆括号，则直接忽略当前属性
      if (!isParenthesisOpen) {
        var source = _$3.trim(css.slice(lastPos, i));
        var j = source.indexOf(':');
        if (j !== -1) {
          var name = _$3.trim(source.slice(0, j));
          var value = _$3.trim(source.slice(j + 1));
          // 必须有属性名称
          if (name) {
            var ret = onAttr(lastPos, retCSS.length, name, value, source);
            if (ret) retCSS += ret + '; ';
          }
        }
      }
      lastPos = i + 1;
    }

    for (; i < cssLength; i++) {
      var c = css[i];
      if (c === '/' && css[i + 1] === '*') {
        // 备注开始
        var j = css.indexOf('*/', i + 2);
        // 如果没有正常的备注结束，则后面的部分全部跳过
        if (j === -1) break;
        // 直接将当前位置调到备注结尾，并且初始化状态
        i = j + 1;
        lastPos = i + 1;
        isParenthesisOpen = false;
      } else if (c === '(') {
        isParenthesisOpen = true;
      } else if (c === ')') {
        isParenthesisOpen = false;
      } else if (c === ';') {
        if (isParenthesisOpen) ; else {
          addNewAttr();
        }
      } else if (c === '\n') {
        addNewAttr();
      }
    }

    return _$3.trim(retCSS);
  }

  var parser$2 = parseStyle$1;

  /**
   * cssfilter
   *
   * @author 老雷<leizongmin@gmail.com>
   */

  var DEFAULT$1 = _default;
  var parseStyle = parser$2;


  /**
   * 返回值是否为空
   *
   * @param {Object} obj
   * @return {Boolean}
   */
  function isNull$1 (obj) {
    return (obj === undefined || obj === null);
  }

  /**
   * 浅拷贝对象
   *
   * @param {Object} obj
   * @return {Object}
   */
  function shallowCopyObject$1 (obj) {
    var ret = {};
    for (var i in obj) {
      ret[i] = obj[i];
    }
    return ret;
  }

  /**
   * 创建CSS过滤器
   *
   * @param {Object} options
   *   - {Object} whiteList
   *   - {Function} onAttr
   *   - {Function} onIgnoreAttr
   *   - {Function} safeAttrValue
   */
  function FilterCSS$2 (options) {
    options = shallowCopyObject$1(options || {});
    options.whiteList = options.whiteList || DEFAULT$1.whiteList;
    options.onAttr = options.onAttr || DEFAULT$1.onAttr;
    options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT$1.onIgnoreAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT$1.safeAttrValue;
    this.options = options;
  }

  FilterCSS$2.prototype.process = function (css) {
    // 兼容各种奇葩输入
    css = css || '';
    css = css.toString();
    if (!css) return '';

    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onAttr = options.onAttr;
    var onIgnoreAttr = options.onIgnoreAttr;
    var safeAttrValue = options.safeAttrValue;

    var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {

      var check = whiteList[name];
      var isWhite = false;
      if (check === true) isWhite = check;
      else if (typeof check === 'function') isWhite = check(value);
      else if (check instanceof RegExp) isWhite = check.test(value);
      if (isWhite !== true) isWhite = false;

      // 如果过滤后 value 为空则直接忽略
      value = safeAttrValue(name, value);
      if (!value) return;

      var opts = {
        position: position,
        sourcePosition: sourcePosition,
        source: source,
        isWhite: isWhite
      };

      if (isWhite) {

        var ret = onAttr(name, value, opts);
        if (isNull$1(ret)) {
          return name + ':' + value;
        } else {
          return ret;
        }

      } else {

        var ret = onIgnoreAttr(name, value, opts);
        if (!isNull$1(ret)) {
          return ret;
        }

      }
    });

    return retCSS;
  };


  var css = FilterCSS$2;

  /**
   * cssfilter
   *
   * @author 老雷<leizongmin@gmail.com>
   */

  (function (module, exports) {
  	var DEFAULT = _default;
  	var FilterCSS = css;


  	/**
  	 * XSS过滤
  	 *
  	 * @param {String} css 要过滤的CSS代码
  	 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
  	 * @return {String}
  	 */
  	function filterCSS (html, options) {
  	  var xss = new FilterCSS(options);
  	  return xss.process(html);
  	}


  	// 输出
  	exports = module.exports = filterCSS;
  	exports.FilterCSS = FilterCSS;
  	for (var i in DEFAULT) exports[i] = DEFAULT[i];

  	// 在浏览器端使用
  	if (typeof window !== 'undefined') {
  	  window.filterCSS = module.exports;
  	} 
  } (lib, lib.exports));

  var libExports$1 = lib.exports;

  var util = {
    indexOf: function (arr, item) {
      var i, j;
      if (Array.prototype.indexOf) {
        return arr.indexOf(item);
      }
      for (i = 0, j = arr.length; i < j; i++) {
        if (arr[i] === item) {
          return i;
        }
      }
      return -1;
    },
    forEach: function (arr, fn, scope) {
      var i, j;
      if (Array.prototype.forEach) {
        return arr.forEach(fn, scope);
      }
      for (i = 0, j = arr.length; i < j; i++) {
        fn.call(scope, arr[i], i, arr);
      }
    },
    trim: function (str) {
      if (String.prototype.trim) {
        return str.trim();
      }
      return str.replace(/(^\s*)|(\s*$)/g, "");
    },
    spaceIndex: function (str) {
      var reg = /\s|\n|\t/;
      var match = reg.exec(str);
      return match ? match.index : -1;
    },
  };

  /**
   * default settings
   *
   * @author Zongmin Lei<leizongmin@gmail.com>
   */

  var FilterCSS$1 = libExports$1.FilterCSS;
  var getDefaultCSSWhiteList = libExports$1.getDefaultWhiteList;
  var _$2 = util;

  function getDefaultWhiteList() {
    return {
      a: ["target", "href", "title"],
      abbr: ["title"],
      address: [],
      area: ["shape", "coords", "href", "alt"],
      article: [],
      aside: [],
      audio: [
        "autoplay",
        "controls",
        "crossorigin",
        "loop",
        "muted",
        "preload",
        "src",
      ],
      b: [],
      bdi: ["dir"],
      bdo: ["dir"],
      big: [],
      blockquote: ["cite"],
      br: [],
      caption: [],
      center: [],
      cite: [],
      code: [],
      col: ["align", "valign", "span", "width"],
      colgroup: ["align", "valign", "span", "width"],
      dd: [],
      del: ["datetime"],
      details: ["open"],
      div: [],
      dl: [],
      dt: [],
      em: [],
      figcaption: [],
      figure: [],
      font: ["color", "size", "face"],
      footer: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      header: [],
      hr: [],
      i: [],
      img: ["src", "alt", "title", "width", "height"],
      ins: ["datetime"],
      li: [],
      mark: [],
      nav: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      section: [],
      small: [],
      span: [],
      sub: [],
      summary: [],
      sup: [],
      strong: [],
      strike: [],
      table: ["width", "border", "align", "valign"],
      tbody: ["align", "valign"],
      td: ["width", "rowspan", "colspan", "align", "valign"],
      tfoot: ["align", "valign"],
      th: ["width", "rowspan", "colspan", "align", "valign"],
      thead: ["align", "valign"],
      tr: ["rowspan", "align", "valign"],
      tt: [],
      u: [],
      ul: [],
      video: [
        "autoplay",
        "controls",
        "crossorigin",
        "loop",
        "muted",
        "playsinline",
        "poster",
        "preload",
        "src",
        "height",
        "width",
      ],
    };
  }

  var defaultCSSFilter = new FilterCSS$1();

  /**
   * default onTag function
   *
   * @param {String} tag
   * @param {String} html
   * @param {Object} options
   * @return {String}
   */
  function onTag(tag, html, options) {
    // do nothing
  }

  /**
   * default onIgnoreTag function
   *
   * @param {String} tag
   * @param {String} html
   * @param {Object} options
   * @return {String}
   */
  function onIgnoreTag(tag, html, options) {
    // do nothing
  }

  /**
   * default onTagAttr function
   *
   * @param {String} tag
   * @param {String} name
   * @param {String} value
   * @return {String}
   */
  function onTagAttr(tag, name, value) {
    // do nothing
  }

  /**
   * default onIgnoreTagAttr function
   *
   * @param {String} tag
   * @param {String} name
   * @param {String} value
   * @return {String}
   */
  function onIgnoreTagAttr(tag, name, value) {
    // do nothing
  }

  /**
   * default escapeHtml function
   *
   * @param {String} html
   */
  function escapeHtml(html) {
    return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
  }

  /**
   * default safeAttrValue function
   *
   * @param {String} tag
   * @param {String} name
   * @param {String} value
   * @param {Object} cssFilter
   * @return {String}
   */
  function safeAttrValue(tag, name, value, cssFilter) {
    // unescape attribute value firstly
    value = friendlyAttrValue(value);

    if (name === "href" || name === "src") {
      // filter `href` and `src` attribute
      // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
      value = _$2.trim(value);
      if (value === "#") return "#";
      if (
        !(
          value.substr(0, 7) === "http://" ||
          value.substr(0, 8) === "https://" ||
          value.substr(0, 7) === "mailto:" ||
          value.substr(0, 4) === "tel:" ||
          value.substr(0, 11) === "data:image/" ||
          value.substr(0, 6) === "ftp://" ||
          value.substr(0, 2) === "./" ||
          value.substr(0, 3) === "../" ||
          value[0] === "#" ||
          value[0] === "/"
        )
      ) {
        return "";
      }
    } else if (name === "background") {
      // filter `background` attribute (maybe no use)
      // `javascript:`
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    } else if (name === "style") {
      // `expression()`
      REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
        return "";
      }
      // `url()`
      REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
          return "";
        }
      }
      if (cssFilter !== false) {
        cssFilter = cssFilter || defaultCSSFilter;
        value = cssFilter.process(value);
      }
    }

    // escape `<>"` before returns
    value = escapeAttrValue(value);
    return value;
  }

  // RegExp list
  var REGEXP_LT = /</g;
  var REGEXP_GT = />/g;
  var REGEXP_QUOTE = /"/g;
  var REGEXP_QUOTE_2 = /&quot;/g;
  var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
  var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
  var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
  // var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
  var REGEXP_DEFAULT_ON_TAG_ATTR_4 =
    /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
  // var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
  // var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_7 =
    /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

  /**
   * escape double quote
   *
   * @param {String} str
   * @return {String} str
   */
  function escapeQuote(str) {
    return str.replace(REGEXP_QUOTE, "&quot;");
  }

  /**
   * unescape double quote
   *
   * @param {String} str
   * @return {String} str
   */
  function unescapeQuote(str) {
    return str.replace(REGEXP_QUOTE_2, '"');
  }

  /**
   * escape html entities
   *
   * @param {String} str
   * @return {String}
   */
  function escapeHtmlEntities(str) {
    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
      return code[0] === "x" || code[0] === "X"
        ? String.fromCharCode(parseInt(code.substr(1), 16))
        : String.fromCharCode(parseInt(code, 10));
    });
  }

  /**
   * escape html5 new danger entities
   *
   * @param {String} str
   * @return {String}
   */
  function escapeDangerHtml5Entities(str) {
    return str
      .replace(REGEXP_ATTR_VALUE_COLON, ":")
      .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
  }

  /**
   * clear nonprintable characters
   *
   * @param {String} str
   * @return {String}
   */
  function clearNonPrintableCharacter(str) {
    var str2 = "";
    for (var i = 0, len = str.length; i < len; i++) {
      str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
    }
    return _$2.trim(str2);
  }

  /**
   * get friendly attribute value
   *
   * @param {String} str
   * @return {String}
   */
  function friendlyAttrValue(str) {
    str = unescapeQuote(str);
    str = escapeHtmlEntities(str);
    str = escapeDangerHtml5Entities(str);
    str = clearNonPrintableCharacter(str);
    return str;
  }

  /**
   * unescape attribute value
   *
   * @param {String} str
   * @return {String}
   */
  function escapeAttrValue(str) {
    str = escapeQuote(str);
    str = escapeHtml(str);
    return str;
  }

  /**
   * `onIgnoreTag` function for removing all the tags that are not in whitelist
   */
  function onIgnoreTagStripAll() {
    return "";
  }

  /**
   * remove tag body
   * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
   *
   * @param {array} tags
   * @param {function} next
   */
  function StripTagBody(tags, next) {
    if (typeof next !== "function") {
      next = function () {};
    }

    var isRemoveAllTag = !Array.isArray(tags);
    function isRemoveTag(tag) {
      if (isRemoveAllTag) return true;
      return _$2.indexOf(tags, tag) !== -1;
    }

    var removeList = [];
    var posStart = false;

    return {
      onIgnoreTag: function (tag, html, options) {
        if (isRemoveTag(tag)) {
          if (options.isClosing) {
            var ret = "[/removed]";
            var end = options.position + ret.length;
            removeList.push([
              posStart !== false ? posStart : options.position,
              end,
            ]);
            posStart = false;
            return ret;
          } else {
            if (!posStart) {
              posStart = options.position;
            }
            return "[removed]";
          }
        } else {
          return next(tag, html, options);
        }
      },
      remove: function (html) {
        var rethtml = "";
        var lastPos = 0;
        _$2.forEach(removeList, function (pos) {
          rethtml += html.slice(lastPos, pos[0]);
          lastPos = pos[1];
        });
        rethtml += html.slice(lastPos);
        return rethtml;
      },
    };
  }

  /**
   * remove html comments
   *
   * @param {String} html
   * @return {String}
   */
  function stripCommentTag(html) {
    var retHtml = "";
    var lastPos = 0;
    while (lastPos < html.length) {
      var i = html.indexOf("<!--", lastPos);
      if (i === -1) {
        retHtml += html.slice(lastPos);
        break;
      }
      retHtml += html.slice(lastPos, i);
      var j = html.indexOf("-->", i);
      if (j === -1) {
        break;
      }
      lastPos = j + 3;
    }
    return retHtml;
  }

  /**
   * remove invisible characters
   *
   * @param {String} html
   * @return {String}
   */
  function stripBlankChar(html) {
    var chars = html.split("");
    chars = chars.filter(function (char) {
      var c = char.charCodeAt(0);
      if (c === 127) return false;
      if (c <= 31) {
        if (c === 10 || c === 13) return true;
        return false;
      }
      return true;
    });
    return chars.join("");
  }

  _default$1.whiteList = getDefaultWhiteList();
  _default$1.getDefaultWhiteList = getDefaultWhiteList;
  _default$1.onTag = onTag;
  _default$1.onIgnoreTag = onIgnoreTag;
  _default$1.onTagAttr = onTagAttr;
  _default$1.onIgnoreTagAttr = onIgnoreTagAttr;
  _default$1.safeAttrValue = safeAttrValue;
  _default$1.escapeHtml = escapeHtml;
  _default$1.escapeQuote = escapeQuote;
  _default$1.unescapeQuote = unescapeQuote;
  _default$1.escapeHtmlEntities = escapeHtmlEntities;
  _default$1.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
  _default$1.clearNonPrintableCharacter = clearNonPrintableCharacter;
  _default$1.friendlyAttrValue = friendlyAttrValue;
  _default$1.escapeAttrValue = escapeAttrValue;
  _default$1.onIgnoreTagStripAll = onIgnoreTagStripAll;
  _default$1.StripTagBody = StripTagBody;
  _default$1.stripCommentTag = stripCommentTag;
  _default$1.stripBlankChar = stripBlankChar;
  _default$1.cssFilter = defaultCSSFilter;
  _default$1.getDefaultCSSWhiteList = getDefaultCSSWhiteList;

  var parser$1 = {};

  /**
   * Simple HTML Parser
   *
   * @author Zongmin Lei<leizongmin@gmail.com>
   */

  var _$1 = util;

  /**
   * get tag name
   *
   * @param {String} html e.g. '<a hef="#">'
   * @return {String}
   */
  function getTagName(html) {
    var i = _$1.spaceIndex(html);
    var tagName;
    if (i === -1) {
      tagName = html.slice(1, -1);
    } else {
      tagName = html.slice(1, i + 1);
    }
    tagName = _$1.trim(tagName).toLowerCase();
    if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
    if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
    return tagName;
  }

  /**
   * is close tag?
   *
   * @param {String} html 如：'<a hef="#">'
   * @return {Boolean}
   */
  function isClosing(html) {
    return html.slice(0, 2) === "</";
  }

  /**
   * parse input html and returns processed html
   *
   * @param {String} html
   * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
   * @param {Function} escapeHtml
   * @return {String}
   */
  function parseTag$1(html, onTag, escapeHtml) {

    var rethtml = "";
    var lastPos = 0;
    var tagStart = false;
    var quoteStart = false;
    var currentPos = 0;
    var len = html.length;
    var currentTagName = "";
    var currentHtml = "";

    chariterator: for (currentPos = 0; currentPos < len; currentPos++) {
      var c = html.charAt(currentPos);
      if (tagStart === false) {
        if (c === "<") {
          tagStart = currentPos;
          continue;
        }
      } else {
        if (quoteStart === false) {
          if (c === "<") {
            rethtml += escapeHtml(html.slice(lastPos, currentPos));
            tagStart = currentPos;
            lastPos = currentPos;
            continue;
          }
          if (c === ">" || currentPos === len - 1) {
            rethtml += escapeHtml(html.slice(lastPos, tagStart));
            currentHtml = html.slice(tagStart, currentPos + 1);
            currentTagName = getTagName(currentHtml);
            rethtml += onTag(
              tagStart,
              rethtml.length,
              currentTagName,
              currentHtml,
              isClosing(currentHtml)
            );
            lastPos = currentPos + 1;
            tagStart = false;
            continue;
          }
          if (c === '"' || c === "'") {
            var i = 1;
            var ic = html.charAt(currentPos - i);

            while (ic.trim() === "" || ic === "=") {
              if (ic === "=") {
                quoteStart = c;
                continue chariterator;
              }
              ic = html.charAt(currentPos - ++i);
            }
          }
        } else {
          if (c === quoteStart) {
            quoteStart = false;
            continue;
          }
        }
      }
    }
    if (lastPos < len) {
      rethtml += escapeHtml(html.substr(lastPos));
    }

    return rethtml;
  }

  var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;

  /**
   * parse input attributes and returns processed attributes
   *
   * @param {String} html e.g. `href="#" target="_blank"`
   * @param {Function} onAttr e.g. `function (name, value)`
   * @return {String}
   */
  function parseAttr$1(html, onAttr) {

    var lastPos = 0;
    var lastMarkPos = 0;
    var retAttrs = [];
    var tmpName = false;
    var len = html.length;

    function addAttr(name, value) {
      name = _$1.trim(name);
      name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
      if (name.length < 1) return;
      var ret = onAttr(name, value || "");
      if (ret) retAttrs.push(ret);
    }

    // 逐个分析字符
    for (var i = 0; i < len; i++) {
      var c = html.charAt(i);
      var v, j;
      if (tmpName === false && c === "=") {
        tmpName = html.slice(lastPos, i);
        lastPos = i + 1;
        lastMarkPos = html.charAt(lastPos) === '"' || html.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html, i + 1);
        continue;
      }
      if (tmpName !== false) {
        if (
          i === lastMarkPos
        ) {
          j = html.indexOf(c, i + 1);
          if (j === -1) {
            break;
          } else {
            v = _$1.trim(html.slice(lastMarkPos + 1, j));
            addAttr(tmpName, v);
            tmpName = false;
            i = j;
            lastPos = i + 1;
            continue;
          }
        }
      }
      if (/\s|\n|\t/.test(c)) {
        html = html.replace(/\s|\n|\t/g, " ");
        if (tmpName === false) {
          j = findNextEqual(html, i);
          if (j === -1) {
            v = _$1.trim(html.slice(lastPos, i));
            addAttr(v);
            tmpName = false;
            lastPos = i + 1;
            continue;
          } else {
            i = j - 1;
            continue;
          }
        } else {
          j = findBeforeEqual(html, i - 1);
          if (j === -1) {
            v = _$1.trim(html.slice(lastPos, i));
            v = stripQuoteWrap(v);
            addAttr(tmpName, v);
            tmpName = false;
            lastPos = i + 1;
            continue;
          } else {
            continue;
          }
        }
      }
    }

    if (lastPos < html.length) {
      if (tmpName === false) {
        addAttr(html.slice(lastPos));
      } else {
        addAttr(tmpName, stripQuoteWrap(_$1.trim(html.slice(lastPos))));
      }
    }

    return _$1.trim(retAttrs.join(" "));
  }

  function findNextEqual(str, i) {
    for (; i < str.length; i++) {
      var c = str[i];
      if (c === " ") continue;
      if (c === "=") return i;
      return -1;
    }
  }

  function findNextQuotationMark(str, i) {
    for (; i < str.length; i++) {
      var c = str[i];
      if (c === " ") continue;
      if (c === "'" || c === '"') return i;
      return -1;
    }
  }

  function findBeforeEqual(str, i) {
    for (; i > 0; i--) {
      var c = str[i];
      if (c === " ") continue;
      if (c === "=") return i;
      return -1;
    }
  }

  function isQuoteWrapString(text) {
    if (
      (text[0] === '"' && text[text.length - 1] === '"') ||
      (text[0] === "'" && text[text.length - 1] === "'")
    ) {
      return true;
    } else {
      return false;
    }
  }

  function stripQuoteWrap(text) {
    if (isQuoteWrapString(text)) {
      return text.substr(1, text.length - 2);
    } else {
      return text;
    }
  }

  parser$1.parseTag = parseTag$1;
  parser$1.parseAttr = parseAttr$1;

  /**
   * filter xss
   *
   * @author Zongmin Lei<leizongmin@gmail.com>
   */

  var FilterCSS = libExports$1.FilterCSS;
  var DEFAULT = _default$1;
  var parser = parser$1;
  var parseTag = parser.parseTag;
  var parseAttr = parser.parseAttr;
  var _ = util;

  /**
   * returns `true` if the input value is `undefined` or `null`
   *
   * @param {Object} obj
   * @return {Boolean}
   */
  function isNull(obj) {
    return obj === undefined || obj === null;
  }

  /**
   * get attributes for a tag
   *
   * @param {String} html
   * @return {Object}
   *   - {String} html
   *   - {Boolean} closing
   */
  function getAttrs(html) {
    var i = _.spaceIndex(html);
    if (i === -1) {
      return {
        html: "",
        closing: html[html.length - 2] === "/",
      };
    }
    html = _.trim(html.slice(i + 1, -1));
    var isClosing = html[html.length - 1] === "/";
    if (isClosing) html = _.trim(html.slice(0, -1));
    return {
      html: html,
      closing: isClosing,
    };
  }

  /**
   * shallow copy
   *
   * @param {Object} obj
   * @return {Object}
   */
  function shallowCopyObject(obj) {
    var ret = {};
    for (var i in obj) {
      ret[i] = obj[i];
    }
    return ret;
  }

  function keysToLowerCase(obj) {
    var ret = {};
    for (var i in obj) {
      if (Array.isArray(obj[i])) {
        ret[i.toLowerCase()] = obj[i].map(function (item) {
          return item.toLowerCase();
        });
      } else {
        ret[i.toLowerCase()] = obj[i];
      }
    }
    return ret;
  }

  /**
   * FilterXSS class
   *
   * @param {Object} options
   *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,
   *        onIgnoreTagAttr, safeAttrValue, escapeHtml
   *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
   *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
   */
  function FilterXSS(options) {
    options = shallowCopyObject(options || {});

    if (options.stripIgnoreTag) {
      if (options.onIgnoreTag) {
        console.error(
          'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
        );
      }
      options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
    }
    if (options.whiteList || options.allowList) {
      options.whiteList = keysToLowerCase(options.whiteList || options.allowList);
    } else {
      options.whiteList = DEFAULT.whiteList;
    }

    options.onTag = options.onTag || DEFAULT.onTag;
    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
    this.options = options;

    if (options.css === false) {
      this.cssFilter = false;
    } else {
      options.css = options.css || {};
      this.cssFilter = new FilterCSS(options.css);
    }
  }

  /**
   * start process and returns result
   *
   * @param {String} html
   * @return {String}
   */
  FilterXSS.prototype.process = function (html) {
    // compatible with the input
    html = html || "";
    html = html.toString();
    if (!html) return "";

    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onTag = options.onTag;
    var onIgnoreTag = options.onIgnoreTag;
    var onTagAttr = options.onTagAttr;
    var onIgnoreTagAttr = options.onIgnoreTagAttr;
    var safeAttrValue = options.safeAttrValue;
    var escapeHtml = options.escapeHtml;
    var cssFilter = me.cssFilter;

    // remove invisible characters
    if (options.stripBlankChar) {
      html = DEFAULT.stripBlankChar(html);
    }

    // remove html comments
    if (!options.allowCommentTag) {
      html = DEFAULT.stripCommentTag(html);
    }

    // if enable stripIgnoreTagBody
    var stripIgnoreTagBody = false;
    if (options.stripIgnoreTagBody) {
      stripIgnoreTagBody = DEFAULT.StripTagBody(
        options.stripIgnoreTagBody,
        onIgnoreTag
      );
      onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
    }

    var retHtml = parseTag(
      html,
      function (sourcePosition, position, tag, html, isClosing) {
        var info = {
          sourcePosition: sourcePosition,
          position: position,
          isClosing: isClosing,
          isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag),
        };

        // call `onTag()`
        var ret = onTag(tag, html, info);
        if (!isNull(ret)) return ret;

        if (info.isWhite) {
          if (info.isClosing) {
            return "</" + tag + ">";
          }

          var attrs = getAttrs(html);
          var whiteAttrList = whiteList[tag];
          var attrsHtml = parseAttr(attrs.html, function (name, value) {
            // call `onTagAttr()`
            var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
            var ret = onTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;

            if (isWhiteAttr) {
              // call `safeAttrValue()`
              value = safeAttrValue(tag, name, value, cssFilter);
              if (value) {
                return name + '="' + value + '"';
              } else {
                return name;
              }
            } else {
              // call `onIgnoreTagAttr()`
              ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
              if (!isNull(ret)) return ret;
              return;
            }
          });

          // build new tag html
          html = "<" + tag;
          if (attrsHtml) html += " " + attrsHtml;
          if (attrs.closing) html += " /";
          html += ">";
          return html;
        } else {
          // call `onIgnoreTag()`
          ret = onIgnoreTag(tag, html, info);
          if (!isNull(ret)) return ret;
          return escapeHtml(html);
        }
      },
      escapeHtml
    );

    // if enable stripIgnoreTagBody
    if (stripIgnoreTagBody) {
      retHtml = stripIgnoreTagBody.remove(retHtml);
    }

    return retHtml;
  };

  var xss$1 = FilterXSS;

  /**
   * xss
   *
   * @author Zongmin Lei<leizongmin@gmail.com>
   */

  (function (module, exports) {
  	var DEFAULT = _default$1;
  	var parser = parser$1;
  	var FilterXSS = xss$1;

  	/**
  	 * filter xss function
  	 *
  	 * @param {String} html
  	 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
  	 * @return {String}
  	 */
  	function filterXSS(html, options) {
  	  var xss = new FilterXSS(options);
  	  return xss.process(html);
  	}

  	exports = module.exports = filterXSS;
  	exports.filterXSS = filterXSS;
  	exports.FilterXSS = FilterXSS;

  	(function () {
  	  for (var i in DEFAULT) {
  	    exports[i] = DEFAULT[i];
  	  }
  	  for (var j in parser) {
  	    exports[j] = parser[j];
  	  }
  	})();

  	// using `xss` on the browser, output `filterXSS` to the globals
  	if (typeof window !== "undefined") {
  	  window.filterXSS = module.exports;
  	}

  	// using `xss` on the WebWorker, output `filterXSS` to the globals
  	function isWorkerEnv() {
  	  return (
  	    typeof self !== "undefined" &&
  	    typeof DedicatedWorkerGlobalScope !== "undefined" &&
  	    self instanceof DedicatedWorkerGlobalScope
  	  );
  	}
  	if (isWorkerEnv()) {
  	  self.filterXSS = module.exports;
  	} 
  } (lib$1, lib$1.exports));

  var libExports = lib$1.exports;
  var xss = /*@__PURE__*/getDefaultExportFromCjs(libExports);

  const Show$2 = props => {
    const {
      property,
      record
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const value = record.params[property.path] || '';
    const createMarkup = html => ({
      __html: xss(html)
    });
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      py: "xl",
      px: ['0', 'xl'],
      border: "default"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      dangerouslySetInnerHTML: createMarkup(value)
    })));
  };
  var show$1 = allowOverride(Show$2, 'DefaultRichtextShowProperty');

  var baseGetTag$3 = _baseGetTag,
      isObjectLike$4 = isObjectLike_1;

  /** `Object#toString` result references. */
  var regexpTag$2 = '[object RegExp]';

  /**
   * The base implementation of `_.isRegExp` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   */
  function baseIsRegExp$1(value) {
    return isObjectLike$4(value) && baseGetTag$3(value) == regexpTag$2;
  }

  var _baseIsRegExp = baseIsRegExp$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$3(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary$3;

  var _nodeUtil = {exports: {}};

  _nodeUtil.exports;

  (function (module, exports) {
  	var freeGlobal = _freeGlobal;

  	/** Detect free variable `exports`. */
  	var freeExports = exports && !exports.nodeType && exports;

  	/** Detect free variable `module`. */
  	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  	/** Detect the popular CommonJS extension `module.exports`. */
  	var moduleExports = freeModule && freeModule.exports === freeExports;

  	/** Detect free variable `process` from Node.js. */
  	var freeProcess = moduleExports && freeGlobal.process;

  	/** Used to access faster Node.js helpers. */
  	var nodeUtil = (function() {
  	  try {
  	    // Use `util.types` for Node.js 10+.
  	    var types = freeModule && freeModule.require && freeModule.require('util').types;

  	    if (types) {
  	      return types;
  	    }

  	    // Legacy `process.binding('util')` for Node.js < 10.
  	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  	  } catch (e) {}
  	}());

  	module.exports = nodeUtil; 
  } (_nodeUtil, _nodeUtil.exports));

  var _nodeUtilExports = _nodeUtil.exports;

  var baseIsRegExp = _baseIsRegExp,
      baseUnary$2 = _baseUnary,
      nodeUtil$1 = _nodeUtilExports;

  /* Node.js helper references. */
  var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp;

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  var isRegExp$1 = nodeIsRegExp ? baseUnary$2(nodeIsRegExp) : baseIsRegExp;

  var isRegExp_1 = isRegExp$1;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty$2(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty$2;

  var baseProperty$1 = _baseProperty;

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize$1 = baseProperty$1('length');

  var _asciiSize = asciiSize$1;

  /** Used to compose unicode character classes. */

  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize$1(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  var _unicodeSize = unicodeSize$1;

  var asciiSize = _asciiSize,
      hasUnicode$1 = _hasUnicode,
      unicodeSize = _unicodeSize;

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize$1(string) {
    return hasUnicode$1(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  var _stringSize = stringSize$1;

  /** Used to match a single whitespace character. */

  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex$1(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex$1;

  var trimmedEndIndex = _trimmedEndIndex;

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim$1(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  var _baseTrim = baseTrim$1;

  var baseTrim = _baseTrim,
      isObject$7 = isObject_1,
      isSymbol = isSymbol_1;

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject$7(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$7(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var toNumber_1 = toNumber$1;

  var toNumber = toNumber_1;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite$1(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite$1;

  var toFinite = toFinite_1;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger$1(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  var toInteger_1 = toInteger$1;

  var baseToString = _baseToString,
      castSlice = _castSlice,
      hasUnicode = _hasUnicode,
      isObject$6 = isObject_1,
      isRegExp = isRegExp_1,
      stringSize = _stringSize,
      stringToArray = _stringToArray,
      toInteger = toInteger_1,
      toString = toString_1;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Truncates `string` if it's longer than the given maximum string length.
   * The last characters of the truncated string are replaced with the omission
   * string which defaults to "...".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to truncate.
   * @param {Object} [options={}] The options object.
   * @param {number} [options.length=30] The maximum string length.
   * @param {string} [options.omission='...'] The string to indicate text is omitted.
   * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
   * @returns {string} Returns the truncated string.
   * @example
   *
   * _.truncate('hi-diddly-ho there, neighborino');
   * // => 'hi-diddly-ho there, neighbo...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': ' '
   * });
   * // => 'hi-diddly-ho there,...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': /,? +/
   * });
   * // => 'hi-diddly-ho there...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'omission': ' [...]'
   * });
   * // => 'hi-diddly-ho there, neig [...]'
   */
  function truncate(string, options) {
    var length = DEFAULT_TRUNC_LENGTH,
        omission = DEFAULT_TRUNC_OMISSION;

    if (isObject$6(options)) {
      var separator = 'separator' in options ? options.separator : separator;
      length = 'length' in options ? toInteger(options.length) : length;
      omission = 'omission' in options ? baseToString(options.omission) : omission;
    }
    string = toString(string);

    var strLength = string.length;
    if (hasUnicode(string)) {
      var strSymbols = stringToArray(string);
      strLength = strSymbols.length;
    }
    if (length >= strLength) {
      return string;
    }
    var end = length - stringSize(omission);
    if (end < 1) {
      return omission;
    }
    var result = strSymbols
      ? castSlice(strSymbols, 0, end).join('')
      : string.slice(0, end);

    if (separator === undefined) {
      return result + omission;
    }
    if (strSymbols) {
      end += (result.length - end);
    }
    if (isRegExp(separator)) {
      if (string.slice(end).search(separator)) {
        var match,
            substring = result;

        if (!separator.global) {
          separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
        }
        separator.lastIndex = 0;
        while ((match = separator.exec(substring))) {
          var newEnd = match.index;
        }
        result = result.slice(0, newEnd === undefined ? end : newEnd);
      }
    } else if (string.indexOf(baseToString(separator), end) != end) {
      var index = result.lastIndexOf(separator);
      if (index > -1) {
        result = result.slice(0, index);
      }
    }
    return result + omission;
  }

  var truncate_1 = truncate;

  var truncate$1 = /*@__PURE__*/getDefaultExportFromCjs(truncate_1);

  const stripHtml = html => {
    const el = window.document.createElement('DIV');
    el.innerHTML = html;
    return el.textContent || el.innerText || '';
  };
  const List$1 = props => {
    const {
      property,
      record
    } = props;
    const maxLength = property.custom?.maxLength || 15;
    const value = record.params[property.path] || '';
    const textValue = stripHtml(value);
    return /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, truncate$1(textValue, {
      length: maxLength,
      separator: ' '
    }));
  };
  var list = allowOverride(List$1, 'DefaultReferenceListProperty');

  var richtext = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit$1,
    list: list,
    show: show$1
  });

  const Show$1 = props => {
    const {
      property,
      record
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const value = record.params[property.path] || '';
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, value.split(/(?:\r\n|\r|\n)/g).map((line, i) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React__default$1.default.createElement(React__default$1.default.Fragment, {
      key: i
    }, line, /*#__PURE__*/React__default$1.default.createElement("br", null))));
  };
  var show = allowOverride(Show$1, 'DefaultTextareaShowProperty');

  function _extends$8() { _extends$8 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }
  const Edit$1 = props => {
    const {
      onChange,
      property,
      record
    } = props;
    const propValue = record.params?.[property.path] ?? '';
    const [value, setValue] = React$1.useState(propValue);
    const error = record.errors?.[property.path];
    React$1.useEffect(() => {
      if (value !== propValue) {
        setValue(propValue);
      }
    }, [propValue]);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, {
      error: Boolean(error)
    }, /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyLabel, {
      property: property
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, _extends$8({
      as: "textarea",
      rows: (value.match(/\n/g) || []).length + 1,
      id: property.path,
      name: property.path,
      onChange: e => setValue(e.target.value),
      onBlur: () => onChange(property.path, value),
      value: value,
      disabled: property.isDisabled
    }, property.props)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormMessage, null, error && error.message));
  };
  var edit = allowOverride( /*#__PURE__*/React$1.memo(Edit$1, recordPropertyIsEqual), 'DefaultTextareaEditProperty');

  var textarea = /*#__PURE__*/Object.freeze({
    __proto__: null,
    edit: edit,
    show: show
  });

  function _extends$7() { _extends$7 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }
  let globalAny = {};
  try {
    globalAny = window;
  } catch (error) {
    if (error.message !== 'window is not defined') {
      throw error;
    }
  }
  const types = {
    textarea,
    boolean,
    datetime,
    reference,
    password,
    date: datetime,
    richtext,
    string: defaultType,
    number: defaultType,
    float: defaultType,
    uuid: defaultType,
    mixed: null,
    'key-value': null,
    currency,
    phone
  };

  /**
   * @load ./base-property-component.doc.md
   * @component
   * @name BasePropertyComponent
   * @subcategory Application
   * @class
   * @hideconstructor
   */
  const BasePropertyComponent = props => {
    const {
      property: baseProperty,
      resource,
      record,
      filter,
      where,
      onChange
    } = props;
    const property = React$1.useMemo(() => ({
      ...baseProperty,
      // we fill the path if it is not there. That is why all the actual Component Renderers are
      // called with the path set to this root path. Next mixed and array components adds to this
      // path either index (for array) or subProperty name.
      path: baseProperty.path || baseProperty.propertyPath
    }), [baseProperty]);
    const testId = `property-${where}-${property.path}`;
    const contentTag = getActionElementCss(resource.id, where, property.path);
    let Component = types[property.type] && types[property.type][where] || defaultType[where];
    if (property.components && property.components[where]) {
      const component = property.components[where];
      if (!component) {
        throw new Error(`there is no "${property.path}.components.${where}"`);
      }
      Component = globalAny.AdminJS.UserComponents[component] ?? (() => {
        throw new Error(`Component "${component}" has not been bundled, ensure it was added to your ComponentLoader instance (the one included in AdminJS options).`);
      });
      return /*#__PURE__*/React__default$1.default.createElement(ErrorBoundary$1, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
        "data-css": contentTag,
        "data-testid": testId
      }, /*#__PURE__*/React__default$1.default.createElement(Component, {
        property: property,
        resource: resource,
        record: record,
        filter: filter,
        onChange: onChange,
        where: where
      })));
    }
    const Array = ArrayType[where];
    const Mixed = MixedType[where];
    const KeyValue = KeyValueType[where];
    if (baseProperty.isArray) {
      if (!Array) {
        return /*#__PURE__*/React__default$1.default.createElement("div", null);
      }
      return /*#__PURE__*/React__default$1.default.createElement(Array, _extends$7({}, props, {
        property: property,
        ItemComponent: BasePropertyComponent,
        testId: testId
      }));
    }
    if (baseProperty.type === 'key-value') {
      if (!KeyValue) {
        return /*#__PURE__*/React__default$1.default.createElement("div", null);
      }
      return /*#__PURE__*/React__default$1.default.createElement(KeyValue, _extends$7({}, props, {
        property: property,
        testId: testId
      }));
    }
    if (baseProperty.type === 'mixed') {
      if (!Mixed) {
        return /*#__PURE__*/React__default$1.default.createElement("div", null);
      }
      return /*#__PURE__*/React__default$1.default.createElement(Mixed, _extends$7({}, props, {
        property: property,
        ItemComponent: BasePropertyComponent,
        testId: testId
      }));
    }
    return /*#__PURE__*/React__default$1.default.createElement(ErrorBoundary$1, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      "data-css": contentTag,
      "data-testid": testId
    }, /*#__PURE__*/React__default$1.default.createElement(Component, {
      property: property,
      resource: resource,
      record: record,
      filter: filter,
      onChange: onChange,
      where: where
    })));
  };

  function _extends$6() { _extends$6 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }
  /**
   * This component is the same as `BasePropertyComponent` but it will not render
   * custom components. Use this in your custom components to render the default
   * property component.
   *
   * This is useful if you want your custom component to appear custom only for
   * specific `where` value and default for all others.
   */
  const CleanPropertyComponent = props => {
    const {
      property
    } = props;
    const cleanProperty = React$1.useMemo(() => ({
      ...property,
      components: {}
    }), [property]);
    return /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponent, _extends$6({}, props, {
      property: cleanProperty
    }));
  };

  function camelizePropertyType(type) {
    return {
      Edit: type.edit,
      Show: type.show,
      List: type.list,
      Filter: type.filter
    };
  }
  const BasePropertyComponentExtended = Object.assign(BasePropertyComponent, {
    DefaultType: camelizePropertyType(defaultType),
    Boolean: camelizePropertyType(boolean),
    DateTime: camelizePropertyType(datetime),
    RichText: camelizePropertyType(richtext),
    Reference: camelizePropertyType(reference),
    TextArea: camelizePropertyType(textarea),
    Password: camelizePropertyType(password),
    Currency: camelizePropertyType(currency),
    Phone: camelizePropertyType(phone)
  });

  function _extends$5() { _extends$5 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }
  const LayoutElementRenderer = props => {
    const {
      layoutElement,
      resource,
      where,
      record,
      onChange
    } = props;
    const {
      props: layoutProps,
      properties: propertyNames,
      layoutElements: innerLayoutElements,
      component
    } = layoutElement;
    const {
      children,
      ...other
    } = layoutProps;
    const properties = propertyNames.map(name => resource.properties[name]);
    const Component = DesignSystem__namespace[component];
    if (!Component) {
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem__namespace.MessageBox, {
        size: "sm",
        message: "Javascript Error",
        variant: "danger",
        py: "xl"
      }, "There is no component by the name of", /*#__PURE__*/React__default$1.default.createElement(DesignSystem__namespace.Badge, {
        size: "sm",
        variant: "danger",
        mx: "default"
      }, component), "in @adminjs/design-system. Change", /*#__PURE__*/React__default$1.default.createElement(DesignSystem__namespace.Badge, {
        size: "sm",
        variant: "danger",
        mx: "default"
      }, `@${component}`), "to available component like @Header");
    }
    return /*#__PURE__*/React__default$1.default.createElement(Component, other, properties.map(property => /*#__PURE__*/React__default$1.default.createElement(DesignSystem__namespace.Box, {
      flexGrow: 1,
      key: property.propertyPath
    }, /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      key: property.propertyPath,
      where: where,
      property: property,
      resource: resource,
      record: record,
      onChange: onChange
    }))), innerLayoutElements.map((innerLayoutElement, i) => /*#__PURE__*/React__default$1.default.createElement(LayoutElementRenderer, _extends$5({}, props, {
      // eslint-disable-next-line react/no-array-index-key
      key: i,
      layoutElement: innerLayoutElement
    }))), children);
  };

  function _extends$4() { _extends$4 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
  const New = props => {
    const {
      record: initialRecord,
      resource,
      action
    } = props;
    const {
      record,
      handleChange,
      submit,
      loading,
      setRecord
    } = useRecord(initialRecord, resource.id);
    const {
      translateButton
    } = useTranslation();
    const navigate = reactRouter.useNavigate();
    const {
      parsedQuery,
      redirectUrl
    } = useQueryParams();
    React$1.useEffect(() => {
      if (initialRecord) {
        setRecord(initialRecord);
      }
    }, [initialRecord, parsedQuery]);
    React$1.useEffect(() => {
      if (parsedQuery) {
        const resourceProperties = pick$1(parsedQuery, Object.keys(resource.properties));
        if (Object.keys(resourceProperties).length) {
          setRecord({
            ...record,
            params: {
              ...record.params,
              ...resourceProperties
            }
          });
        }
      }
    }, [parsedQuery]);
    const handleSubmit = event => {
      event.preventDefault();
      if (!event.currentTarget) return false;
      submit().then(response => {
        if (response.data.redirectUrl) {
          navigate(appendForceRefresh(response.data.redirectUrl));
        }
        // if record has id === has been created
        if (response.data.record.id && !Object.keys(response.data.record.errors).length) {
          handleChange({
            params: {},
            populated: {},
            errors: {}
          });
        }
      });
      return false;
    };
    const handleCancel = () => {
      if (redirectUrl) {
        window.location.href = redirectUrl;
      }
    };
    const contentTag = getActionElementCss(resource.id, action.name, 'drawer-content');
    const formTag = getActionElementCss(resource.id, action.name, 'form');
    const footerTag = getActionElementCss(resource.id, action.name, 'drawer-footer');
    const buttonTag = getActionElementCss(resource.id, action.name, 'drawer-submit');
    const cancelButtonTag = getActionElementCss(resource.id, action.name, 'drawer-cancel');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      as: "form",
      flex: true,
      flexGrow: 1,
      onSubmit: handleSubmit,
      flexDirection: "column",
      "data-css": formTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerContent, {
      "data-css": contentTag
    }, action?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default$1.default.createElement(LayoutElementRenderer
    // eslint-disable-next-line react/no-array-index-key
    , _extends$4({
      key: i,
      layoutElement: layoutElement
    }, props, {
      where: "edit",
      onChange: handleChange,
      record: record
    }))) : resource.editProperties.map(property => /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      key: property.propertyPath,
      where: "edit",
      onChange: handleChange,
      property: property,
      resource: resource,
      record: record
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerFooter, {
      "data-css": footerTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      style: {
        gap: 16
      }
    }, redirectUrl && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "light",
      type: "button",
      onClick: handleCancel,
      "data-css": cancelButtonTag,
      "data-testid": "button-cancel"
    }, translateButton('cancel', resource.id)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "contained",
      type: "submit",
      "data-css": buttonTag,
      "data-testid": "button-save",
      disabled: loading
    }, loading ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Loader",
      spin: true
    }) : null, translateButton('save', resource.id)))));
  };
  const OverridableNew = allowOverride(New, 'DefaultNewAction');

  function _extends$3() { _extends$3 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
  const Edit = props => {
    const {
      record: initialRecord,
      resource,
      action
    } = props;
    const {
      record,
      handleChange,
      submit: handleSubmit,
      loading,
      setRecord
    } = useRecord(initialRecord, resource.id);
    const {
      translateButton
    } = useTranslation();
    const navigate = reactRouter.useNavigate();
    React$1.useEffect(() => {
      if (initialRecord) {
        setRecord(initialRecord);
      }
    }, [initialRecord]);
    const submit = event => {
      event.preventDefault();
      handleSubmit().then(response => {
        if (response.data.redirectUrl) {
          navigate(appendForceRefresh(response.data.redirectUrl));
        }
      });
      return false;
    };
    const contentTag = getActionElementCss(resource.id, action.name, 'drawer-content');
    const formTag = getActionElementCss(resource.id, action.name, 'form');
    const footerTag = getActionElementCss(resource.id, action.name, 'drawer-footer');
    const buttonTag = getActionElementCss(resource.id, action.name, 'drawer-submit');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      as: "form",
      onSubmit: submit,
      flex: true,
      flexDirection: "column",
      "data-css": formTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerContent, {
      "data-css": contentTag
    }, action?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default$1.default.createElement(LayoutElementRenderer
    // eslint-disable-next-line react/no-array-index-key
    , _extends$3({
      key: i,
      layoutElement: layoutElement
    }, props, {
      where: "edit",
      onChange: handleChange,
      record: record
    }))) : resource.editProperties.map(property => /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      key: property.propertyPath,
      where: "edit",
      onChange: handleChange,
      property: property,
      resource: resource,
      record: record
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerFooter, {
      "data-css": footerTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "contained",
      type: "submit",
      "data-css": buttonTag,
      "data-testid": "button-save",
      disabled: loading
    }, loading ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Loader",
      spin: true
    }) : null, translateButton('save', resource.id))));
  };
  const OverridableEdit = allowOverride(Edit, 'DefaultEditAction');

  function _extends$2() { _extends$2 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

  /**
   * @name ShowAction
   * @category Actions
   * @description Shows a given record.
   * @component
   * @private
   */
  const Show = props => {
    const {
      resource,
      record,
      action
    } = props;
    const properties = resource.showProperties;
    const contentTag = getActionElementCss(resource.id, action.name, 'drawer-content');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerContent, {
      "data-css": contentTag
    }, action?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, props) : null, action.layout ? action.layout.map((layoutElement, i) => /*#__PURE__*/React__default$1.default.createElement(LayoutElementRenderer
    // eslint-disable-next-line react/no-array-index-key
    , _extends$2({
      key: i,
      layoutElement: layoutElement
    }, props, {
      where: "show"
    }))) : properties.map(property => /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      key: property.propertyPath,
      where: "show",
      property: property,
      resource: resource,
      record: record
    })));
  };
  const OverridableShow = allowOverride(Show, 'DefaultShowAction');

  const NoRecordsOriginal = props => {
    const {
      resource
    } = props;
    const {
      translateButton,
      translateMessage
    } = useTranslation();
    const canCreate = resource.resourceActions.find(a => a.name === 'new');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
      title: translateMessage('noRecords', resource.id),
      illustration: "Docs"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      mb: "xxl"
    }, translateMessage('noRecordsInResource', resource.id)), canCreate && /*#__PURE__*/React__default$1.default.createElement(OverridableActionButton, {
      action: canCreate,
      resourceId: resource.id
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "contained"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Plus"
    }), translateButton('createFirstRecord', resource.id))));
  };

  // This hack prevents rollup from throwing an error
  const NoRecords = allowOverride(NoRecordsOriginal, 'NoRecords');

  const display = isTitle => [isTitle ? 'table-cell' : 'none', isTitle ? 'table-cell' : 'none', 'table-cell', 'table-cell'];

  const RecordInList = props => {
    const {
      resource,
      record: recordFromProps,
      actionPerformed,
      isLoading,
      onSelect,
      isSelected
    } = props;
    const [record, setRecord] = React$1.useState(recordFromProps);
    const navigate = reactRouter.useNavigate();
    const location = reactRouter.useLocation();
    const translateFunctions = useTranslation();
    const modalFunctions = useModal();
    const handleActionCallback = React$1.useCallback(actionResponse => {
      if (actionResponse.record && !actionResponse.redirectUrl) {
        setRecord(mergeRecordResponse(record, actionResponse));
      } else if (actionPerformed) {
        actionPerformed(actionResponse);
      }
    }, [actionPerformed, record]);
    const actionResponseHandler = useActionResponseHandler(handleActionCallback);
    React$1.useEffect(() => {
      setRecord(recordFromProps);
    }, [recordFromProps]);
    const {
      recordActions
    } = record;
    const show = record.recordActions.find(({
      name
    }) => name === 'show');
    const edit = record.recordActions.find(({
      name
    }) => name === 'edit');
    const action = show || edit;
    const handleClick = event => {
      const targetTagName = event.target.tagName.toLowerCase();
      if (action && targetTagName !== 'a' && targetTagName !== 'button' && targetTagName !== 'svg') {
        buildActionClickHandler({
          action,
          params: {
            resourceId: resource.id,
            recordId: record.id
          },
          actionResponseHandler,
          navigate,
          location,
          translateFunctions,
          modalFunctions
        })(event);
      }
    };
    const actionParams = {
      resourceId: resource.id,
      recordId: record.id
    };
    const handleActionClick = (event, sourceAction) => buildActionClickHandler({
      action: sourceAction,
      params: actionParams,
      actionResponseHandler,
      navigate,
      location,
      translateFunctions,
      modalFunctions
    })(event);
    const buttons = [{
      icon: 'MoreHorizontal',
      variant: 'light',
      label: undefined,
      'data-testid': 'actions-dropdown',
      buttons: actionsToButtonGroup({
        actions: recordActions,
        params: actionParams,
        handleClick: handleActionClick,
        translateFunctions,
        modalFunctions
      })
    }];
    const contentTag = getResourceElementCss(resource.id, 'table-row');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableRow, {
      className: isSelected ? 'selected' : 'not-selected',
      onClick: handleClick,
      "data-id": record.id,
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
      width: 0
    }, onSelect && record.bulkActions.length ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CheckBox, {
      onChange: () => onSelect(record),
      checked: isSelected
    }) : null), resource.listProperties.map(property => {
      const cellTag = `${resource.id}-${property.name}-table-cell`;
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
        style: {
          cursor: 'pointer'
        },
        key: property.propertyPath,
        "data-property-name": property.propertyPath,
        display: display(property.isTitle),
        "data-css": cellTag
      }, isLoading ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Placeholder, {
        style: {
          height: 14
        }
      }) : /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
        key: property.propertyPath,
        where: "list",
        property: property,
        resource: resource,
        record: record
      }));
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
      key: "options",
      className: "options"
    }, recordActions.length ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ButtonGroup, {
      buttons: buttons
    }) : null));
  };
  const OverridableRecordInList = allowOverride(RecordInList, 'RecordInList');

  const SortLink = props => {
    const {
      sortBy,
      property,
      direction
    } = props;
    const location = reactRouterDom.useLocation();
    const {
      translateProperty
    } = useTranslation();
    const isActive = React$1.useMemo(() => sortBy === property.propertyPath, [sortBy, property]);
    const query = new URLSearchParams(location.search);
    const oppositeDirection = isActive && direction === 'asc' ? 'desc' : 'asc';
    const sortedByIcon = direction === 'asc' ? 'ChevronUp' : 'ChevronDown';
    query.set('direction', oppositeDirection);
    query.set('sortBy', property.propertyPath);
    return /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.NavLink, {
      to: {
        search: query.toString()
      },
      className: DesignSystem.cssClass('SortLink')
    }, translateProperty(property.label, property.resourceId), isActive && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: sortedByIcon,
      color: "grey40",
      ml: "lg"
    }));
  };
  const checkSortProps = (prevProps, nextProps) => prevProps.direction === nextProps.direction && prevProps.property.propertyPath === nextProps.property.propertyPath && prevProps.sortBy === nextProps.sortBy;
  var SortLink$1 = /*#__PURE__*/React$1.memo(SortLink, checkSortProps);

  const PropertyHeader = props => {
    const {
      property,
      titleProperty,
      display
    } = props;
    const {
      translateProperty
    } = useTranslation();
    const isMain = property.propertyPath === titleProperty.propertyPath;
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
      className: isMain ? 'main' : undefined,
      display: display
    }, property.isSortable ? /*#__PURE__*/React__default$1.default.createElement(SortLink$1, props) : translateProperty(property.label, property.resourceId));
  };
  const OverridablePropertyHeader = allowOverride(PropertyHeader, 'PropertyHeader');

  /**
   * @memberof RecordsTableHeader
   * @alias RecordsTableHeaderProps
   */

  /**
   * Prints `thead` section for table with records.
   *
   * ```
   * import { RecordsTableHeader } from 'adminjs'
   * ```
   *
   * @component
   * @subcategory Application
   * @example <caption>List with 2 properties</caption>
   * const properties = [{
   *   label: 'First Name',
   *   name: 'firstName',
   *   isSortable: true,
   * }, {
   *   label: 'Last Name',
   *   name: 'lastName',
   * }]
   * return (
   * <Box py="xl">
   *   <Table>
   *    <RecordsTableHeader
   *      properties={properties}
   *      titleProperty={properties[0]}
   *      sortBy={'firstName'}
   *      direction={'asc'}
   *    />
   *    <TableBody>
   *      <TableRow>
   *        <TableCell>John</TableCell>
   *        <TableCell>Doe</TableCell>
   *        <TableCell></TableCell>
   *      </TableRow>
   *      <TableRow>
   *        <TableCell>Max</TableCell>
   *        <TableCell>Kodaly</TableCell>
   *        <TableCell></TableCell>
   *      </TableRow>
   *    </TableBody>
   *   </Table>
   * </Box>
   * )
   */
  const RecordsTableHeader = props => {
    const {
      titleProperty,
      properties,
      sortBy,
      direction,
      onSelectAll,
      selectedAll
    } = props;
    const contentTag = getResourceElementCss(titleProperty.resourceId, 'table-head');
    const rowTag = `${titleProperty.resourceId}-table-head-row`;
    const checkboxCss = `${titleProperty.resourceId}-checkbox-table-cell`;
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableHead, {
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableRow, {
      "data-css": rowTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
      "data-css": checkboxCss
    }, onSelectAll ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CheckBox, {
      style: {
        marginLeft: 5
      },
      onChange: () => onSelectAll(),
      checked: selectedAll
    }) : null), properties.map(property => /*#__PURE__*/React__default$1.default.createElement(OverridablePropertyHeader, {
      display: display(property.isTitle),
      key: property.propertyPath,
      titleProperty: titleProperty,
      property: property,
      sortBy: sortBy,
      direction: direction
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, {
      key: "actions",
      style: {
        width: 80
      }
    })));
  };
  const OverridableRecordsTableHeader = allowOverride(RecordsTableHeader, 'RecordsTableHeader');

  const getBulkActionsFromRecords = records => {
    const actions = Object.values(records.reduce((memo, record) => ({
      ...memo,
      ...record.bulkActions.reduce((actionsMemo, action) => ({
        ...actionsMemo,
        [action.name]: action
      }), {})
    }), {}));
    return actions;
  };

  const SelectedRecords = props => {
    const {
      resource,
      selectedRecords
    } = props;
    const translateFunctions = useTranslation();
    const {
      translateLabel
    } = translateFunctions;
    const navigate = reactRouter.useNavigate();
    const location = reactRouter.useLocation();
    const actionResponseHandler = useActionResponseHandler();
    const modalFunctions = useModal();
    if (!selectedRecords || !selectedRecords.length) {
      return null;
    }
    const params = {
      resourceId: resource.id,
      recordIds: selectedRecords.map(records => records.id)
    };
    const handleActionClick = (event, sourceAction) => buildActionClickHandler({
      action: sourceAction,
      params,
      actionResponseHandler,
      navigate,
      location,
      translateFunctions,
      modalFunctions
    })(event);
    const bulkButtons = actionsToButtonGroup({
      actions: getBulkActionsFromRecords(selectedRecords),
      params,
      handleClick: handleActionClick,
      translateFunctions,
      modalFunctions
    });
    const contentTag = getResourceElementCss(resource.id, 'table-caption');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCaption, {
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      py: "sm",
      alignItems: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Title, {
      mr: "lg"
    }, translateLabel('selectedRecords', resource.id, {
      selected: selectedRecords.length
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.ButtonGroup, {
      size: "sm",
      rounded: true,
      buttons: bulkButtons
    })));
  };
  const OverridableSelectedRecords = allowOverride(SelectedRecords, 'SelectedRecords');

  /**
   * @alias RecordsTableProps
   * @memberof RecordsTable
   */

  /**
   * @classdesc
   * Renders an entire records table. To fill the data you might need:
   *
   * - {@link useRecords} and
   * - {@link useSelectedRecords} hooks
   *
   * so make sure to see at the documentation pages for both of them
   *
   * @component
   * @class
   * @hideconstructor
   * @subcategory Application
   */
  const RecordsTable = props => {
    const {
      resource,
      records,
      actionPerformed,
      sortBy,
      direction,
      isLoading,
      onSelect,
      selectedRecords,
      onSelectAll
    } = props;
    if (!records.length) {
      if (isLoading) {
        return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null);
      }
      return /*#__PURE__*/React__default$1.default.createElement(NoRecords, {
        resource: resource
      });
    }
    const selectedAll = selectedRecords && !!records.find(record => selectedRecords.find(selected => selected.id === record.id));
    const recordsHaveBulkAction = !!records.find(record => record.bulkActions.length);
    const contentTag = getResourceElementCss(resource.id, 'table');
    const selectedTag = getResourceElementCss(resource.id, 'table-selected-records');
    const bodyTag = getResourceElementCss(resource.id, 'table-body');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Table, {
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableSelectedRecords, {
      resource: resource,
      selectedRecords: selectedRecords,
      "data-css": selectedTag
    }), /*#__PURE__*/React__default$1.default.createElement(OverridableRecordsTableHeader, {
      properties: resource.listProperties,
      titleProperty: resource.titleProperty,
      direction: direction,
      sortBy: sortBy,
      onSelectAll: recordsHaveBulkAction ? onSelectAll : undefined,
      selectedAll: selectedAll
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableBody, {
      "data-css": bodyTag
    }, records.map(record => /*#__PURE__*/React__default$1.default.createElement(OverridableRecordInList, {
      record: record,
      resource: resource,
      key: record.id,
      actionPerformed: actionPerformed,
      isLoading: isLoading,
      onSelect: onSelect,
      isSelected: selectedRecords && !!selectedRecords.find(selected => selected.id === record.id)
    }))));
  };
  const OverridableRecordsTable = allowOverride(RecordsTable, 'RecordsTable');

  const List = ({
    resource,
    setTag
  }) => {
    const {
      records,
      loading,
      direction,
      sortBy,
      page,
      total,
      fetchData,
      perPage
    } = useRecords(resource.id);
    const {
      selectedRecords,
      handleSelect,
      handleSelectAll,
      setSelectedRecords
    } = useSelectedRecords(records);
    const location = reactRouter.useLocation();
    const {
      storeParams
    } = useQueryParams();
    React$1.useEffect(() => {
      if (setTag) {
        setTag(total.toString());
      }
    }, [total]);
    React$1.useEffect(() => {
      setSelectedRecords([]);
    }, [resource.id]);
    React$1.useEffect(() => {
      const search = new URLSearchParams(location.search);
      if (search.get(REFRESH_KEY)) {
        setSelectedRecords([]);
      } else {
        const recordIds = search.get('recordIds')?.split?.(',') ?? [];
        setSelectedRecords(records.filter(r => recordIds.includes(r.id.toString())));
      }
    }, [location.search, records]);
    const handleActionPerformed = () => fetchData();
    const handlePaginationChange = pageNumber => {
      storeParams({
        page: pageNumber.toString()
      });
    };
    const contentTag = getActionElementCss(resource.id, 'list', 'table-wrapper');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      variant: "container",
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableRecordsTable, {
      resource: resource,
      records: records,
      actionPerformed: handleActionPerformed,
      onSelect: handleSelect,
      onSelectAll: handleSelectAll,
      selectedRecords: selectedRecords,
      direction: direction,
      sortBy: sortBy,
      isLoading: loading
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      mt: "xl",
      textAlign: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Pagination, {
      page: page,
      perPage: perPage,
      total: total,
      onChange: handlePaginationChange
    })));
  };
  const OverridableList = allowOverride(List, 'DefaultListAction');

  /* eslint-disable @typescript-eslint/explicit-function-return-type */

  /**
   * Additional props which are passed to your component
   * @alias AddNoticeProps
   * @memberof withNotice
   */

  const mapDispatchToProps$1 = dispatch => ({
    addNotice: notice => dispatch(addNotice(notice))
  });

  /**
   * Higher Order Component which allows you to post notice messages from your components
   *
   * It gives you the additional prop: `addNotice(noticeMessage)` taking {@link NoticeMessage}.
   *
   * ```javascript
   * import { withNotice } from 'adminjs/core'
   *
   * const MY_MESSAGE = {
   *   message: 'I am toast message',
   *   type: 'success',
   * }
   * const MyCustomComponent = ({ addNotice }) => {
   *   return (
   *     <a onClick={() => addNotice(MY_MESSAGE)}>Click Me</a>
   *   )
   * }
   * export default withNotice(MyCustomComponent)
   * ```
   *
   * @component
   * @subcategory HOC
   */
  const withNotice = Component => require$$3.connect(null, mapDispatchToProps$1)(Component);

  function _extends$1() { _extends$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

  /**
   * @name BulkDeleteAction
   * @category Actions
   * @description Deletes selected records.
   * @component
   * @private
   */
  const BulkDelete = props => {
    const {
      resource,
      records,
      action,
      addNotice
    } = props;
    const navigate = reactRouter.useNavigate();
    const [loading, setLoading] = React$1.useState(false);
    const {
      translateMessage,
      translateButton
    } = useTranslation();
    if (!records) {
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('pickSomeFirstToRemove', resource.id));
    }
    const handleClick = () => {
      const api = new ApiClient();
      setLoading(true);
      const recordIds = records.map(r => r.id);
      api.bulkAction({
        resourceId: resource.id,
        actionName: action.name,
        recordIds,
        method: 'post'
      }).then(response => {
        setLoading(false);
        if (response.data.notice) {
          addNotice(response.data.notice);
        }
        if (response.data.redirectUrl) {
          const search = new URLSearchParams(window.location.search);
          // bulk function have recordIds in the URL so it has to be stripped before redirect
          search.delete('recordIds');
          navigate(appendForceRefresh(response.data.redirectUrl, search.toString()));
        }
      }).catch(error => {
        setLoading(false);
        addNotice({
          message: translateMessage('bulkDeleteError', resource.id),
          type: 'error'
        });
        throw error;
      });
    };
    const contentTag = getActionElementCss(resource.id, action.name, 'drawer-content');
    const tableTag = getActionElementCss(resource.id, action.name, 'table');
    const footerTag = getActionElementCss(resource.id, action.name, 'drawer-footer');
    return /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerContent, {
      "data-css": contentTag
    }, action?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, _extends$1({
      omitActions: true
    }, props)) : null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      mb: "xxl",
      variant: "danger",
      message: translateMessage(records.length > 1 ? 'theseRecordsWillBeRemoved_plural' : 'theseRecordsWillBeRemoved', resource.id, {
        count: records.length
      })
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Table, {
      "data-css": tableTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableBody, null, records.map(record => /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableRow, {
      key: record.id
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.TableCell, null, /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      where: "list",
      property: resource.titleProperty,
      resource: resource,
      record: record
    }))))))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerFooter, {
      "data-css": footerTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "contained",
      size: "lg",
      onClick: handleClick,
      disabled: loading
    }, loading ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Loader",
      spin: true
    }) : null, translateButton(records.length > 1 ? 'confirmRemovalMany_plural' : 'confirmRemovalMany', resource.id, {
      count: records.length
    }))));
  };
  const FormattedBulkDelete = withNotice(BulkDelete);
  const OverridableFormattedBulkDelete = allowOverride(FormattedBulkDelete, 'DefaultBulkDeleteAction');

  const actions$9 = {
    new: OverridableNew,
    edit: OverridableEdit,
    show: OverridableShow,
    list: OverridableList,
    bulkDelete: OverridableFormattedBulkDelete
  };

  var ActionComponents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BulkDelete: OverridableFormattedBulkDelete,
    Edit: OverridableEdit,
    LayoutElementRenderer: LayoutElementRenderer,
    List: OverridableList,
    New: OverridableNew,
    OriginalBulkDelete: FormattedBulkDelete,
    OriginalEdit: Edit,
    OriginalList: List,
    OriginalNew: New,
    OriginalShow: Show,
    Show: OverridableShow,
    actions: actions$9
  });

  /* cspell: disable */
  const DOCS = 'https://docs.adminjs.co';
  const DEFAULT_PATHS = {
    rootPath: '/admin',
    logoutPath: '/admin/logout',
    loginPath: '/admin/login',
    refreshTokenPath: '/admin/refresh-token'
  };

  /**
   * Component which renders all the default and custom actions for both the Resource and the Record.
   *
   * It passes all props down to the actual Action component.
   *
   * Example of creating your own actions:
   * ```
   * // AdminJS options
   * const AdminJSOptions = {
   *   resources: [
   *      resource,
   *      options: {
   *        actions: {
   *           myNewAction: {
   *             label: 'amazing action',
   *             icon: 'Add',
   *             inVisible: (resource, record) => record.param('email') !== '',
   *             actionType: 'record',
   *             component: 'MyNewAction',
   *             handler: (request, response, data) => {
   *               return {
   *                  ...
   *               }
   *             }
   *           }
   *        }
   *      }
   *   ]
   * }
   * ```
   *
   * ```
   * // ./my-new-action.js
   * import { Box } from 'adminjs'
   *
   * const MyNewAction = (props) => {
   *   const { resource, action, record } = props
   *   // do something with the props and render action
   *   return (
   *     <Box>Some Action Content</Box>
   *   )
   * }
   * ```
   *
   * @component
   * @name BaseActionComponent
   * @subcategory Application
   */
  const BaseActionComponent = props => {
    const {
      resource,
      action,
      record,
      records,
      setTag
    } = props;
    const documentationLink = [DOCS, 'BaseAction.html'].join('/');
    const {
      translateMessage
    } = useTranslation();
    let Action = actions$9[action.name];
    if (action.component) {
      Action = AdminJS.UserComponents[action.component];
    }
    if (Action) {
      return /*#__PURE__*/React__default$1.default.createElement(ErrorBoundary$1, null, /*#__PURE__*/React__default$1.default.createElement(Action, {
        action: action,
        resource: resource,
        record: record,
        records: records,
        setTag: setTag
      }));
    }
    return Action || /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      variant: "danger"
    }, translateMessage('noActionComponent'), /*#__PURE__*/React__default$1.default.createElement(Trans, {
      key: "messages.buttons.seeTheDocumentation"
    }, "See:", /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Link, {
      ml: "default",
      href: documentationLink
    }, "the documentation")));
  };

  const pageHeaderHeight = 284;
  const pageHeaderPaddingY = 74;
  const pageHeaderPaddingX = 250;
  const DashboardHeader = () => {
    const {
      translateMessage
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      position: "relative",
      overflow: "hidden",
      "data-css": "default-dashboard"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      position: "absolute",
      top: 50,
      left: -10,
      opacity: [0.2, 0.4, 1],
      animate: true
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "Rocket"
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      position: "absolute",
      top: -70,
      right: -15,
      opacity: [0.2, 0.4, 1],
      animate: true
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "Moon"
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      bg: "grey100",
      height: pageHeaderHeight,
      py: pageHeaderPaddingY,
      px: ['default', 'lg', pageHeaderPaddingX]
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      textAlign: "center",
      color: "white"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H2, null, translateMessage('welcomeOnBoard_title')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      opacity: 0.8
    }, translateMessage('welcomeOnBoard_subtitle')))));
  };
  const boxes = ({
    translateMessage
  }) => [{
    variant: 'Planet',
    title: translateMessage('addingResources_title'),
    subtitle: translateMessage('addingResources_subtitle'),
    href: 'https://adminjs.co/tutorial-passing-resources.html'
  }, {
    variant: 'DocumentCheck',
    title: translateMessage('customizeResources_title'),
    subtitle: translateMessage('customizeResources_subtitle'),
    href: 'https://adminjs.co/tutorial-customizing-resources.html'
  }, {
    variant: 'DocumentSearch',
    title: translateMessage('customizeActions_title'),
    subtitle: translateMessage('customizeActions_subtitle'),
    href: 'https://adminjs.co/tutorial-actions.html'
  }, {
    variant: 'FlagInCog',
    title: translateMessage('writeOwnComponents_title'),
    subtitle: translateMessage('writeOwnComponents_subtitle'),
    href: 'https://adminjs.co/tutorial-writing-react-components.html'
  }, {
    variant: 'Folders',
    title: translateMessage('customDashboard_title'),
    subtitle: translateMessage('customDashboard_subtitle'),
    href: 'https://adminjs.co/tutorial-custom-dashboard.html'
  }, {
    variant: 'Astronaut',
    title: translateMessage('roleBasedAccess_title'),
    subtitle: translateMessage('roleBasedAccess_subtitle'),
    href: 'https://adminjs.co/tutorial-rbac.html'
  }];
  const Card = styledComponents.styled(DesignSystem.Box)`
  display: ${({
  flex
}) => flex ? 'flex' : 'block'};
  color: ${({
  theme
}) => theme.colors.grey100};
  height: 100%;
  text-decoration: none;
  border: 1px solid transparent;
  border-radius: ${({
  theme
}) => theme.space.md};
  transition: all 0.1s ease-in;
  &:hover {
    border: 1px solid ${({
  theme
}) => theme.colors.primary100};
    box-shadow: ${({
  theme
}) => theme.shadows.cardHover};
  }
`;
  Card.defaultProps = {
    variant: 'container',
    boxShadow: 'card'
  };
  const Dashboard$1 = () => {
    const {
      translateMessage,
      translateButton
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, null, /*#__PURE__*/React__default$1.default.createElement(DashboardHeader, null), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mt: ['xl', 'xl', '-100px'],
      mb: "xl",
      mx: [0, 0, 0, 'auto'],
      px: ['default', 'lg', 'xxl', '0'],
      position: "relative",
      flex: true,
      flexDirection: "row",
      flexWrap: "wrap",
      width: [1, 1, 1, 1024]
    }, boxes({
      translateMessage
    }).map((box, index) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React__default$1.default.createElement(DesignSystem.Box, {
      key: index,
      width: [1, 1 / 2, 1 / 2, 1 / 3],
      p: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(Card, {
      as: "a",
      href: box.href,
      target: "_blank"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      textAlign: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: box.variant,
      width: 100,
      height: 70
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H5, {
      mt: "lg"
    }, box.title), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, box.subtitle))))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      width: [1, 1, 1 / 2],
      p: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(Card, {
      as: "a",
      flex: true,
      href: "https://adminjs.page.link/slack",
      target: "_blank"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexShrink: 0
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "SlackLogo"
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      ml: "xl"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H5, null, translateMessage('community_title')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('community_subtitle'))))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      width: [1, 1, 1 / 2],
      p: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(Card, {
      as: "a",
      flex: true,
      href: "https://github.com/SoftwareBrothers/adminjs/issues",
      target: "_blank"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexShrink: 0
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "GithubLogo"
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      ml: "xl"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H5, null, translateMessage('foundBug_title')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('foundBug_subtitle'))))), /*#__PURE__*/React__default$1.default.createElement(Card, {
      width: 1,
      m: "lg"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      textAlign: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "AdminJSLogo"
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H5, null, translateMessage('needMoreSolutions_title')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('needMoreSolutions_subtitle')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      mt: "xxl"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      as: "a",
      variant: "contained",
      href: "https://forms.adminjs.co/",
      target: "_blank"
    }, translateButton('contactUs')))))));
  };

  var createRoot;

  var m = require$$1__default.default;
  {
    var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    createRoot = function(c, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.createRoot(c, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }

  /**
   * @alias DrawerPortalProps
   * @memberof DrawerPortal
   */

  const DRAWER_PORTAL_ID = 'drawerPortal';
  const DRAWER_PORTAL_WRAPPER_ID = 'drawerPortalWrapper';
  const DrawerWrapper = ({
    onMount,
    onUnmount
  }) => {
    React$1.useEffect(() => {
      onMount();
      return onUnmount;
    }, []);
    return /*#__PURE__*/React__default$1.default.createElement(styledComponents.ThemeProvider, {
      theme: window.THEME
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Drawer, {
      id: DRAWER_PORTAL_ID,
      className: "hidden",
      "data-css": "drawer"
    }));
  };
  const getOrCreatePortalContainer = id => {
    let container = document.getElementById(id);
    if (!container) {
      container = window.document.createElement('div');
      container.id = id;
      window.document.body.appendChild(container);
    }
    return container;
  };

  /**
   * Shows all of its children in a Drawer on the right.
   * Instead of rendering it's own {@link Drawer} component it reuses
   * the global Drawer via React Portal.
   *
   * ### Usage
   *
   * ```
   * import { DrawerPortal } from 'adminjs'
   * ```
   *
   * @component
   * @subcategory Application
   */
  const DrawerPortal = ({
    children,
    width
  }) => {
    const [drawerElement, setDrawerElement] = React$1.useState(document.getElementById(DRAWER_PORTAL_ID));
    const {
      from = null
    } = require$$3.useSelector(state => state.router);
    const dispatch = require$$3.useDispatch();
    const handleDrawerMount = () => {
      dispatch(setDrawerPreRoute({
        previousRoute: from
      }));
      setDrawerElement(document.getElementById(DRAWER_PORTAL_ID));
    };
    const handleDrawerUnmount = () => {
      dispatch(setDrawerPreRoute({
        previousRoute: null
      }));
    };
    React$1.useEffect(() => {
      const innerWrapperElement = getOrCreatePortalContainer(DRAWER_PORTAL_WRAPPER_ID);
      if (!drawerElement && window) {
        const drawerRoot = createRoot(innerWrapperElement);
        drawerRoot.render( /*#__PURE__*/React__default$1.default.createElement(DrawerWrapper, {
          onMount: handleDrawerMount,
          onUnmount: handleDrawerUnmount
        }));
      }
      return () => {
        const innerWrapper = document.getElementById(DRAWER_PORTAL_WRAPPER_ID);
        if (innerWrapper) document.body.removeChild(innerWrapper);
      };
    }, []);
    React$1.useEffect(() => {
      if (drawerElement) {
        drawerElement.classList.remove('hidden');
        if (width) {
          drawerElement.style.width = Array.isArray(width) ? width[0].toString() : width.toString();
        }
        return () => {
          drawerElement.style.width = DesignSystem.DEFAULT_DRAWER_WIDTH;
          drawerElement.classList.add('hidden');
          drawerElement.setAttribute('data-css', 'drawer-element');
        };
      }
      return () => undefined;
    }, [drawerElement]);
    if (!drawerElement) {
      return null;
    }
    return /*#__PURE__*/require$$1.createPortal(children, drawerElement);
  };

  /**
   * @memberof ErrorMessageBox
   * @alias ErrorMessageBoxProps
   */

  /**
   * @class
   * Prints error message
   *
   * @component
   * @private
   * @example
   * return (
   * <ErrorMessageBox title={'Some error'}>
   *   <p>Text below the title</p>
   * </ErrorMessageBox>
   * )
   */
  const ErrorMessageBox = props => {
    const {
      children,
      title,
      testId
    } = props;
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      "data-testid": testId,
      message: title
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, children));
  };
  const NoResourceError = props => {
    const {
      resourceId
    } = props;
    const {
      translateMessage
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
      title: translateMessage('pageNotFound_title', resourceId, {
        resourceId
      }),
      illustration: "NotFound",
      testId: "NoResourceError"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('error404Resource', resourceId, {
      resourceId
    })));
  };
  const NoActionError = props => {
    const {
      resourceId,
      actionName
    } = props;
    const {
      translateMessage
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
      title: translateMessage('pageNotFound_title', resourceId, {
        resourceId
      }),
      illustration: "NotFound",
      testId: "NoActionError"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('error404Action', resourceId, {
      resourceId,
      actionName
    })));
  };
  const NoRecordError = props => {
    const {
      resourceId,
      recordId
    } = props;
    const {
      translateMessage
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
      title: translateMessage('pageNotFound_title', resourceId, {
        resourceId
      }),
      illustration: "NotFound",
      testId: "NoRecordError"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, null, translateMessage('error404Record', resourceId, {
      resourceId,
      recordId
    })));
  };

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */

  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  var isNil$1 = /*@__PURE__*/getDefaultExportFromCjs(isNil_1);

  var ListCache$2 = _ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear$1() {
    this.__data__ = new ListCache$2;
    this.size = 0;
  }

  var _stackClear = stackClear$1;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function stackDelete$1(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete$1;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function stackGet$1(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet$1;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function stackHas$1(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas$1;

  var ListCache$1 = _ListCache,
      Map$2 = _Map,
      MapCache$1 = _MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet$1(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache$1) {
      var pairs = data.__data__;
      if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache$1(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet$1;

  var ListCache = _ListCache,
      stackClear = _stackClear,
      stackDelete = _stackDelete,
      stackGet = _stackGet,
      stackHas = _stackHas,
      stackSet = _stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack$3(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack$3.prototype.clear = stackClear;
  Stack$3.prototype['delete'] = stackDelete;
  Stack$3.prototype.get = stackGet;
  Stack$3.prototype.has = stackHas;
  Stack$3.prototype.set = stackSet;

  var _Stack = Stack$3;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  var _setCacheAdd = setCacheAdd$1;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */

  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas$1;

  var MapCache = _MapCache,
      setCacheAdd = _setCacheAdd,
      setCacheHas = _setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache$2(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
  SetCache$2.prototype.has = setCacheHas;

  var _SetCache = SetCache$2;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

  function arraySome$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome$1;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function cacheHas$2(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas$2;

  var SetCache$1 = _SetCache,
      arraySome = _arraySome,
      cacheHas$1 = _cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$1 : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas$1(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays$2;

  var root$4 = _root;

  /** Built-in value references. */
  var Uint8Array$3 = root$4.Uint8Array;

  var _Uint8Array = Uint8Array$3;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

  function mapToArray$1(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray$1;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

  function setToArray$1(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray$1;

  var Symbol$1 = _Symbol,
      Uint8Array$2 = _Uint8Array,
      eq$2 = eq_1,
      equalArrays$1 = _equalArrays,
      mapToArray = _mapToArray,
      setToArray = _setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$1 = '[object Error]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$2:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$1:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
          return false;
        }
        return true;

      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq$2(+object, +other);

      case errorTag$1:
        return object.name == other.name && object.message == other.message;

      case regexpTag$1:
      case stringTag$1:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$2:
        var convert = mapToArray;

      case setTag$2:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag$1;

  var arrayPush$1 = _arrayPush,
      isArray$4 = isArray_1;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$4(object) ? result : arrayPush$1(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys$2;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

  function arrayFilter$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter$1;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */

  function stubArray$2() {
    return [];
  }

  var stubArray_1 = stubArray$2;

  var arrayFilter = _arrayFilter,
      stubArray$1 = stubArray_1;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols$2 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols$2;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes$1;

  var isBuffer$3 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  isBuffer$3.exports;

  (function (module, exports) {
  	var root = _root,
  	    stubFalse = stubFalse_1;

  	/** Detect free variable `exports`. */
  	var freeExports = exports && !exports.nodeType && exports;

  	/** Detect free variable `module`. */
  	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  	/** Detect the popular CommonJS extension `module.exports`. */
  	var moduleExports = freeModule && freeModule.exports === freeExports;

  	/** Built-in value references. */
  	var Buffer = moduleExports ? root.Buffer : undefined;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  	/**
  	 * Checks if `value` is a buffer.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.3.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
  	 * @example
  	 *
  	 * _.isBuffer(new Buffer(2));
  	 * // => true
  	 *
  	 * _.isBuffer(new Uint8Array(2));
  	 * // => false
  	 */
  	var isBuffer = nativeIsBuffer || stubFalse;

  	module.exports = isBuffer; 
  } (isBuffer$3, isBuffer$3.exports));

  var isBufferExports = isBuffer$3.exports;

  var baseGetTag$2 = _baseGetTag,
      isLength$1 = isLength_1,
      isObjectLike$3 = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag$1 = '[object Map]',
      numberTag = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag$1 = '[object Set]',
      stringTag = '[object String]',
      weakMapTag$1 = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag$1] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag$3] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag$1] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag$1] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray$1(value) {
    return isObjectLike$3(value) &&
      isLength$1(value.length) && !!typedArrayTags[baseGetTag$2(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray$1;

  var baseIsTypedArray = _baseIsTypedArray,
      baseUnary$1 = _baseUnary,
      nodeUtil = _nodeUtilExports;

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray$3 = nodeIsTypedArray ? baseUnary$1(nodeIsTypedArray) : baseIsTypedArray;

  var isTypedArray_1 = isTypedArray$3;

  var baseTimes = _baseTimes,
      isArguments$1 = isArguments_1,
      isArray$3 = isArray_1,
      isBuffer$2 = isBufferExports,
      isIndex$1 = _isIndex,
      isTypedArray$2 = isTypedArray_1;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$3(value),
        isArg = !isArr && isArguments$1(value),
        isBuff = !isArr && !isArg && isBuffer$2(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$5.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex$1(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys$2;

  /** Used for built-in method references. */

  var objectProto$5 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype$3(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

    return value === proto;
  }

  var _isPrototype = isPrototype$3;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$2(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg$2;

  var overArg$1 = _overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys$1 = overArg$1(Object.keys, Object);

  var _nativeKeys = nativeKeys$1;

  var isPrototype$2 = _isPrototype,
      nativeKeys = _nativeKeys;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys$1(object) {
    if (!isPrototype$2(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$4.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys$1;

  var isFunction$1 = isFunction_1,
      isLength = isLength_1;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$4(value) {
    return value != null && isLength(value.length) && !isFunction$1(value);
  }

  var isArrayLike_1 = isArrayLike$4;

  var arrayLikeKeys$1 = _arrayLikeKeys,
      baseKeys = _baseKeys,
      isArrayLike$3 = isArrayLike_1;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys$2(object) {
    return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object);
  }

  var keys_1 = keys$2;

  var baseGetAllKeys$1 = _baseGetAllKeys,
      getSymbols$1 = _getSymbols,
      keys$1 = keys_1;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys$1(object) {
    return baseGetAllKeys$1(object, keys$1, getSymbols$1);
  }

  var _getAllKeys = getAllKeys$1;

  var getAllKeys = _getAllKeys;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects$1;

  var getNative$3 = _getNative,
      root$3 = _root;

  /* Built-in method references that are verified to be native. */
  var DataView$2 = getNative$3(root$3, 'DataView');

  var _DataView = DataView$2;

  var getNative$2 = _getNative,
      root$2 = _root;

  /* Built-in method references that are verified to be native. */
  var Promise$2 = getNative$2(root$2, 'Promise');

  var _Promise = Promise$2;

  var getNative$1 = _getNative,
      root$1 = _root;

  /* Built-in method references that are verified to be native. */
  var Set$2 = getNative$1(root$1, 'Set');

  var _Set = Set$2;

  var getNative = _getNative,
      root = _root;

  /* Built-in method references that are verified to be native. */
  var WeakMap$2 = getNative(root, 'WeakMap');

  var _WeakMap = WeakMap$2;

  var DataView$1 = _DataView,
      Map$1 = _Map,
      Promise$1 = _Promise,
      Set$1 = _Set,
      WeakMap$1 = _WeakMap,
      baseGetTag$1 = _baseGetTag,
      toSource = _toSource;

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';

  var dataViewTag = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView$1),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag$1 = baseGetTag$1;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView$1 && getTag$1(new DataView$1(new ArrayBuffer(1))) != dataViewTag) ||
      (Map$1 && getTag$1(new Map$1) != mapTag) ||
      (Promise$1 && getTag$1(Promise$1.resolve()) != promiseTag) ||
      (Set$1 && getTag$1(new Set$1) != setTag) ||
      (WeakMap$1 && getTag$1(new WeakMap$1) != weakMapTag)) {
    getTag$1 = function(value) {
      var result = baseGetTag$1(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag;
          case mapCtorString: return mapTag;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag;
          case weakMapCtorString: return weakMapTag;
        }
      }
      return result;
    };
  }

  var _getTag = getTag$1;

  var Stack$2 = _Stack,
      equalArrays = _equalArrays,
      equalByTag = _equalByTag,
      equalObjects = _equalObjects,
      getTag = _getTag,
      isArray$2 = isArray_1,
      isBuffer$1 = isBufferExports,
      isTypedArray$1 = isTypedArray_1;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag$1 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$2(object),
        othIsArr = isArray$2(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag$1 : objTag;
    othTag = othTag == argsTag ? objectTag$1 : othTag;

    var objIsObj = objTag == objectTag$1,
        othIsObj = othTag == objectTag$1,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer$1(object)) {
      if (!isBuffer$1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack$2);
      return (objIsArr || isTypedArray$1(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack$2);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack$2);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep$1;

  var baseIsEqualDeep = _baseIsEqualDeep,
      isObjectLike$2 = isObjectLike_1;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual$2(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike$2(value) && !isObjectLike$2(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
  }

  var _baseIsEqual = baseIsEqual$2;

  var Stack$1 = _Stack,
      baseIsEqual$1 = _baseIsEqual;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch$1(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack$1;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  var _baseIsMatch = baseIsMatch$1;

  var isObject$5 = isObject_1;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable$2(value) {
    return value === value && !isObject$5(value);
  }

  var _isStrictComparable = isStrictComparable$2;

  var isStrictComparable$1 = _isStrictComparable,
      keys = keys_1;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData$1(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable$1(value)];
    }
    return result;
  }

  var _getMatchData = getMatchData$1;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function matchesStrictComparable$2(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable$2;

  var baseIsMatch = _baseIsMatch,
      getMatchData = _getMatchData,
      matchesStrictComparable$1 = _matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches$1(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches$1;

  var baseGet$1 = _baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get$2(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$1(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get$2;

  var baseIsEqual = _baseIsEqual,
      get$1 = get_1,
      hasIn = hasIn_1,
      isKey$1 = _isKey,
      isStrictComparable = _isStrictComparable,
      matchesStrictComparable = _matchesStrictComparable,
      toKey$1 = _toKey;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty$1(path, srcValue) {
    if (isKey$1(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey$1(path), srcValue);
    }
    return function(object) {
      var objValue = get$1(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn(object, path)
        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty$1;

  var baseGet = _baseGet;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep$1(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep$1;

  var baseProperty = _baseProperty,
      basePropertyDeep = _basePropertyDeep,
      isKey = _isKey,
      toKey = _toKey;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property$1(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  var property_1 = property$1;

  var baseMatches = _baseMatches,
      baseMatchesProperty = _baseMatchesProperty,
      identity$1 = identity_1,
      isArray$1 = isArray_1,
      property = property_1;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee$1(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity$1;
    }
    if (typeof value == 'object') {
      return isArray$1(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value);
    }
    return property(value);
  }

  var _baseIteratee = baseIteratee$1;

  var overArg = _overArg;

  /** Built-in value references. */
  var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype$3;

  var arrayPush = _arrayPush,
      getPrototype$2 = _getPrototype,
      getSymbols = _getSymbols,
      stubArray = stubArray_1;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn$1 = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype$2(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn$1;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function nativeKeysIn$1(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn$1;

  var isObject$4 = isObject_1,
      isPrototype$1 = _isPrototype,
      nativeKeysIn = _nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn$1(object) {
    if (!isObject$4(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype$1(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$1.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn$1;

  var arrayLikeKeys = _arrayLikeKeys,
      baseKeysIn = _baseKeysIn,
      isArrayLike$2 = isArrayLike_1;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$3(object) {
    return isArrayLike$2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var keysIn_1 = keysIn$3;

  var baseGetAllKeys = _baseGetAllKeys,
      getSymbolsIn = _getSymbolsIn,
      keysIn$2 = keysIn_1;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn$1(object) {
    return baseGetAllKeys(object, keysIn$2, getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn$1;

  var arrayMap$2 = _arrayMap,
      baseIteratee = _baseIteratee,
      basePickBy = _basePickBy,
      getAllKeysIn = _getAllKeysIn;

  /**
   * Creates an object composed of the `object` properties `predicate` returns
   * truthy for. The predicate is invoked with two arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pickBy(object, _.isNumber);
   * // => { 'a': 1, 'c': 3 }
   */
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap$2(getAllKeysIn(object), function(prop) {
      return [prop];
    });
    predicate = baseIteratee(predicate);
    return basePickBy(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }

  var pickBy_1 = pickBy;

  var pickBy$1 = /*@__PURE__*/getDefaultExportFromCjs(pickBy_1);

  const FilterDrawer = props => {
    const {
      resource
    } = props;
    const properties = resource.filterProperties;
    const [filter, setFilter] = React$1.useState({});
    const params = reactRouterDom.useParams();
    const {
      translateButton,
      translateLabel
    } = useTranslation();
    const initialLoad = React$1.useRef(true);
    const {
      isVisible,
      toggleFilter
    } = useFilterDrawer();
    const {
      storeParams,
      clearParams,
      filters
    } = useQueryParams();
    React$1.useEffect(() => {
      if (initialLoad.current) {
        initialLoad.current = false;
      } else {
        setFilter({});
      }
    }, [params.resourceId]);
    const handleSubmit = event => {
      event.preventDefault();
      storeParams({
        filters: pickBy$1(filter, v => !isNil$1(v)),
        page: '1'
      });
    };
    const handleReset = event => {
      event.preventDefault();
      clearParams('filters');
      setFilter({});
    };
    React$1.useEffect(() => {
      if (filters) {
        setFilter(filters);
      }
    }, [filters]);
    const handleChange = (propertyName, value) => {
      if (propertyName.params) {
        throw new Error('you can not pass RecordJSON to filters');
      }
      setFilter({
        ...filter,
        [propertyName]: typeof value === 'string' && !value.length ? undefined : value
      });
    };
    const contentTag = getResourceElementCss(resource.id, 'filter-drawer');
    const cssContent = getResourceElementCss(resource.id, 'filter-drawer-content');
    const cssFooter = getResourceElementCss(resource.id, 'filter-drawer-footer');
    const cssButtonApply = getResourceElementCss(resource.id, 'filter-drawer-button-apply');
    const cssButtonReset = getResourceElementCss(resource.id, 'filter-drawer-button-reset');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Drawer, {
      variant: "filter",
      isHidden: !isVisible,
      as: "form",
      onSubmit: handleSubmit,
      onReset: handleReset,
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerContent, {
      "data-css": cssContent
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      justifyContent: "space-between"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H3, null, translateLabel('filters', resource.id)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      type: "button",
      variant: "light",
      size: "icon",
      rounded: true,
      color: "text",
      onClick: toggleFilter
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "X"
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      my: "x3"
    }, properties.map(property => /*#__PURE__*/React__default$1.default.createElement(BasePropertyComponentExtended, {
      key: property.propertyPath,
      where: "filter",
      onChange: handleChange,
      property: property,
      filter: filter,
      resource: resource
    })))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DrawerFooter, {
      "data-css": cssFooter
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      type: "button",
      variant: "light",
      onClick: handleReset,
      "data-css": cssButtonReset
    }, translateButton('resetFilter', resource.id)), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      type: "submit",
      variant: "contained",
      "data-css": cssButtonApply
    }, translateButton('applyChanges', resource.id))));
  };
  const OverridableFilterDrawer = allowOverride(FilterDrawer, 'FilterDrawer');

  const LoggedIn = props => {
    const {
      session,
      paths
    } = props;
    const {
      translateButton
    } = useTranslation();
    const dropActions = [{
      label: translateButton('logout'),
      onClick: event => {
        event.preventDefault();
        window.location.href = paths.logoutPath;
      },
      icon: 'LogOut'
    }];
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexShrink: 0,
      "data-css": "logged-in"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.CurrentUserNav, {
      name: session.email,
      title: session.title,
      avatarUrl: session.avatarUrl,
      dropActions: dropActions
    }));
  };
  const OverridableLoggedIn = allowOverride(LoggedIn, 'LoggedIn');

  const TIME_TO_DISAPPEAR = 3;
  const NoticeElement = props => {
    const {
      drop,
      notice,
      notifyProgress
    } = props;
    const [progress, setProgress] = React$1.useState(0);
    const intervalRef = React$1.useRef();
    const {
      tm,
      i18n: {
        language
      }
    } = useTranslation();
    const message = React$1.useMemo(() => tm(notice.message, notice.resourceId, notice.options), [notice.id, language]);
    const variant = notice.type === 'error' ? 'danger' : notice.type ?? 'info';
    React$1.useEffect(() => {
      intervalRef.current = window.setInterval(() => {
        const _progress = progress + 100 / TIME_TO_DISAPPEAR;
        notifyProgress({
          noticeId: notice.id,
          progress
        });
        setProgress(_progress);
        return _progress;
      }, 1000);
      return () => {
        clearInterval(intervalRef.current);
      };
    }, [notice]);
    React$1.useEffect(() => {
      if (progress >= 100) {
        drop();
      }
    }, [drop, progress]);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      style: {
        minWidth: '480px'
      },
      message: message,
      variant: variant,
      onCloseClick: drop
    }, notice.body);
  };
  const NoticeBox = props => {
    const {
      drop,
      notices,
      notifyProgress
    } = props;
    if (!notices.length) return null;
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      as: "div",
      "data-testid": "notice-wrapper",
      "data-css": "notice-wrapper",
      flex: true,
      flexDirection: "column",
      p: "sm",
      style: {
        gap: 4
      }
    }, notices.map(notice => /*#__PURE__*/React__default$1.default.createElement(NoticeElement, {
      key: notice.id,
      notice: notice,
      drop: () => drop(notice.id),
      notifyProgress: notifyProgress
    })));
  };
  const mapStateToProps$3 = state => ({
    notices: state.notices
  });
  const mapDispatchToProps = dispatch => ({
    drop: noticeId => dispatch(dropNotice(noticeId)),
    notifyProgress: ({
      noticeId,
      progress
    }) => dispatch(setNoticeProgress({
      noticeId,
      progress
    }))
  });
  const ConnectedNoticeBox = require$$3.connect(mapStateToProps$3, mapDispatchToProps)(NoticeBox);
  const OverridableConnectedNoticeBox = allowOverride(ConnectedNoticeBox, 'NoticeBox');

  const StyledLogo$1 = styledComponents.styled(reactRouterDom.Link)`
  text-align: center;
  display: flex;
  align-content: center;
  justify-content: center;
  flex-shrink: 0;
  padding: ${DesignSystem.themeGet('space', 'lg')} ${DesignSystem.themeGet('space', 'xxl')} ${DesignSystem.themeGet('space', 'xxl')};
  text-decoration: none;

  & > h1 {
    text-decoration: none;
    font-weight: ${DesignSystem.themeGet('fontWeights', 'bolder')};
    font-size: ${DesignSystem.themeGet('fontWeights', 'bolder')};
    color: ${DesignSystem.themeGet('colors', 'grey80')};
    font-size: ${DesignSystem.themeGet('fontSizes', 'xl')};
    line-height: ${DesignSystem.themeGet('lineHeights', 'xl')};
  }

  & > img {
    max-width: 170px;
  }

  &:hover h1 {
    color: ${DesignSystem.themeGet('colors', 'primary100')};
  }
`;
  const h$2 = new ViewHelpers();
  const SidebarBranding = props => {
    const {
      branding
    } = props;
    const {
      logo,
      companyName
    } = branding;
    return /*#__PURE__*/React__default$1.default.createElement(StyledLogo$1, {
      className: DesignSystem.cssClass('Logo'),
      to: h$2.dashboardUrl(),
      "data-css": "sidebar-logo"
    }, logo ? /*#__PURE__*/React__default$1.default.createElement("img", {
      src: logo,
      alt: companyName
    }) : /*#__PURE__*/React__default$1.default.createElement("h1", null, companyName));
  };
  var SidebarBranding$1 = allowOverride(SidebarBranding, 'SidebarBranding');

  const SidebarFooter = () => {
    const branding = require$$3.useSelector(state => state.branding);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mt: "lg",
      mb: "md",
      "data-css": "sidebar-footer"
    }, branding.withMadeWithLove && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MadeWithLove, null));
  };
  var SidebarFooter$1 = allowOverride(SidebarFooter, 'SidebarFooter');

  const h$1 = new ViewHelpers();
  const SidebarPages = props => {
    const {
      pages
    } = props;
    const {
      translateLabel,
      translatePage
    } = useTranslation();
    const location = reactRouter.useLocation();
    const navigate = reactRouter.useNavigate();
    if (!pages || !pages.length) {
      return null;
    }
    const isActive = page => !!location.pathname.match(`/pages/${page.name}`);
    const elements = pages.map(page => ({
      id: page.name,
      label: translatePage(page.name),
      isSelected: isActive(page),
      icon: page.icon,
      href: h$1.pageUrl(page.name),
      onClick: (event, element) => {
        event.preventDefault();
        if (element.href) {
          navigate(element.href);
        }
      }
    }));
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Navigation, {
      label: translateLabel('pages'),
      elements: elements
    });
  };
  var SidebarPages$1 = allowOverride(SidebarPages, 'SidebarPages');

  /**
   * @alias SidebarResourceSectionProps
   * @memberof SidebarResourceSection
   */

  /**
   * Groups resources by sections and renders the list in {@link Sidebar}
   *
   * ### Usage
   *
   * ```
   * import { SidebarResourceSection } from 'adminjs`
   * ```
   *
   * @component
   * @subcategory Application
   * @name SidebarResourceSection
   */
  const SidebarResourceSectionOriginal = ({
    resources
  }) => {
    const elements = useNavigationResources(resources);
    const {
      translateLabel
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Navigation, {
      label: translateLabel('navigation'),
      elements: elements
    });
  };

  // Rollup cannot handle type exports well - that is why we need to do this hack with
  // exporting default and named SidebarResourceSection
  const SidebarResourceSection = allowOverride(SidebarResourceSectionOriginal, 'SidebarResourceSection');

  const SIDEBAR_Z_INDEX = 50;
  const StyledSidebar = styledComponents.styled(DesignSystem.Box)`
  top: 0;
  bottom: 0;
  overflow-y: auto;
  width: ${({
  theme
}) => theme.sizes.sidebarWidth};
  border-right: ${({
  theme
}) => theme.borders.default};
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  z-index: ${SIDEBAR_Z_INDEX};
  background: ${({
  theme
}) => theme.colors.sidebar};

  transition: left 0.25s ease-in-out;

  &.hidden {
    left: -${({
  theme
}) => theme.sizes.sidebarWidth};
  }
  &.visible {
    left: 0;
  }
`;
  StyledSidebar.defaultProps = {
    position: ['absolute', 'absolute', 'absolute', 'absolute', 'initial']
  };
  const SidebarOriginal = props => {
    const {
      isVisible
    } = props;
    const branding = require$$3.useSelector(state => state.branding);
    const resources = require$$3.useSelector(state => state.resources);
    const pages = require$$3.useSelector(state => state.pages);
    return /*#__PURE__*/React__default$1.default.createElement(StyledSidebar, {
      className: isVisible ? 'visible' : 'hidden',
      "data-css": "sidebar"
    }, /*#__PURE__*/React__default$1.default.createElement(SidebarBranding$1, {
      branding: branding
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flexGrow: 1,
      className: DesignSystem.cssClass('Resources'),
      "data-css": "sidebar-resources"
    }, /*#__PURE__*/React__default$1.default.createElement(SidebarResourceSection, {
      resources: resources
    })), /*#__PURE__*/React__default$1.default.createElement(SidebarPages$1, {
      pages: pages
    }), /*#__PURE__*/React__default$1.default.createElement(SidebarFooter$1, null));
  };
  const Sidebar = allowOverride(SidebarOriginal, 'Sidebar');

  const LanguageSelect = () => {
    const {
      i18n: {
        language,
        options: {
          supportedLngs
        },
        changeLanguage
      },
      translateComponent
    } = useTranslation();
    const availableLanguages = React$1.useMemo(() => supportedLngs ? supportedLngs.filter(lang => lang !== 'cimode') : [], [supportedLngs]);
    if (availableLanguages.length <= 1) {
      return null;
    }
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      alignItems: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DropDown, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DropDownTrigger, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      color: "text"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Globe"
    }), translateComponent(`LanguageSelector.availableLanguages.${language}`, {
      defaultValue: language
    }))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DropDownMenu, null, availableLanguages.map(lang => /*#__PURE__*/React__default$1.default.createElement(DesignSystem.DropDownItem, {
      key: lang,
      onClick: () => {
        changeLanguage(lang);
      }
    }, translateComponent(`LanguageSelector.availableLanguages.${lang}`, {
      defaultValue: lang
    }))))));
  };

  const VersionItem = styledComponents.styled(DesignSystem.Text)`
  padding: 12px 24px 12px 0;
`;
  VersionItem.defaultProps = {
    display: ['none', 'block'],
    color: 'grey100'
  };
  const Version = props => {
    const {
      versions
    } = props;
    const {
      admin,
      app
    } = versions;
    const {
      translateLabel
    } = useTranslation();
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      flexGrow: 1,
      py: "default",
      px: "xxl",
      className: DesignSystem.cssClass('Version'),
      "data-css": "version"
    }, admin && /*#__PURE__*/React__default$1.default.createElement(VersionItem, null, translateLabel('adminVersion', {
      version: admin
    })), app && /*#__PURE__*/React__default$1.default.createElement(VersionItem, null, translateLabel('appVersion', {
      version: app
    })));
  };
  const OverridableVersion = allowOverride(Version, 'Version');

  const NavBar = styledComponents.styled(DesignSystem.Box)`
  height: ${({
  theme
}) => theme.sizes.navbarHeight};
  border-bottom: ${({
  theme
}) => theme.borders.default};
  background: ${({
  theme
}) => theme.colors.container};
  display: flex;
  flex-direction: row;
  flex-shrink: 0;
  align-items: center;
`;
  NavBar.defaultProps = {
    className: DesignSystem.cssClass('NavBar')
  };
  const TopBar = props => {
    const {
      toggleSidebar
    } = props;
    const session = require$$3.useSelector(state => state.session);
    const paths = require$$3.useSelector(state => state.paths);
    const versions = require$$3.useSelector(state => state.versions);
    return /*#__PURE__*/React__default$1.default.createElement(NavBar, {
      "data-css": "topbar"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      py: "lg",
      px: ['default', 'lg'],
      onClick: toggleSidebar,
      display: ['block', 'block', 'block', 'block', 'none'],
      style: {
        cursor: 'pointer'
      }
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Icon, {
      icon: "Menu",
      size: 24
    })), /*#__PURE__*/React__default$1.default.createElement(OverridableVersion, {
      versions: versions
    }), /*#__PURE__*/React__default$1.default.createElement(LanguageSelect, null), session && session.email ? /*#__PURE__*/React__default$1.default.createElement(OverridableLoggedIn, {
      session: session,
      paths: paths
    }) : '');
  };
  const OverridableTopbar = allowOverride(TopBar, 'TopBar');

  const Footer = () => null;
  const OverridableFooter = allowOverride(Footer, 'Footer');

  var AppComponents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ActionButton: OverridableActionButton,
    ActionHeader: OverridableActionHeader,
    AdminModal: AdminModal,
    AppLoader: AppLoader,
    AuthenticationBackgroundComponent: OverridableAuthenticationBackgroundComponent,
    BaseActionComponent: BaseActionComponent,
    BreadcrumbLink: BreadcrumbLink,
    BreadcrumbText: BreadcrumbText,
    Breadcrumbs: OverridableBreadcrumbs,
    Dashboard: Dashboard$1,
    DashboardHeader: DashboardHeader,
    DrawerPortal: DrawerPortal,
    ErrorBoundary: ErrorBoundary$1,
    ErrorMessageBox: ErrorMessageBox,
    FilterDrawer: OverridableFilterDrawer,
    Footer: OverridableFooter,
    LoggedIn: OverridableLoggedIn,
    NoActionError: NoActionError,
    NoRecordError: NoRecordError,
    NoRecords: NoRecords,
    NoResourceError: NoResourceError,
    NoticeBox: OverridableConnectedNoticeBox,
    OriginalActionButton: ActionButton,
    OriginalActionHeader: ActionHeader,
    OriginalAuthenticationBackgroundComponent: AuthenticationBackgroundComponent,
    OriginalBreadcrumbs: Breadcrumbs,
    OriginalFilterDrawer: FilterDrawer,
    OriginalFooter: Footer,
    OriginalLoggedIn: LoggedIn,
    OriginalNoRecords: NoRecordsOriginal,
    OriginalNoticeBox: ConnectedNoticeBox,
    OriginalPropertyHeader: PropertyHeader,
    OriginalRecordInList: RecordInList,
    OriginalRecordsTable: RecordsTable,
    OriginalRecordsTableHeader: RecordsTableHeader,
    OriginalSelectedRecords: SelectedRecords,
    OriginalSidebarResourceSection: SidebarResourceSectionOriginal,
    OriginalTopBar: TopBar,
    OriginalVersion: Version,
    PropertyHeader: OverridablePropertyHeader,
    RecordInList: OverridableRecordInList,
    RecordsTable: OverridableRecordsTable,
    RecordsTableHeader: OverridableRecordsTableHeader,
    SelectedRecords: OverridableSelectedRecords,
    Sidebar: Sidebar,
    SidebarResourceSection: SidebarResourceSection,
    SortLink: SortLink$1,
    TopBar: OverridableTopbar,
    Version: OverridableVersion
  });

  class Dashboard extends React__default$1.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        isClient: false
      };
    }
    componentDidMount() {
      this.setState({
        isClient: true
      });
    }
    render() {
      const {
        dashboard
      } = this.props;
      const {
        isClient
      } = this.state;
      let Component;
      if (dashboard && dashboard.component && isClient && AdminJS.UserComponents[dashboard.component]) {
        Component = AdminJS.UserComponents[dashboard.component];
      } else {
        Component = Dashboard$1;
      }
      return /*#__PURE__*/React__default$1.default.createElement(ErrorBoundary$1, null, /*#__PURE__*/React__default$1.default.createElement(Component, null));
    }
  }
  const mapStateToProps$2 = state => ({
    dashboard: state.dashboard
  });
  var DashboardRoute = allowOverride(require$$3.connect(mapStateToProps$2)(Dashboard), 'DashboardRoute');

  function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
  const StyledWrapperWithFilter = styledComponents.styled(DesignSystem.Box)`
  & > ${DesignSystem.Drawer} {
    border-radius: ${({
  theme
}) => theme.space.sm};
  }

  & > ${DesignSystem.DrawerContent} {
    background: ${({
  theme
}) => theme.colors.container};
    padding: ${({
  theme
}) => theme.space.xxl};
    overflow: visible;
  }

  & > ${DesignSystem.DrawerFooter} {
    background: ${({
  theme
}) => theme.colors.container};
    padding: 0 ${({
  theme
}) => theme.space.xxl} ${({
  theme
}) => theme.space.xxl};
  }
`;
  const StyledWrapper = styledComponents.styled(DesignSystem.Box)`
  & ${DesignSystem.DrawerContent} {
    background: ${({
  theme
}) => theme.colors.container};
    padding: ${({
  theme
}) => theme.space.xxl};
    overflow: visible;
  }

  & ${DesignSystem.DrawerFooter} {
    background: ${({
  theme
}) => theme.colors.container};
    padding: 0 ${({
  theme
}) => theme.space.xxl} ${({
  theme
}) => theme.space.xxl};
  }
`;
  const Wrapper$1 = props => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const {
      children,
      variant,
      color,
      showFilter = false,
      ...rest
    } = props;
    const Component = showFilter ? StyledWrapperWithFilter : StyledWrapper;
    return /*#__PURE__*/React__default$1.default.createElement(Component, _extends({}, rest, {
      variant: "transparent",
      mx: "auto",
      "data-css": "styled-wrapper"
    }), children);
  };
  var Wrapper$2 = allowOverride(Wrapper$1, 'RouteWrapper');

  const api$1 = new ApiClient();
  const RecordAction = () => {
    const [record, setRecord] = React$1.useState();
    const [loading, setLoading] = React$1.useState(true);
    const [tag, setTag] = React$1.useState('');
    const [filterVisible, setFilterVisible] = React$1.useState(false);
    const params = reactRouter.useParams();
    const addNotice = useNotice();
    const {
      actionName,
      recordId,
      resourceId
    } = params;
    const resource = useResource(resourceId);
    const action = record && record.recordActions.find(r => r.name === actionName);
    const actionFromResource = resource?.actions.find(a => a.name === actionName);
    const listActionName = 'list';
    const listAction = resource?.resourceActions.find(r => r.name === listActionName);
    const fetchRecord = () => {
      // Do not call API on route enter if the action doesn't have a component
      if (actionFromResource && actionHasDisabledComponent(actionFromResource)) {
        setLoading(false);
        return;
      }
      setLoading(true);
      api$1.recordAction(params).then(response => {
        if (response.data.notice && response.data.notice.type === 'error') {
          addNotice(response.data.notice);
        }
        if (!response.data.record?.baseError?.type || ![ErrorTypeEnum.App, ErrorTypeEnum.NotFound, ErrorTypeEnum.Forbidden].includes(response.data.record?.baseError?.type)) {
          setRecord(response.data.record);
        }
      }).catch(error => {
        addNotice({
          message: 'errorFetchingRecord',
          type: 'error',
          resourceId
        });
        throw error;
      }).finally(() => {
        setLoading(false);
      });
    };
    React$1.useEffect(() => {
      fetchRecord();
    }, [actionName, recordId, resourceId]);
    const handleActionPerformed = React$1.useCallback((oldRecord, response) => {
      if (response.record) {
        setRecord(mergeRecordResponse(oldRecord, response));
      } else {
        fetchRecord();
      }
    }, [fetchRecord]);
    if (!resource) {
      return /*#__PURE__*/React__default$1.default.createElement(NoResourceError, {
        resourceId: resourceId
      });
    }

    // When the user visits this route (record action) from a different, than the current one, record.
    // It renders everything with a new resource. The old record remains until useEffect fetches data
    // from the API. that is why we have to check if the current record has correct record.id.
    // Alternative approach would be to setRecord(undefined) before the fetch, but it is async and
    // we cannot be sure that the component wont be rendered (it will be at least once) with the
    // wrong data.
    const hasDifferentRecord = record && record.id && record.id.toString() !== recordId;
    if (loading || hasDifferentRecord) {
      return actionFromResource?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null)) : /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null);
    }
    if (!action || actionFromResource && actionHasDisabledComponent(actionFromResource)) {
      return /*#__PURE__*/React__default$1.default.createElement(NoActionError, {
        resourceId: resourceId,
        actionName: actionName
      });
    }
    if (!record) {
      return /*#__PURE__*/React__default$1.default.createElement(NoRecordError, {
        resourceId: resourceId,
        recordId: recordId
      });
    }
    if (action.showInDrawer) {
      if (!listAction) {
        return /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
          width: action.containerWidth
        }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
          action: action,
          resource: resource,
          record: record
        }));
      }
      const toggleFilter = listAction.showFilter ? () => setFilterVisible(!filterVisible) : undefined;
      return /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
        width: action.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: action,
        resource: resource,
        record: record
      })), /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
        width: listAction.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
        resource: resource,
        action: listAction,
        tag: tag,
        toggleFilter: toggleFilter
      }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: listAction,
        resource: resource,
        setTag: setTag
      })));
    }
    return /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
      width: action.containerWidth
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
      resource: resource,
      action: action,
      record: record,
      actionPerformed: response => handleActionPerformed(record, response)
    }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
      action: action,
      resource: resource,
      record: record
    }));
  };
  var RecordActionRoute = allowOverride(RecordAction, 'RecordActionRoute');

  const ResourceAction$1 = props => {
    const params = reactRouter.useParams();
    const {
      resources
    } = props;
    const {
      resourceId,
      actionName
    } = params;
    const [tag, setTag] = React$1.useState('');
    const [filterVisible, setFilterVisible] = React$1.useState(false);
    const resource = resources.find(r => r.id === resourceId);
    if (!resource) {
      return /*#__PURE__*/React__default$1.default.createElement(NoResourceError, {
        resourceId: resourceId
      });
    }
    const action = resource.resourceActions.find(r => r.name === actionName);
    if (!action || actionHasDisabledComponent(action)) {
      return /*#__PURE__*/React__default$1.default.createElement(NoActionError, {
        resourceId: resourceId,
        actionName: actionName
      });
    }
    const listActionName = 'list';
    const listAction = resource.resourceActions.find(r => r.name === listActionName);
    const contentTag = getResourceElementCss(resource.id, action.name);
    if (action.showInDrawer) {
      if (!listAction) {
        return /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
          width: action.containerWidth
        }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
          action: action,
          resource: resource
        }));
      }
      const toggleFilter = listAction.showFilter ? () => setFilterVisible(!filterVisible) : undefined;
      return /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
        width: action.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: action,
        resource: resource,
        setTag: setTag
      })), /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
        width: listAction.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
        resource: resource,
        action: listAction,
        tag: tag,
        toggleFilter: toggleFilter
      }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: listAction,
        resource: resource,
        setTag: setTag
      })));
    }
    return /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
      width: action.containerWidth,
      showFilter: action.showFilter,
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      flexDirection: "column",
      flexGrow: 1
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
      resource: resource,
      action: action,
      toggleFilter: action.showFilter,
      tag: tag
    }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
      action: action,
      resource: resource,
      setTag: setTag
    })), action.showFilter && /*#__PURE__*/React__default$1.default.createElement(OverridableFilterDrawer, {
      resource: resource
    }));
  };
  const mapStateToProps$1 = state => ({
    resources: state.resources
  });
  var ResourceActionRoute = allowOverride(require$$3.connect(mapStateToProps$1)(ResourceAction$1), 'ResourceActionRoute');

  const api = new ApiClient();
  const BulkAction = () => {
    const params = reactRouter.useParams();
    const [records, setRecords] = React$1.useState([]);
    const [loading, setLoading] = React$1.useState(false);
    const [tag, setTag] = React$1.useState('');
    const [filterVisible, setFilterVisible] = React$1.useState(false);
    const {
      translateMessage
    } = useTranslation();
    const addNotice = useNotice();
    const location = reactRouter.useLocation();
    const {
      resourceId,
      actionName
    } = params;
    const resource = useResource(resourceId);
    const listActionName = 'list';
    const listAction = resource?.resourceActions.find(r => r.name === listActionName);
    const fetchRecords = () => {
      const recordIdsString = new URLSearchParams(location.search).get('recordIds');
      const recordIds = recordIdsString ? recordIdsString.split(',') : [];
      setLoading(true);
      return api.bulkAction({
        resourceId: resourceId,
        recordIds,
        actionName: actionName
      }).then(response => {
        setLoading(false);
        setRecords(response.data.records);
      }).catch(error => {
        setLoading(false);
        addNotice({
          message: 'errorFetchingRecords',
          type: 'error',
          resourceId
        });
        throw error;
      });
    };
    React$1.useEffect(() => {
      fetchRecords();
    }, [params.resourceId, params.actionName, location.search]);
    if (!resource) {
      return /*#__PURE__*/React__default$1.default.createElement(NoResourceError, {
        resourceId: resourceId
      });
    }
    if (!records && !loading) {
      return /*#__PURE__*/React__default$1.default.createElement(ErrorMessageBox, {
        title: "No records"
      }, /*#__PURE__*/React__default$1.default.createElement("p", null, translateMessage('noRecordsSelected', resourceId)));
    }
    const action = getBulkActionsFromRecords(records || []).find(r => r.name === actionName);
    if (loading) {
      const actionFromResource = resource.actions.find(r => r.name === actionName);
      return actionFromResource?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null)) : /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Loader, null);
    }
    if (!action) {
      return /*#__PURE__*/React__default$1.default.createElement(NoActionError, {
        resourceId: resourceId,
        actionName: actionName
      });
    }
    if (action.showInDrawer) {
      if (!listAction) {
        return /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
          width: action.containerWidth
        }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
          action: action,
          resource: resource,
          records: records
        }));
      }
      const toggleFilter = listAction.showFilter ? () => setFilterVisible(!filterVisible) : undefined;
      return /*#__PURE__*/React__default$1.default.createElement(React__default$1.default.Fragment, null, /*#__PURE__*/React__default$1.default.createElement(DrawerPortal, {
        width: action.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: action,
        resource: resource,
        records: records,
        setTag: setTag
      })), /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
        width: listAction.containerWidth
      }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
        resource: resource,
        action: listAction,
        tag: tag,
        toggleFilter: toggleFilter
      }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
        action: listAction,
        resource: resource,
        setTag: setTag
      })));
    }
    return /*#__PURE__*/React__default$1.default.createElement(Wrapper$2, {
      width: action.containerWidth
    }, !action?.showInDrawer ? /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
      resource: resource,
      action: action,
      tag: tag
    }) : '', /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
      action: action,
      resource: resource,
      records: records,
      setTag: setTag
    }));
  };
  var BulkActionRoute = allowOverride(BulkAction, 'BulkActionRoute');

  /**
   * A higher-order component that prevents a component from rendering server-side
   *
   * @template P - The props object of the wrapped component
   * @param {React.ComponentType<P>} Component - The component to be wrapped
   * @returns {React.FC<P>} A new component that renders the given component client-side only
   */
  // eslint-disable-next-line max-len
  const withNoSSR = Component => props => {
    const [isClient, setIsClient] = React$1.useState(false);

    /**
     * Sets isClient to true when the component is mounted on the client side
     */
    React$1.useEffect(() => {
      setIsClient(true);
    }, []);

    // Renders nothing if the component is not mounted on the client side
    if (!isClient) return null;

    // Renders the wrapped component with the given props if it's mounted on the client side
    return /*#__PURE__*/React__default$1.default.createElement(Component, props);
  };

  const Page = () => {
    const pages = require$$3.useSelector(state => state.pages);
    const params = reactRouter.useParams();
    const {
      pageName
    } = params;
    const {
      tm
    } = useTranslation();
    const currentPage = React$1.useMemo(() => pages.find(({
      name
    }) => name === pageName), [pages, pageName]);
    if (!currentPage) {
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
        title: tm('pageNotFound_title'),
        illustration: "NotFound"
      }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
        mb: "xxl"
      }, /*#__PURE__*/React__default$1.default.createElement(Trans, {
        i18nKey: "messages.pageNotFound_subtitle",
        values: {
          pageName
        },
        components: {
          strong: /*#__PURE__*/React__default$1.default.createElement("strong", null)
        }
      })));
    }
    const Component = AdminJS.UserComponents[currentPage.component];
    if (!Component) {
      return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.InfoBox, {
        title: tm('componentNotFound_title'),
        illustration: "Beware"
      }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
        mb: "xxl"
      }, /*#__PURE__*/React__default$1.default.createElement(Trans, {
        i18nKey: "messages.componentNotFound_subtitle"
      })));
    }
    return /*#__PURE__*/React__default$1.default.createElement(ErrorBoundary$1, null, /*#__PURE__*/React__default$1.default.createElement(Component, null));
  };
  var PageRoute = allowOverride(withNoSSR(Page), 'PageRoute');

  const getAction = resource => {
    const h = new ViewHelpers();
    const resourceId = ':resourceId';
    const actionName = ':actionName';
    const recordId = ':recordId';
    const recordActionUrl = h.recordActionUrl({
      resourceId,
      recordId,
      actionName
    });
    const resourceActionUrl = h.resourceActionUrl({
      resourceId,
      actionName
    });
    const bulkActionUrl = h.bulkActionUrl({
      resourceId,
      actionName
    });
    const resourceActionMatch = reactRouter.useMatch(resourceActionUrl);
    const recordActionMatch = reactRouter.useMatch(recordActionUrl);
    const bulkActionMatch = reactRouter.useMatch(bulkActionUrl);
    const action = resourceActionMatch?.params.actionName || recordActionMatch?.params.actionName || bulkActionMatch?.params.actionName;
    return action ? resource.actions.find(a => a.name === action) : undefined;
  };
  const ResourceAction = props => {
    const params = reactRouter.useParams();
    const {
      resources
    } = props;
    const {
      resourceId
    } = params;
    const [tag, setTag] = React$1.useState('');
    if (!resourceId) {
      return null;
    }
    const resource = resources.find(r => r.id === resourceId);
    if (!resource) {
      return /*#__PURE__*/React__default$1.default.createElement(NoResourceError, {
        resourceId: resourceId
      });
    }
    const realEndAction = getAction(resource);
    if (realEndAction && !realEndAction.showInDrawer) {
      return null;
    }
    const listActionName = 'list';
    const listAction = resource.resourceActions.find(r => r.name === listActionName);
    if (!listAction) {
      return /*#__PURE__*/React__default$1.default.createElement(NoActionError, {
        resourceId: resourceId,
        actionName: listActionName
      });
    }
    const contentTag = getResourceElementCss(resource.id, 'list');
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      variant: "transparent",
      alignItems: "start",
      width: listAction.containerWidth,
      mx: "auto",
      style: {
        gap: 16
      },
      height: "100%",
      "data-css": contentTag
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      flexDirection: "column",
      flexGrow: 1
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableActionHeader, {
      resource: resource,
      action: listAction,
      tag: tag,
      toggleFilter: listAction.showFilter
    }), /*#__PURE__*/React__default$1.default.createElement(BaseActionComponent, {
      action: listAction,
      resource: resource,
      setTag: setTag
    })), listAction.showFilter && /*#__PURE__*/React__default$1.default.createElement(OverridableFilterDrawer, {
      resource: resource
    }));
  };
  const mapStateToProps = state => ({
    resources: state.resources
  });
  var ResourceRoute = allowOverride(require$$3.connect(mapStateToProps)(ResourceAction), 'ResourceRoute');

  /* eslint-disable react/no-children-prop */
  const h = new ViewHelpers();
  const App = () => {
    const [sidebarVisible, toggleSidebar] = React$1.useState(false);
    const location = reactRouter.useLocation();
    useHistoryListen();
    React$1.useEffect(() => {
      if (sidebarVisible) {
        toggleSidebar(false);
      }
    }, [location]);
    const resourceId = ':resourceId';
    const actionName = ':actionName';
    const recordId = ':recordId';
    const pageName = ':pageName';

    // Note: replaces are required so that record/resource/bulk actions urls
    // are relative to their parent route
    const dashboardUrl = h.dashboardUrl();
    const resourceUrl = h.resourceUrl({
      resourceId
    });
    const recordActionUrl = h.recordActionUrl({
      resourceId,
      recordId,
      actionName
    }).replace(resourceUrl, '').substring(1);
    const resourceActionUrl = h.resourceActionUrl({
      resourceId,
      actionName
    }).replace(resourceUrl, '').substring(1);
    const bulkActionUrl = h.bulkActionUrl({
      resourceId,
      actionName
    }).replace(resourceUrl, '').substring(1);
    const pageUrl = h.pageUrl(pageName);
    return /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      height: "100%",
      flex: true,
      "data-css": "app"
    }, sidebarVisible ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Overlay, {
      onClick: () => toggleSidebar(!sidebarVisible),
      zIndex: SIDEBAR_Z_INDEX - 1
    }) : null, /*#__PURE__*/React__default$1.default.createElement(Sidebar, {
      isVisible: sidebarVisible,
      "data-css": "sidebar"
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      overflowY: "auto",
      bg: "bg",
      "data-css": "app-content"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableTopbar, {
      toggleSidebar: () => toggleSidebar(!sidebarVisible)
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      position: "absolute",
      top: 0,
      zIndex: 2000,
      "data-css": "notice"
    }, /*#__PURE__*/React__default$1.default.createElement(OverridableConnectedNoticeBox, null)), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Routes, null, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: dashboardUrl
    }, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      index: true,
      element: /*#__PURE__*/React__default$1.default.createElement(DashboardRoute, null)
    })), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: resourceUrl
    }, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      index: true,
      element: /*#__PURE__*/React__default$1.default.createElement(ResourceRoute, null)
    }), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: bulkActionUrl,
      element: /*#__PURE__*/React__default$1.default.createElement(BulkActionRoute, null)
    }), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: resourceActionUrl,
      element: /*#__PURE__*/React__default$1.default.createElement(ResourceActionRoute, null)
    }), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: recordActionUrl,
      element: /*#__PURE__*/React__default$1.default.createElement(RecordActionRoute, null)
    })), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: pageUrl
    }, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      index: true,
      element: /*#__PURE__*/React__default$1.default.createElement(PageRoute, null)
    })), /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.Route, {
      path: "*",
      element: /*#__PURE__*/React__default$1.default.createElement(DashboardRoute, null)
    })), /*#__PURE__*/React__default$1.default.createElement(OverridableFooter, null)), /*#__PURE__*/React__default$1.default.createElement(AdminModal, null), /*#__PURE__*/React__default$1.default.createElement(OverridableAuthenticationBackgroundComponent, null));
  };
  const OverridableApp = allowOverride(App, 'Application');

  const Wrapper = styledComponents.styled(DesignSystem.Box)`
  align-items: center;
  justify-content: center;
  flex-direction: column;
  height: 100%;
`;
  const StyledLogo = styledComponents.styled.img`
  max-width: 200px;
  margin: ${({
  theme
}) => theme.space.md} 0;
`;
  const IllustrationsWrapper = styledComponents.styled(DesignSystem.Box)`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  & svg [stroke='#3B3552'] {
    stroke: rgba(255, 255, 255, 0.5);
  }
  & svg [fill='#3040D6'] {
    fill: rgba(255, 255, 255, 1);
  }
`;
  const Login = () => {
    const props = window.__APP_STATE__;
    const {
      action,
      errorMessage: message
    } = props;
    const {
      translateComponent,
      translateMessage
    } = useTranslation();
    const branding = require$$3.useSelector(state => state.branding);
    return /*#__PURE__*/React__default$1.default.createElement(Wrapper, {
      flex: true,
      variant: "grey",
      className: "login__Wrapper"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      bg: "white",
      height: "440px",
      flex: true,
      boxShadow: "login",
      width: [1, 2 / 3, 'auto']
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      bg: "primary100",
      color: "white",
      p: "x3",
      width: "380px",
      flexGrow: 0,
      display: ['none', 'none', 'block'],
      position: "relative"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H2, {
      fontWeight: "lighter"
    }, translateComponent('Login.welcomeHeader')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      fontWeight: "lighter",
      mt: "default"
    }, translateComponent('Login.welcomeMessage')), /*#__PURE__*/React__default$1.default.createElement(IllustrationsWrapper, {
      p: "xxl"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      display: "inline",
      mr: "default"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "Planet",
      width: 82,
      height: 91
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      display: "inline"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "Astronaut",
      width: 82,
      height: 91
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      display: "inline",
      position: "relative",
      top: "-20px"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Illustration, {
      variant: "FlagInCog",
      width: 82,
      height: 91
    })))), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      as: "form",
      action: action,
      method: "POST",
      p: "x3",
      flexGrow: 1,
      width: ['100%', '100%', '480px']
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.H5, {
      marginBottom: "xxl"
    }, branding.logo ? /*#__PURE__*/React__default$1.default.createElement(StyledLogo, {
      src: branding.logo,
      alt: branding.companyName
    }) : branding.companyName), message && /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MessageBox, {
      my: "lg",
      message: message.split(' ').length > 1 ? message : translateMessage(message),
      variant: "danger"
    }), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, {
      required: true
    }, translateComponent('Login.properties.email')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, {
      name: "email",
      placeholder: translateComponent('Login.properties.email')
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.FormGroup, null, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Label, {
      required: true
    }, translateComponent('Login.properties.password')), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Input, {
      type: "password",
      name: "password",
      placeholder: translateComponent('Login.properties.password'),
      autoComplete: "new-password"
    })), /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Text, {
      mt: "xl",
      textAlign: "center"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Button, {
      variant: "contained"
    }, translateComponent('Login.loginButton'))))), branding.withMadeWithLove ? /*#__PURE__*/React__default$1.default.createElement(DesignSystem.Box, {
      mt: "xxl"
    }, /*#__PURE__*/React__default$1.default.createElement(DesignSystem.MadeWithLove, null)) : null);
  };
  var Login$1 = allowOverride(Login, 'Login');

  var cjs = {};

  var developmentOnly = {};

  Object.defineProperty(developmentOnly, "__esModule", {
    value: true
  });
  developmentOnly.devToolsEnhancer = developmentOnly.composeWithDevTools = void 0;
  var _redux$2 = require$$0__default.default;
  function extensionComposeStub$1() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) return undefined;
    if (typeof funcs[0] === 'object') return _redux$2.compose;
    return (0, _redux$2.compose)(...funcs);
  }
  const composeWithDevTools$2 = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : extensionComposeStub$1;
  developmentOnly.composeWithDevTools = composeWithDevTools$2;
  const devToolsEnhancer$2 = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {
    return function (noop) {
      return noop;
    };
  };
  developmentOnly.devToolsEnhancer = devToolsEnhancer$2;

  var logOnly = {};

  var interopRequireDefault = {exports: {}};

  (function (module) {
  	function _interopRequireDefault(obj) {
  	  return obj && obj.__esModule ? obj : {
  	    "default": obj
  	  };
  	}
  	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
  } (interopRequireDefault));

  var interopRequireDefaultExports = interopRequireDefault.exports;

  var assign = {};

  var hasRequiredAssign;

  function requireAssign () {
  	if (hasRequiredAssign) return assign;
  	hasRequiredAssign = 1;

  	Object.defineProperty(assign, "__esModule", {
  	  value: true
  	});
  	assign.default = assign$1;
  	const objectKeys = Object.keys || function (obj) {
  	  const keys = [];
  	  for (const key in obj) {
  	    if ({}.hasOwnProperty.call(obj, key)) keys.push(key);
  	  }
  	  return keys;
  	};
  	function assign$1(obj, newKey, newValue) {
  	  const keys = objectKeys(obj);
  	  const copy = {};
  	  for (let i = 0, l = keys.length; i < l; i++) {
  	    const key = keys[i];
  	    copy[key] = obj[key];
  	  }
  	  copy[newKey] = newValue;
  	  return copy;
  	}
  	return assign;
  }

  var _interopRequireDefault = interopRequireDefaultExports;
  Object.defineProperty(logOnly, "__esModule", {
    value: true
  });
  logOnly.composeWithDevTools = composeWithDevTools$1;
  logOnly.devToolsEnhancer = void 0;
  var _assign = _interopRequireDefault(requireAssign());
  var _redux$1 = require$$0__default.default;
  function enhancer(options) {
    const config = options || {};
    config.features = {
      pause: true,
      export: true,
      test: true
    };
    config.type = 'redux';
    if (config.autoPause === undefined) config.autoPause = true;
    if (config.latency === undefined) config.latency = 500;
    return function (createStore) {
      return function (reducer, preloadedState) {
        const store = createStore(reducer, preloadedState);
        const origDispatch = store.dispatch;
        const devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect(config);
        devTools.init(store.getState());
        const dispatch = function (action) {
          const r = origDispatch(action);
          devTools.send(action, store.getState());
          return r;
        };
        if (Object.assign) return Object.assign(store, {
          dispatch: dispatch
        });
        return (0, _assign.default)(store, 'dispatch', dispatch);
      };
    };
  }
  function composeWithEnhancer(config) {
    return function () {
      return (0, _redux$1.compose)((0, _redux$1.compose)(...arguments), enhancer(config));
    };
  }
  function composeWithDevTools$1() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__) {
      if (funcs.length === 0) return enhancer();
      if (typeof funcs[0] === 'object') return composeWithEnhancer(funcs[0]);
      return composeWithEnhancer()(...funcs);
    }
    if (funcs.length === 0) return undefined;
    if (typeof funcs[0] === 'object') return _redux$1.compose;
    return (0, _redux$1.compose)(...funcs);
  }
  const devToolsEnhancer$1 = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? enhancer : function () {
    return function (noop) {
      return noop;
    };
  };
  logOnly.devToolsEnhancer = devToolsEnhancer$1;

  var logOnlyInProduction = {};

  Object.defineProperty(logOnlyInProduction, "__esModule", {
    value: true
  });
  logOnlyInProduction.devToolsEnhancer = logOnlyInProduction.composeWithDevTools = void 0;
  var _redux = require$$0__default.default;
  _interopRequireWildcard(logOnly);
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function extensionComposeStub() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) return undefined;
    if (typeof funcs[0] === 'object') return _redux.compose;
    return (0, _redux.compose)(...funcs);
  }
  const composeWithDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : extensionComposeStub;
  logOnlyInProduction.composeWithDevTools = composeWithDevTools;
  const devToolsEnhancer = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {
    return function (noop) {
      return noop;
    };
  };
  logOnlyInProduction.devToolsEnhancer = devToolsEnhancer;

  (function (exports) {

  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.composeWithDevTools = void 0;
  	Object.defineProperty(exports, "composeWithDevToolsDevelopmentOnly", {
  	  enumerable: true,
  	  get: function () {
  	    return _developmentOnly.composeWithDevTools;
  	  }
  	});
  	Object.defineProperty(exports, "composeWithDevToolsLogOnly", {
  	  enumerable: true,
  	  get: function () {
  	    return _logOnly.composeWithDevTools;
  	  }
  	});
  	Object.defineProperty(exports, "composeWithDevToolsLogOnlyInProduction", {
  	  enumerable: true,
  	  get: function () {
  	    return _logOnlyInProduction.composeWithDevTools;
  	  }
  	});
  	exports.devToolsEnhancer = void 0;
  	Object.defineProperty(exports, "devToolsEnhancerDevelopmentOnly", {
  	  enumerable: true,
  	  get: function () {
  	    return _developmentOnly.devToolsEnhancer;
  	  }
  	});
  	Object.defineProperty(exports, "devToolsEnhancerLogOnly", {
  	  enumerable: true,
  	  get: function () {
  	    return _logOnly.devToolsEnhancer;
  	  }
  	});
  	Object.defineProperty(exports, "devToolsEnhancerLogOnlyInProduction", {
  	  enumerable: true,
  	  get: function () {
  	    return _logOnlyInProduction.devToolsEnhancer;
  	  }
  	});
  	var _redux = require$$0__default.default;
  	var _developmentOnly = developmentOnly;
  	var _logOnly = logOnly;
  	var _logOnlyInProduction = logOnlyInProduction;
  	function extensionComposeStub() {
  	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
  	    funcs[_key] = arguments[_key];
  	  }
  	  if (funcs.length === 0) return undefined;
  	  if (typeof funcs[0] === 'object') return _redux.compose;
  	  return (0, _redux.compose)(...funcs);
  	}
  	const composeWithDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : extensionComposeStub;
  	exports.composeWithDevTools = composeWithDevTools;
  	const devToolsEnhancer = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {
  	  return function (noop) {
  	    return noop;
  	  };
  	};
  	exports.devToolsEnhancer = devToolsEnhancer; 
  } (cjs));

  const assetsReducer = (state = {}, action) => {
    switch (action.type) {
      case ASSETS_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const brandingReducer = (state = {}, action) => {
    switch (action.type) {
      case BRANDING_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const dashboardReducer = (state = {}, action) => {
    switch (action.type) {
      case DASHBOARD_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const drawerReducer = (state = {
    previousRoute: null
  }, action) => {
    switch (action.type) {
      case DRAWER_PREROUTE_SET:
        {
          return {
            ...state,
            ...action.data
          };
        }
      default:
        {
          return state;
        }
    }
  };

  const initialState = {
    isVisible: false
  };
  const filterDrawerReducer = (state = initialState, action) => {
    switch (action.type) {
      case OPEN_FILTER_DRAWER:
        {
          return {
            ...state,
            isVisible: action.isVisible
          };
        }
      case CLOSE_FILTER_DRAWER:
        {
          return {
            ...state,
            isVisible: action.isVisible
          };
        }
      default:
        {
          return state;
        }
    }
  };

  const defaultLocale = {
    language: 'en',
    translations: {}
  };
  const localesReducer = (state = defaultLocale, action) => {
    switch (action.type) {
      case LOCALE_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const modalReducer = (state = {
    show: false
  }, action) => {
    switch (action.type) {
      case SHOW_MODAL:
        {
          return {
            ...action.data,
            show: true
          };
        }
      case HIDE_MODAL:
        {
          return {
            show: false
          };
        }
      default:
        return state;
    }
  };

  const noticesReducer = (state = [], action) => {
    switch (action.type) {
      case ADD_NOTICE:
        {
          return [...state, action.data];
        }
      case DROP_NOTICE:
        {
          return state.filter(notice => notice.id !== action.data.noticeId);
        }
      case SET_NOTICE_PROGRESS:
        {
          return state.map(notice => ({
            ...notice,
            progress: notice.id === action.data.noticeId ? action.data.progress : notice.progress
          }));
        }
      default:
        return state;
    }
  };

  const pagesReducer = (state = [], action) => {
    switch (action.type) {
      case PAGES_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const pathsReducer = (state = DEFAULT_PATHS, action) => {
    switch (action.type) {
      case PATHS_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const resourcesReducer = (state = [], action) => {
    switch (action.type) {
      case RESOURCES_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const routerReducer = (state = {
    from: {},
    to: {}
  }, action) => {
    switch (action.type) {
      case INITIAL_ROUTE:
        return {
          ...state,
          from: {
            ...action.data
          }
        };
      case ROUTE_CHANGED:
        return {
          from: {
            ...state.to
          },
          to: {
            ...action.data
          }
        };
      default:
        return state;
    }
  };

  const sessionReducer = (state = null, action) => {
    switch (action.type) {
      case SESSION_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const themeReducer = (state = null, action) => {
    switch (action.type) {
      case THEME_INITIALIZE:
        return action.data;
      default:
        return state;
    }
  };

  const versionsReducer = (state = {}, action) => {
    switch (action.type) {
      case VERSIONS_INITIALIZE:
        return {
          admin: action.data.admin,
          app: action.data.app
        };
      default:
        return state;
    }
  };

  // Note: We are using legacy "createStore"
  const reducer = require$$0$1.combineReducers({
    assets: assetsReducer,
    branding: brandingReducer,
    dashboard: dashboardReducer,
    drawer: drawerReducer,
    filterDrawer: filterDrawerReducer,
    locale: localesReducer,
    modal: modalReducer,
    notices: noticesReducer,
    pages: pagesReducer,
    paths: pathsReducer,
    resources: resourcesReducer,
    router: routerReducer,
    session: sessionReducer,
    theme: themeReducer,
    versions: versionsReducer
  });
  var createStore = ((initialState = {}) => require$$0$1.legacy_createStore(reducer, initialState, cjs.composeWithDevToolsDevelopmentOnly()));

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var consoleLogger = {
    type: 'logger',
    log: function log(args) {
      this.output('log', args);
    },
    warn: function warn(args) {
      this.output('warn', args);
    },
    error: function error(args) {
      this.output('error', args);
    },
    output: function output(type, args) {
      if (console && console[type]) console[type].apply(console, args);
    }
  };
  var Logger = function () {
    function Logger(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck$1(this, Logger);
      this.init(concreteLogger, options);
    }
    _createClass$1(Logger, [{
      key: "init",
      value: function init(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.prefix = options.prefix || 'i18next:';
        this.logger = concreteLogger || consoleLogger;
        this.options = options;
        this.debug = options.debug;
      }
    }, {
      key: "setDebug",
      value: function setDebug(bool) {
        this.debug = bool;
      }
    }, {
      key: "log",
      value: function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.forward(args, 'log', '', true);
      }
    }, {
      key: "warn",
      value: function warn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.forward(args, 'warn', '', true);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.forward(args, 'error', '');
      }
    }, {
      key: "deprecate",
      value: function deprecate() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
      }
    }, {
      key: "forward",
      value: function forward(args, lvl, prefix, debugOnly) {
        if (debugOnly && !this.debug) return null;
        if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
        return this.logger[lvl](args);
      }
    }, {
      key: "create",
      value: function create(moduleName) {
        return new Logger(this.logger, _objectSpread$6(_objectSpread$6({}, {
          prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
        }), this.options));
      }
    }, {
      key: "clone",
      value: function clone(options) {
        options = options || this.options;
        options.prefix = options.prefix || this.prefix;
        return new Logger(this.logger, options);
      }
    }]);
    return Logger;
  }();
  var baseLogger = new Logger();

  var EventEmitter = function () {
    function EventEmitter() {
      _classCallCheck$1(this, EventEmitter);
      this.observers = {};
    }
    _createClass$1(EventEmitter, [{
      key: "on",
      value: function on(events, listener) {
        var _this = this;
        events.split(' ').forEach(function (event) {
          _this.observers[event] = _this.observers[event] || [];
          _this.observers[event].push(listener);
        });
        return this;
      }
    }, {
      key: "off",
      value: function off(event, listener) {
        if (!this.observers[event]) return;
        if (!listener) {
          delete this.observers[event];
          return;
        }
        this.observers[event] = this.observers[event].filter(function (l) {
          return l !== listener;
        });
      }
    }, {
      key: "emit",
      value: function emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (this.observers[event]) {
          var cloned = [].concat(this.observers[event]);
          cloned.forEach(function (observer) {
            observer.apply(void 0, args);
          });
        }
        if (this.observers['*']) {
          var _cloned = [].concat(this.observers['*']);
          _cloned.forEach(function (observer) {
            observer.apply(observer, [event].concat(args));
          });
        }
      }
    }]);
    return EventEmitter;
  }();

  function defer() {
    var res;
    var rej;
    var promise = new Promise(function (resolve, reject) {
      res = resolve;
      rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
  }
  function makeString(object) {
    if (object == null) return '';
    return '' + object;
  }
  function copy(a, s, t) {
    a.forEach(function (m) {
      if (s[m]) t[m] = s[m];
    });
  }
  function getLastOfPath(object, path, Empty) {
    function cleanKey(key) {
      return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
    }
    function canNotTraverseDeeper() {
      return !object || typeof object === 'string';
    }
    var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
    while (stack.length > 1) {
      if (canNotTraverseDeeper()) return {};
      var key = cleanKey(stack.shift());
      if (!object[key] && Empty) object[key] = new Empty();
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        object = object[key];
      } else {
        object = {};
      }
    }
    if (canNotTraverseDeeper()) return {};
    return {
      obj: object,
      k: cleanKey(stack.shift())
    };
  }
  function setPath(object, path, newValue) {
    var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;
    obj[k] = newValue;
  }
  function pushPath(object, path, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;
    obj[k] = obj[k] || [];
    if (concat) obj[k] = obj[k].concat(newValue);
    if (!concat) obj[k].push(newValue);
  }
  function getPath(object, path) {
    var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;
    if (!obj) return undefined;
    return obj[k];
  }
  function getPathWithDefaults(data, defaultData, key) {
    var value = getPath(data, key);
    if (value !== undefined) {
      return value;
    }
    return getPath(defaultData, key);
  }
  function deepExtend(target, source, overwrite) {
    for (var prop in source) {
      if (prop !== '__proto__' && prop !== 'constructor') {
        if (prop in target) {
          if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
            if (overwrite) target[prop] = source[prop];
          } else {
            deepExtend(target[prop], source[prop], overwrite);
          }
        } else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  }
  function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  }
  var _entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;'
  };
  function escape$1(data) {
    if (typeof data === 'string') {
      return data.replace(/[&<>"'\/]/g, function (s) {
        return _entityMap[s];
      });
    }
    return data;
  }
  var isIE10 = typeof window !== 'undefined' && window.navigator && typeof window.navigator.userAgentData === 'undefined' && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
  var chars = [' ', ',', '?', '!', ';'];
  function looksLikeObjectPath(key, nsSeparator, keySeparator) {
    nsSeparator = nsSeparator || '';
    keySeparator = keySeparator || '';
    var possibleChars = chars.filter(function (c) {
      return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
    });
    if (possibleChars.length === 0) return true;
    var r = new RegExp("(".concat(possibleChars.map(function (c) {
      return c === '?' ? '\\?' : c;
    }).join('|'), ")"));
    var matched = !r.test(key);
    if (!matched) {
      var ki = key.indexOf(keySeparator);
      if (ki > 0 && !r.test(key.substring(0, ki))) {
        matched = true;
      }
    }
    return matched;
  }
  function deepFind(obj, path) {
    var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
    if (!obj) return undefined;
    if (obj[path]) return obj[path];
    var paths = path.split(keySeparator);
    var current = obj;
    for (var i = 0; i < paths.length; ++i) {
      if (!current) return undefined;
      if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
        return undefined;
      }
      if (current[paths[i]] === undefined) {
        var j = 2;
        var p = paths.slice(i, i + j).join(keySeparator);
        var mix = current[p];
        while (mix === undefined && paths.length > i + j) {
          j++;
          p = paths.slice(i, i + j).join(keySeparator);
          mix = current[p];
        }
        if (mix === undefined) return undefined;
        if (mix === null) return null;
        if (path.endsWith(p)) {
          if (typeof mix === 'string') return mix;
          if (p && typeof mix[p] === 'string') return mix[p];
        }
        var joinedPath = paths.slice(i + j).join(keySeparator);
        if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
        return undefined;
      }
      current = current[paths[i]];
    }
    return current;
  }

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var ResourceStore = function (_EventEmitter) {
    _inherits(ResourceStore, _EventEmitter);
    var _super = _createSuper$3(ResourceStore);
    function ResourceStore(data) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        ns: ['translation'],
        defaultNS: 'translation'
      };
      _classCallCheck$1(this, ResourceStore);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.data = data || {};
      _this.options = options;
      if (_this.options.keySeparator === undefined) {
        _this.options.keySeparator = '.';
      }
      if (_this.options.ignoreJSONStructure === undefined) {
        _this.options.ignoreJSONStructure = true;
      }
      return _this;
    }
    _createClass$1(ResourceStore, [{
      key: "addNamespaces",
      value: function addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
    }, {
      key: "removeNamespaces",
      value: function removeNamespaces(ns) {
        var index = this.options.ns.indexOf(ns);
        if (index > -1) {
          this.options.ns.splice(index, 1);
        }
      }
    }, {
      key: "getResource",
      value: function getResource(lng, ns, key) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
        var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
        var path = [lng, ns];
        if (key && typeof key !== 'string') path = path.concat(key);
        if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf('.') > -1) {
          path = lng.split('.');
        }
        var result = getPath(this.data, path);
        if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
        return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
      }
    }, {
      key: "addResource",
      value: function addResource(lng, ns, key, value) {
        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
          silent: false
        };
        var keySeparator = this.options.keySeparator;
        if (keySeparator === undefined) keySeparator = '.';
        var path = [lng, ns];
        if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf('.') > -1) {
          path = lng.split('.');
          value = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path, value);
        if (!options.silent) this.emit('added', lng, ns, key, value);
      }
    }, {
      key: "addResources",
      value: function addResources(lng, ns, resources) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
          silent: false
        };
        for (var m in resources) {
          if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
            silent: true
          });
        }
        if (!options.silent) this.emit('added', lng, ns, resources);
      }
    }, {
      key: "addResourceBundle",
      value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
          silent: false
        };
        var path = [lng, ns];
        if (lng.indexOf('.') > -1) {
          path = lng.split('.');
          deep = resources;
          resources = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        var pack = getPath(this.data, path) || {};
        if (deep) {
          deepExtend(pack, resources, overwrite);
        } else {
          pack = _objectSpread$5(_objectSpread$5({}, pack), resources);
        }
        setPath(this.data, path, pack);
        if (!options.silent) this.emit('added', lng, ns, resources);
      }
    }, {
      key: "removeResourceBundle",
      value: function removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit('removed', lng, ns);
      }
    }, {
      key: "hasResourceBundle",
      value: function hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== undefined;
      }
    }, {
      key: "getResourceBundle",
      value: function getResourceBundle(lng, ns) {
        if (!ns) ns = this.options.defaultNS;
        if (this.options.compatibilityAPI === 'v1') return _objectSpread$5(_objectSpread$5({}, {}), this.getResource(lng, ns));
        return this.getResource(lng, ns);
      }
    }, {
      key: "getDataByLanguage",
      value: function getDataByLanguage(lng) {
        return this.data[lng];
      }
    }, {
      key: "hasLanguageSomeTranslations",
      value: function hasLanguageSomeTranslations(lng) {
        var data = this.getDataByLanguage(lng);
        var n = data && Object.keys(data) || [];
        return !!n.find(function (v) {
          return data[v] && Object.keys(data[v]).length > 0;
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.data;
      }
    }]);
    return ResourceStore;
  }(EventEmitter);

  var postProcessor = {
    processors: {},
    addPostProcessor: function addPostProcessor(module) {
      this.processors[module.name] = module;
    },
    handle: function handle(processors, value, key, options, translator) {
      var _this = this;
      processors.forEach(function (processor) {
        if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
      });
      return value;
    }
  };

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var checkedLoadedFor = {};
  var Translator = function (_EventEmitter) {
    _inherits(Translator, _EventEmitter);
    var _super = _createSuper$2(Translator);
    function Translator(services) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck$1(this, Translator);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
      _this.options = options;
      if (_this.options.keySeparator === undefined) {
        _this.options.keySeparator = '.';
      }
      _this.logger = baseLogger.create('translator');
      return _this;
    }
    _createClass$1(Translator, [{
      key: "changeLanguage",
      value: function changeLanguage(lng) {
        if (lng) this.language = lng;
      }
    }, {
      key: "exists",
      value: function exists(key) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          interpolation: {}
        };
        if (key === undefined || key === null) {
          return false;
        }
        var resolved = this.resolve(key, options);
        return resolved && resolved.res !== undefined;
      }
    }, {
      key: "extractFromKey",
      value: function extractFromKey(key, options) {
        var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === undefined) nsSeparator = ':';
        var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
        var namespaces = options.ns || this.options.defaultNS || [];
        var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
        var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
          var m = key.match(this.interpolator.nestingRegexp);
          if (m && m.length > 0) {
            return {
              key: key,
              namespaces: namespaces
            };
          }
          var parts = key.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
          key = parts.join(keySeparator);
        }
        if (typeof namespaces === 'string') namespaces = [namespaces];
        return {
          key: key,
          namespaces: namespaces
        };
      }
    }, {
      key: "translate",
      value: function translate(keys, options, lastKey) {
        var _this2 = this;
        if (_typeof$3(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
          options = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (!options) options = {};
        if (keys === undefined || keys === null) return '';
        if (!Array.isArray(keys)) keys = [String(keys)];
        var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
        var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
        var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
          key = _this$extractFromKey.key,
          namespaces = _this$extractFromKey.namespaces;
        var namespace = namespaces[namespaces.length - 1];
        var lng = options.lng || this.language;
        var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng && lng.toLowerCase() === 'cimode') {
          if (appendNamespaceToCIMode) {
            var nsSeparator = options.nsSeparator || this.options.nsSeparator;
            if (returnDetails) {
              return {
                res: "".concat(namespace).concat(nsSeparator).concat(key),
                usedKey: key,
                exactUsedKey: key,
                usedLng: lng,
                usedNS: namespace
              };
            }
            return "".concat(namespace).concat(nsSeparator).concat(key);
          }
          if (returnDetails) {
            return {
              res: key,
              usedKey: key,
              exactUsedKey: key,
              usedLng: lng,
              usedNS: namespace
            };
          }
          return key;
        }
        var resolved = this.resolve(keys, options);
        var res = resolved && resolved.res;
        var resUsedKey = resolved && resolved.usedKey || key;
        var resExactUsedKey = resolved && resolved.exactUsedKey || key;
        var resType = Object.prototype.toString.apply(res);
        var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
        var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
        var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
          if (!options.returnObjects && !this.options.returnObjects) {
            if (!this.options.returnedObjectHandler) {
              this.logger.warn('accessing an object - but returnObjects options is not enabled!');
            }
            var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$4(_objectSpread$4({}, options), {}, {
              ns: namespaces
            })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
            if (returnDetails) {
              resolved.res = r;
              return resolved;
            }
            return r;
          }
          if (keySeparator) {
            var resTypeIsArray = resType === '[object Array]';
            var copy = resTypeIsArray ? [] : {};
            var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (var m in res) {
              if (Object.prototype.hasOwnProperty.call(res, m)) {
                var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                copy[m] = this.translate(deepKey, _objectSpread$4(_objectSpread$4({}, options), {
                  joinArrays: false,
                  ns: namespaces
                }));
                if (copy[m] === deepKey) copy[m] = res[m];
              }
            }
            res = copy;
          }
        } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
          res = res.join(joinArrays);
          if (res) res = this.extendTranslation(res, keys, options, lastKey);
        } else {
          var usedDefault = false;
          var usedKey = false;
          var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
          var hasDefaultValue = Translator.hasDefaultValue(options);
          var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
          var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
          if (!this.isValidLookup(res) && hasDefaultValue) {
            usedDefault = true;
            res = defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }
          var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
          var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
          var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
            if (keySeparator) {
              var fk = this.resolve(key, _objectSpread$4(_objectSpread$4({}, options), {}, {
                keySeparator: false
              }));
              if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
            }
            var lngs = [];
            var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
              for (var i = 0; i < fallbackLngs.length; i++) {
                lngs.push(fallbackLngs[i]);
              }
            } else if (this.options.saveMissingTo === 'all') {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              lngs.push(options.lng || this.language);
            }
            var send = function send(l, k, specificDefaultValue) {
              var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
              if (_this2.options.missingKeyHandler) {
                _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
              } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
              }
              _this2.emit('missingKey', l, namespace, k, res);
            };
            if (this.options.saveMissing) {
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach(function (language) {
                  _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                    send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                  });
                });
              } else {
                send(lngs, key, defaultValue);
              }
            }
          }
          res = this.extendTranslation(res, keys, options, resolved, lastKey);
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
          if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
            if (this.options.compatibilityAPI !== 'v1') {
              res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : undefined);
            } else {
              res = this.options.parseMissingKeyHandler(res);
            }
          }
        }
        if (returnDetails) {
          resolved.res = res;
          return resolved;
        }
        return res;
      }
    }, {
      key: "extendTranslation",
      value: function extendTranslation(res, key, options, resolved, lastKey) {
        var _this3 = this;
        if (this.i18nFormat && this.i18nFormat.parse) {
          res = this.i18nFormat.parse(res, _objectSpread$4(_objectSpread$4({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
            resolved: resolved
          });
        } else if (!options.skipInterpolation) {
          if (options.interpolation) this.interpolator.init(_objectSpread$4(_objectSpread$4({}, options), {
            interpolation: _objectSpread$4(_objectSpread$4({}, this.options.interpolation), options.interpolation)
          }));
          var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
          var nestBef;
          if (skipOnVariables) {
            var nb = res.match(this.interpolator.nestingRegexp);
            nestBef = nb && nb.length;
          }
          var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
          if (this.options.interpolation.defaultVariables) data = _objectSpread$4(_objectSpread$4({}, this.options.interpolation.defaultVariables), data);
          res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
          if (skipOnVariables) {
            var na = res.match(this.interpolator.nestingRegexp);
            var nestAft = na && na.length;
            if (nestBef < nestAft) options.nest = false;
          }
          if (options.nest !== false) res = this.interpolator.nest(res, function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (lastKey && lastKey[0] === args[0] && !options.context) {
              _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
              return null;
            }
            return _this3.translate.apply(_this3, args.concat([key]));
          }, options);
          if (options.interpolation) this.interpolator.reset();
        }
        var postProcess = options.postProcess || this.options.postProcess;
        var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
        if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$4({
            i18nResolved: resolved
          }, options) : options, this);
        }
        return res;
      }
    }, {
      key: "resolve",
      value: function resolve(keys) {
        var _this4 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var found;
        var usedKey;
        var exactUsedKey;
        var usedLng;
        var usedNS;
        if (typeof keys === 'string') keys = [keys];
        keys.forEach(function (k) {
          if (_this4.isValidLookup(found)) return;
          var extracted = _this4.extractFromKey(k, options);
          var key = extracted.key;
          usedKey = key;
          var namespaces = extracted.namespaces;
          if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
          var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
          var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
          var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
          var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
          namespaces.forEach(function (ns) {
            if (_this4.isValidLookup(found)) return;
            usedNS = ns;
            if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
              _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
            }
            codes.forEach(function (code) {
              if (_this4.isValidLookup(found)) return;
              usedLng = code;
              var finalKeys = [key];
              if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
              } else {
                var pluralSuffix;
                if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
                if (needsPluralHandling) {
                  finalKeys.push(key + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(key + zeroSuffix);
                  }
                }
                if (needsContextHandling) {
                  var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                  finalKeys.push(contextKey);
                  if (needsPluralHandling) {
                    finalKeys.push(contextKey + pluralSuffix);
                    if (needsZeroSuffixLookup) {
                      finalKeys.push(contextKey + zeroSuffix);
                    }
                  }
                }
              }
              var possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!_this4.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = _this4.getResource(code, ns, possibleKey, options);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey: usedKey,
          exactUsedKey: exactUsedKey,
          usedLng: usedLng,
          usedNS: usedNS
        };
      }
    }, {
      key: "isValidLookup",
      value: function isValidLookup(res) {
        return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
      }
    }, {
      key: "getResource",
      value: function getResource(code, ns, key) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
        return this.resourceStore.getResource(code, ns, key, options);
      }
    }], [{
      key: "hasDefaultValue",
      value: function hasDefaultValue(options) {
        var prefix = 'defaultValue';
        for (var option in options) {
          if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
            return true;
          }
        }
        return false;
      }
    }]);
    return Translator;
  }(EventEmitter);

  function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  var LanguageUtil = function () {
    function LanguageUtil(options) {
      _classCallCheck$1(this, LanguageUtil);
      this.options = options;
      this.supportedLngs = this.options.supportedLngs || false;
      this.logger = baseLogger.create('languageUtils');
    }
    _createClass$1(LanguageUtil, [{
      key: "getScriptPartFromCode",
      value: function getScriptPartFromCode(code) {
        if (!code || code.indexOf('-') < 0) return null;
        var p = code.split('-');
        if (p.length === 2) return null;
        p.pop();
        if (p[p.length - 1].toLowerCase() === 'x') return null;
        return this.formatLanguageCode(p.join('-'));
      }
    }, {
      key: "getLanguagePartFromCode",
      value: function getLanguagePartFromCode(code) {
        if (!code || code.indexOf('-') < 0) return code;
        var p = code.split('-');
        return this.formatLanguageCode(p[0]);
      }
    }, {
      key: "formatLanguageCode",
      value: function formatLanguageCode(code) {
        if (typeof code === 'string' && code.indexOf('-') > -1) {
          var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
          var p = code.split('-');
          if (this.options.lowerCaseLng) {
            p = p.map(function (part) {
              return part.toLowerCase();
            });
          } else if (p.length === 2) {
            p[0] = p[0].toLowerCase();
            p[1] = p[1].toUpperCase();
            if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          } else if (p.length === 3) {
            p[0] = p[0].toLowerCase();
            if (p[1].length === 2) p[1] = p[1].toUpperCase();
            if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
            if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
            if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
          }
          return p.join('-');
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
      }
    }, {
      key: "isSupportedCode",
      value: function isSupportedCode(code) {
        if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
          code = this.getLanguagePartFromCode(code);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
      }
    }, {
      key: "getBestMatchFromCodes",
      value: function getBestMatchFromCodes(codes) {
        var _this = this;
        if (!codes) return null;
        var found;
        codes.forEach(function (code) {
          if (found) return;
          var cleanedLng = _this.formatLanguageCode(code);
          if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach(function (code) {
            if (found) return;
            var lngOnly = _this.getLanguagePartFromCode(code);
            if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
            found = _this.options.supportedLngs.find(function (supportedLng) {
              if (supportedLng === lngOnly) return supportedLng;
              if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
              if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
            });
          });
        }
        if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
    }, {
      key: "getFallbackCodes",
      value: function getFallbackCodes(fallbacks, code) {
        if (!fallbacks) return [];
        if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
        if (typeof fallbacks === 'string') fallbacks = [fallbacks];
        if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
        if (!code) return fallbacks["default"] || [];
        var found = fallbacks[code];
        if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
        if (!found) found = fallbacks[this.formatLanguageCode(code)];
        if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
        if (!found) found = fallbacks["default"];
        return found || [];
      }
    }, {
      key: "toResolveHierarchy",
      value: function toResolveHierarchy(code, fallbackCode) {
        var _this2 = this;
        var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
        var codes = [];
        var addCode = function addCode(c) {
          if (!c) return;
          if (_this2.isSupportedCode(c)) {
            codes.push(c);
          } else {
            _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
          }
        };
        if (typeof code === 'string' && code.indexOf('-') > -1) {
          if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
          if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
          if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
        } else if (typeof code === 'string') {
          addCode(this.formatLanguageCode(code));
        }
        fallbackCodes.forEach(function (fc) {
          if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
        });
        return codes;
      }
    }]);
    return LanguageUtil;
  }();

  var sets = [{
    lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
    nr: [1, 2],
    fc: 1
  }, {
    lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
    nr: [1, 2],
    fc: 2
  }, {
    lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
    nr: [1],
    fc: 3
  }, {
    lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
    nr: [1, 2, 5],
    fc: 4
  }, {
    lngs: ['ar'],
    nr: [0, 1, 2, 3, 11, 100],
    fc: 5
  }, {
    lngs: ['cs', 'sk'],
    nr: [1, 2, 5],
    fc: 6
  }, {
    lngs: ['csb', 'pl'],
    nr: [1, 2, 5],
    fc: 7
  }, {
    lngs: ['cy'],
    nr: [1, 2, 3, 8],
    fc: 8
  }, {
    lngs: ['fr'],
    nr: [1, 2],
    fc: 9
  }, {
    lngs: ['ga'],
    nr: [1, 2, 3, 7, 11],
    fc: 10
  }, {
    lngs: ['gd'],
    nr: [1, 2, 3, 20],
    fc: 11
  }, {
    lngs: ['is'],
    nr: [1, 2],
    fc: 12
  }, {
    lngs: ['jv'],
    nr: [0, 1],
    fc: 13
  }, {
    lngs: ['kw'],
    nr: [1, 2, 3, 4],
    fc: 14
  }, {
    lngs: ['lt'],
    nr: [1, 2, 10],
    fc: 15
  }, {
    lngs: ['lv'],
    nr: [1, 2, 0],
    fc: 16
  }, {
    lngs: ['mk'],
    nr: [1, 2],
    fc: 17
  }, {
    lngs: ['mnk'],
    nr: [0, 1, 2],
    fc: 18
  }, {
    lngs: ['mt'],
    nr: [1, 2, 11, 20],
    fc: 19
  }, {
    lngs: ['or'],
    nr: [2, 1],
    fc: 2
  }, {
    lngs: ['ro'],
    nr: [1, 2, 20],
    fc: 20
  }, {
    lngs: ['sl'],
    nr: [5, 1, 2, 3],
    fc: 21
  }, {
    lngs: ['he', 'iw'],
    nr: [1, 2, 20, 21],
    fc: 22
  }];
  var _rulesPluralsTypes = {
    1: function _(n) {
      return Number(n > 1);
    },
    2: function _(n) {
      return Number(n != 1);
    },
    3: function _(n) {
      return 0;
    },
    4: function _(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    5: function _(n) {
      return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
    },
    6: function _(n) {
      return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
    },
    7: function _(n) {
      return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    8: function _(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
    },
    9: function _(n) {
      return Number(n >= 2);
    },
    10: function _(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
    },
    11: function _(n) {
      return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
    },
    12: function _(n) {
      return Number(n % 10 != 1 || n % 100 == 11);
    },
    13: function _(n) {
      return Number(n !== 0);
    },
    14: function _(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
    },
    15: function _(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    16: function _(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
    },
    17: function _(n) {
      return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
    },
    18: function _(n) {
      return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
    },
    19: function _(n) {
      return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
    },
    20: function _(n) {
      return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
    },
    21: function _(n) {
      return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
    },
    22: function _(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
    }
  };
  var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
  var suffixesOrder = {
    zero: 0,
    one: 1,
    two: 2,
    few: 3,
    many: 4,
    other: 5
  };
  function createRules() {
    var rules = {};
    sets.forEach(function (set) {
      set.lngs.forEach(function (l) {
        rules[l] = {
          numbers: set.nr,
          plurals: _rulesPluralsTypes[set.fc]
        };
      });
    });
    return rules;
  }
  var PluralResolver = function () {
    function PluralResolver(languageUtils) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck$1(this, PluralResolver);
      this.languageUtils = languageUtils;
      this.options = options;
      this.logger = baseLogger.create('pluralResolver');
      if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
        this.options.compatibilityJSON = 'v3';
        this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
      }
      this.rules = createRules();
    }
    _createClass$1(PluralResolver, [{
      key: "addRule",
      value: function addRule(lng, obj) {
        this.rules[lng] = obj;
      }
    }, {
      key: "getRule",
      value: function getRule(code) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (this.shouldUseIntlApi()) {
          try {
            return new Intl.PluralRules(code, {
              type: options.ordinal ? 'ordinal' : 'cardinal'
            });
          } catch (_unused) {
            return;
          }
        }
        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
      }
    }, {
      key: "needsPlural",
      value: function needsPlural(code) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rule = this.getRule(code, options);
        if (this.shouldUseIntlApi()) {
          return rule && rule.resolvedOptions().pluralCategories.length > 1;
        }
        return rule && rule.numbers.length > 1;
      }
    }, {
      key: "getPluralFormsOfKey",
      value: function getPluralFormsOfKey(code, key) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this.getSuffixes(code, options).map(function (suffix) {
          return "".concat(key).concat(suffix);
        });
      }
    }, {
      key: "getSuffixes",
      value: function getSuffixes(code) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rule = this.getRule(code, options);
        if (!rule) {
          return [];
        }
        if (this.shouldUseIntlApi()) {
          return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
            return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
          }).map(function (pluralCategory) {
            return "".concat(_this.options.prepend).concat(pluralCategory);
          });
        }
        return rule.numbers.map(function (number) {
          return _this.getSuffix(code, number, options);
        });
      }
    }, {
      key: "getSuffix",
      value: function getSuffix(code, count) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var rule = this.getRule(code, options);
        if (rule) {
          if (this.shouldUseIntlApi()) {
            return "".concat(this.options.prepend).concat(rule.select(count));
          }
          return this.getSuffixRetroCompatible(rule, count);
        }
        this.logger.warn("no plural rule found for: ".concat(code));
        return '';
      }
    }, {
      key: "getSuffixRetroCompatible",
      value: function getSuffixRetroCompatible(rule, count) {
        var _this2 = this;
        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        var suffix = rule.numbers[idx];
        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = 'plural';
          } else if (suffix === 1) {
            suffix = '';
          }
        }
        var returnSuffix = function returnSuffix() {
          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
        };
        if (this.options.compatibilityJSON === 'v1') {
          if (suffix === 1) return '';
          if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
          return returnSuffix();
        } else if (this.options.compatibilityJSON === 'v2') {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          return returnSuffix();
        }
        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }
    }, {
      key: "shouldUseIntlApi",
      value: function shouldUseIntlApi() {
        return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
      }
    }]);
    return PluralResolver;
  }();

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function deepFindWithDefaults(data, defaultData, key) {
    var keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
    var ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var path = getPathWithDefaults(data, defaultData, key);
    if (!path && ignoreJSONStructure && typeof key === 'string') {
      path = deepFind(data, key, keySeparator);
      if (path === undefined) path = deepFind(defaultData, key, keySeparator);
    }
    return path;
  }
  var Interpolator = function () {
    function Interpolator() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck$1(this, Interpolator);
      this.logger = baseLogger.create('interpolator');
      this.options = options;
      this.format = options.interpolation && options.interpolation.format || function (value) {
        return value;
      };
      this.init(options);
    }
    _createClass$1(Interpolator, [{
      key: "init",
      value: function init() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!options.interpolation) options.interpolation = {
          escapeValue: true
        };
        var iOpts = options.interpolation;
        this.escape = iOpts.escape !== undefined ? iOpts.escape : escape$1;
        this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
        this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
        this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
        this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
        this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
        this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
        this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
        this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
        this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
        this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
        this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
        this.resetRegExp();
      }
    }, {
      key: "reset",
      value: function reset() {
        if (this.options) this.init(this.options);
      }
    }, {
      key: "resetRegExp",
      value: function resetRegExp() {
        var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
        this.regexp = new RegExp(regexpStr, 'g');
        var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
        this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
        var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
        this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
      }
    }, {
      key: "interpolate",
      value: function interpolate(str, data, lng, options) {
        var _this = this;
        var match;
        var value;
        var replaces;
        var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        function regexSafe(val) {
          return val.replace(/\$/g, '$$$$');
        }
        var handleFormat = function handleFormat(key) {
          if (key.indexOf(_this.formatSeparator) < 0) {
            var path = deepFindWithDefaults(data, defaultData, key, _this.options.keySeparator, _this.options.ignoreJSONStructure);
            return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
              interpolationkey: key
            })) : path;
          }
          var p = key.split(_this.formatSeparator);
          var k = p.shift().trim();
          var f = p.join(_this.formatSeparator).trim();
          return _this.format(deepFindWithDefaults(data, defaultData, k, _this.options.keySeparator, _this.options.ignoreJSONStructure), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
            interpolationkey: k
          }));
        };
        this.resetRegExp();
        var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
        var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        var todos = [{
          regex: this.regexpUnescape,
          safeValue: function safeValue(val) {
            return regexSafe(val);
          }
        }, {
          regex: this.regexp,
          safeValue: function safeValue(val) {
            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
          }
        }];
        todos.forEach(function (todo) {
          replaces = 0;
          while (match = todo.regex.exec(str)) {
            var matchedVar = match[1].trim();
            value = handleFormat(matchedVar);
            if (value === undefined) {
              if (typeof missingInterpolationHandler === 'function') {
                var temp = missingInterpolationHandler(str, match, options);
                value = typeof temp === 'string' ? temp : '';
              } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
                value = '';
              } else if (skipOnVariables) {
                value = match[0];
                continue;
              } else {
                _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
                value = '';
              }
            } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
              value = makeString(value);
            }
            var safeValue = todo.safeValue(value);
            str = str.replace(match[0], safeValue);
            if (skipOnVariables) {
              todo.regex.lastIndex += value.length;
              todo.regex.lastIndex -= match[0].length;
            } else {
              todo.regex.lastIndex = 0;
            }
            replaces++;
            if (replaces >= _this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
    }, {
      key: "nest",
      value: function nest(str, fc) {
        var _this2 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var match;
        var value;
        var clonedOptions;
        function handleHasOptions(key, inheritedOptions) {
          var sep = this.nestingOptionsSeparator;
          if (key.indexOf(sep) < 0) return key;
          var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
          var optionsString = "{".concat(c[1]);
          key = c[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          var matchedSingleQuotes = optionsString.match(/'/g);
          var matchedDoubleQuotes = optionsString.match(/"/g);
          if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
            optionsString = optionsString.replace(/'/g, '"');
          }
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
          } catch (e) {
            this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
            return "".concat(key).concat(sep).concat(optionsString);
          }
          delete clonedOptions.defaultValue;
          return key;
        }
        while (match = this.nestingRegexp.exec(str)) {
          var formatters = [];
          clonedOptions = _objectSpread$3({}, options);
          clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== 'string' ? clonedOptions.replace : clonedOptions;
          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;
          var doReduce = false;
          if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
            var r = match[1].split(this.formatSeparator).map(function (elem) {
              return elem.trim();
            });
            match[1] = r.shift();
            formatters = r;
            doReduce = true;
          }
          value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
          if (value && match[0] === str && typeof value !== 'string') return value;
          if (typeof value !== 'string') value = makeString(value);
          if (!value) {
            this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
            value = '';
          }
          if (doReduce) {
            value = formatters.reduce(function (v, f) {
              return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                interpolationkey: match[1].trim()
              }));
            }, value.trim());
          }
          str = str.replace(match[0], value);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    }]);
    return Interpolator;
  }();

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function parseFormatStr(formatStr) {
    var formatName = formatStr.toLowerCase().trim();
    var formatOptions = {};
    if (formatStr.indexOf('(') > -1) {
      var p = formatStr.split('(');
      formatName = p[0].toLowerCase().trim();
      var optStr = p[1].substring(0, p[1].length - 1);
      if (formatName === 'currency' && optStr.indexOf(':') < 0) {
        if (!formatOptions.currency) formatOptions.currency = optStr.trim();
      } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
        if (!formatOptions.range) formatOptions.range = optStr.trim();
      } else {
        var opts = optStr.split(';');
        opts.forEach(function (opt) {
          if (!opt) return;
          var _opt$split = opt.split(':'),
            _opt$split2 = _toArray(_opt$split),
            key = _opt$split2[0],
            rest = _opt$split2.slice(1);
          var val = rest.join(':').trim().replace(/^'+|'+$/g, '');
          if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
          if (val === 'false') formatOptions[key.trim()] = false;
          if (val === 'true') formatOptions[key.trim()] = true;
          if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
        });
      }
    }
    return {
      formatName: formatName,
      formatOptions: formatOptions
    };
  }
  function createCachedFormatter(fn) {
    var cache = {};
    return function invokeFormatter(val, lng, options) {
      var key = lng + JSON.stringify(options);
      var formatter = cache[key];
      if (!formatter) {
        formatter = fn(lng, options);
        cache[key] = formatter;
      }
      return formatter(val);
    };
  }
  var Formatter = function () {
    function Formatter() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck$1(this, Formatter);
      this.logger = baseLogger.create('formatter');
      this.options = options;
      this.formats = {
        number: createCachedFormatter(function (lng, opt) {
          var formatter = new Intl.NumberFormat(lng, _objectSpread$2({}, opt));
          return function (val) {
            return formatter.format(val);
          };
        }),
        currency: createCachedFormatter(function (lng, opt) {
          var formatter = new Intl.NumberFormat(lng, _objectSpread$2(_objectSpread$2({}, opt), {}, {
            style: 'currency'
          }));
          return function (val) {
            return formatter.format(val);
          };
        }),
        datetime: createCachedFormatter(function (lng, opt) {
          var formatter = new Intl.DateTimeFormat(lng, _objectSpread$2({}, opt));
          return function (val) {
            return formatter.format(val);
          };
        }),
        relativetime: createCachedFormatter(function (lng, opt) {
          var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$2({}, opt));
          return function (val) {
            return formatter.format(val, opt.range || 'day');
          };
        }),
        list: createCachedFormatter(function (lng, opt) {
          var formatter = new Intl.ListFormat(lng, _objectSpread$2({}, opt));
          return function (val) {
            return formatter.format(val);
          };
        })
      };
      this.init(options);
    }
    _createClass$1(Formatter, [{
      key: "init",
      value: function init(services) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          interpolation: {}
        };
        var iOpts = options.interpolation;
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
      }
    }, {
      key: "add",
      value: function add(name, fc) {
        this.formats[name.toLowerCase().trim()] = fc;
      }
    }, {
      key: "addCached",
      value: function addCached(name, fc) {
        this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
      }
    }, {
      key: "format",
      value: function format(value, _format, lng) {
        var _this = this;
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var formats = _format.split(this.formatSeparator);
        var result = formats.reduce(function (mem, f) {
          var _parseFormatStr = parseFormatStr(f),
            formatName = _parseFormatStr.formatName,
            formatOptions = _parseFormatStr.formatOptions;
          if (_this.formats[formatName]) {
            var formatted = mem;
            try {
              var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
              var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
              formatted = _this.formats[formatName](mem, l, _objectSpread$2(_objectSpread$2(_objectSpread$2({}, formatOptions), options), valOptions));
            } catch (error) {
              _this.logger.warn(error);
            }
            return formatted;
          } else {
            _this.logger.warn("there was no format function for ".concat(formatName));
          }
          return mem;
        }, value);
        return result;
      }
    }]);
    return Formatter;
  }();

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function removePending(q, name) {
    if (q.pending[name] !== undefined) {
      delete q.pending[name];
      q.pendingCount--;
    }
  }
  var Connector = function (_EventEmitter) {
    _inherits(Connector, _EventEmitter);
    var _super = _createSuper$1(Connector);
    function Connector(backend, store, services) {
      var _this;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      _classCallCheck$1(this, Connector);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.backend = backend;
      _this.store = store;
      _this.services = services;
      _this.languageUtils = services.languageUtils;
      _this.options = options;
      _this.logger = baseLogger.create('backendConnector');
      _this.waitingReads = [];
      _this.maxParallelReads = options.maxParallelReads || 10;
      _this.readingCalls = 0;
      _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
      _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
      _this.state = {};
      _this.queue = [];
      if (_this.backend && _this.backend.init) {
        _this.backend.init(services, options.backend, options);
      }
      return _this;
    }
    _createClass$1(Connector, [{
      key: "queueLoad",
      value: function queueLoad(languages, namespaces, options, callback) {
        var _this2 = this;
        var toLoad = {};
        var pending = {};
        var toLoadLanguages = {};
        var toLoadNamespaces = {};
        languages.forEach(function (lng) {
          var hasAllNamespaces = true;
          namespaces.forEach(function (ns) {
            var name = "".concat(lng, "|").concat(ns);
            if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
              _this2.state[name] = 2;
            } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
              if (pending[name] === undefined) pending[name] = true;
            } else {
              _this2.state[name] = 1;
              hasAllNamespaces = false;
              if (pending[name] === undefined) pending[name] = true;
              if (toLoad[name] === undefined) toLoad[name] = true;
              if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
            }
          });
          if (!hasAllNamespaces) toLoadLanguages[lng] = true;
        });
        if (Object.keys(toLoad).length || Object.keys(pending).length) {
          this.queue.push({
            pending: pending,
            pendingCount: Object.keys(pending).length,
            loaded: {},
            errors: [],
            callback: callback
          });
        }
        return {
          toLoad: Object.keys(toLoad),
          pending: Object.keys(pending),
          toLoadLanguages: Object.keys(toLoadLanguages),
          toLoadNamespaces: Object.keys(toLoadNamespaces)
        };
      }
    }, {
      key: "loaded",
      value: function loaded(name, err, data) {
        var s = name.split('|');
        var lng = s[0];
        var ns = s[1];
        if (err) this.emit('failedLoading', lng, ns, err);
        if (data) {
          this.store.addResourceBundle(lng, ns, data);
        }
        this.state[name] = err ? -1 : 2;
        var loaded = {};
        this.queue.forEach(function (q) {
          pushPath(q.loaded, [lng], ns);
          removePending(q, name);
          if (err) q.errors.push(err);
          if (q.pendingCount === 0 && !q.done) {
            Object.keys(q.loaded).forEach(function (l) {
              if (!loaded[l]) loaded[l] = {};
              var loadedKeys = q.loaded[l];
              if (loadedKeys.length) {
                loadedKeys.forEach(function (n) {
                  if (loaded[l][n] === undefined) loaded[l][n] = true;
                });
              }
            });
            q.done = true;
            if (q.errors.length) {
              q.callback(q.errors);
            } else {
              q.callback();
            }
          }
        });
        this.emit('loaded', loaded);
        this.queue = this.queue.filter(function (q) {
          return !q.done;
        });
      }
    }, {
      key: "read",
      value: function read(lng, ns, fcName) {
        var _this3 = this;
        var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
        var callback = arguments.length > 5 ? arguments[5] : undefined;
        if (!lng.length) return callback(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
          this.waitingReads.push({
            lng: lng,
            ns: ns,
            fcName: fcName,
            tried: tried,
            wait: wait,
            callback: callback
          });
          return;
        }
        this.readingCalls++;
        var resolver = function resolver(err, data) {
          _this3.readingCalls--;
          if (_this3.waitingReads.length > 0) {
            var next = _this3.waitingReads.shift();
            _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
          }
          if (err && data && tried < _this3.maxRetries) {
            setTimeout(function () {
              _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
            }, wait);
            return;
          }
          callback(err, data);
        };
        var fc = this.backend[fcName].bind(this.backend);
        if (fc.length === 2) {
          try {
            var r = fc(lng, ns);
            if (r && typeof r.then === 'function') {
              r.then(function (data) {
                return resolver(null, data);
              })["catch"](resolver);
            } else {
              resolver(null, r);
            }
          } catch (err) {
            resolver(err);
          }
          return;
        }
        return fc(lng, ns, resolver);
      }
    }, {
      key: "prepareLoading",
      value: function prepareLoading(languages, namespaces) {
        var _this4 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments.length > 3 ? arguments[3] : undefined;
        if (!this.backend) {
          this.logger.warn('No backend was added via i18next.use. Will not load resources.');
          return callback && callback();
        }
        if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
        if (typeof namespaces === 'string') namespaces = [namespaces];
        var toLoad = this.queueLoad(languages, namespaces, options, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length) callback();
          return null;
        }
        toLoad.toLoad.forEach(function (name) {
          _this4.loadOne(name);
        });
      }
    }, {
      key: "load",
      value: function load(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
    }, {
      key: "reload",
      value: function reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
    }, {
      key: "loadOne",
      value: function loadOne(name) {
        var _this5 = this;
        var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var s = name.split('|');
        var lng = s[0];
        var ns = s[1];
        this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
          if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
          if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
          _this5.loaded(name, err, data);
        });
      }
    }, {
      key: "saveMissing",
      value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
        var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
          this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          return;
        }
        if (key === undefined || key === null || key === '') return;
        if (this.backend && this.backend.create) {
          var opts = _objectSpread$1(_objectSpread$1({}, options), {}, {
            isUpdate: isUpdate
          });
          var fc = this.backend.create.bind(this.backend);
          if (fc.length < 6) {
            try {
              var r;
              if (fc.length === 5) {
                r = fc(languages, namespace, key, fallbackValue, opts);
              } else {
                r = fc(languages, namespace, key, fallbackValue);
              }
              if (r && typeof r.then === 'function') {
                r.then(function (data) {
                  return clb(null, data);
                })["catch"](clb);
              } else {
                clb(null, r);
              }
            } catch (err) {
              clb(err);
            }
          } else {
            fc(languages, namespace, key, fallbackValue, clb, opts);
          }
        }
        if (!languages || !languages[0]) return;
        this.store.addResource(languages[0], namespace, key, fallbackValue);
      }
    }]);
    return Connector;
  }(EventEmitter);

  function get() {
    return {
      debug: false,
      initImmediate: true,
      ns: ['translation'],
      defaultNS: ['translation'],
      fallbackLng: ['dev'],
      fallbackNS: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: 'all',
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: '.',
      nsSeparator: ':',
      pluralSeparator: '_',
      contextSeparator: '_',
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: 'fallback',
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: true,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: function handle(args) {
        var ret = {};
        if (_typeof$3(args[1]) === 'object') ret = args[1];
        if (typeof args[1] === 'string') ret.defaultValue = args[1];
        if (typeof args[2] === 'string') ret.tDescription = args[2];
        if (_typeof$3(args[2]) === 'object' || _typeof$3(args[3]) === 'object') {
          var options = args[3] || args[2];
          Object.keys(options).forEach(function (key) {
            ret[key] = options[key];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: function format(value, _format, lng, options) {
          return value;
        },
        prefix: '{{',
        suffix: '}}',
        formatSeparator: ',',
        unescapePrefix: '-',
        nestingPrefix: '$t(',
        nestingSuffix: ')',
        nestingOptionsSeparator: ',',
        maxReplaces: 1000,
        skipOnVariables: true
      }
    };
  }
  function transformOptions(options) {
    if (typeof options.ns === 'string') options.ns = [options.ns];
    if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
    if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];
    if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
      options.supportedLngs = options.supportedLngs.concat(['cimode']);
    }
    return options;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function noop() {}
  function bindMemberFunctions(inst) {
    var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
    mems.forEach(function (mem) {
      if (typeof inst[mem] === 'function') {
        inst[mem] = inst[mem].bind(inst);
      }
    });
  }
  var I18n = function (_EventEmitter) {
    _inherits(I18n, _EventEmitter);
    var _super = _createSuper(I18n);
    function I18n() {
      var _this;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      _classCallCheck$1(this, I18n);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter.call(_assertThisInitialized(_this));
      }
      _this.options = transformOptions(options);
      _this.services = {};
      _this.logger = baseLogger;
      _this.modules = {
        external: []
      };
      bindMemberFunctions(_assertThisInitialized(_this));
      if (callback && !_this.isInitialized && !options.isClone) {
        if (!_this.options.initImmediate) {
          _this.init(options, callback);
          return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
        }
        setTimeout(function () {
          _this.init(options, callback);
        }, 0);
      }
      return _this;
    }
    _createClass$1(I18n, [{
      key: "init",
      value: function init() {
        var _this2 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : undefined;
        if (typeof options === 'function') {
          callback = options;
          options = {};
        }
        if (!options.defaultNS && options.defaultNS !== false && options.ns) {
          if (typeof options.ns === 'string') {
            options.defaultNS = options.ns;
          } else if (options.ns.indexOf('translation') < 0) {
            options.defaultNS = options.ns[0];
          }
        }
        var defOpts = get();
        this.options = _objectSpread(_objectSpread(_objectSpread({}, defOpts), this.options), transformOptions(options));
        if (this.options.compatibilityAPI !== 'v1') {
          this.options.interpolation = _objectSpread(_objectSpread({}, defOpts.interpolation), this.options.interpolation);
        }
        if (options.keySeparator !== undefined) {
          this.options.userDefinedKeySeparator = options.keySeparator;
        }
        if (options.nsSeparator !== undefined) {
          this.options.userDefinedNsSeparator = options.nsSeparator;
        }
        function createClassOnDemand(ClassOrObject) {
          if (!ClassOrObject) return null;
          if (typeof ClassOrObject === 'function') return new ClassOrObject();
          return ClassOrObject;
        }
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          var formatter;
          if (this.modules.formatter) {
            formatter = this.modules.formatter;
          } else if (typeof Intl !== 'undefined') {
            formatter = Formatter;
          }
          var lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          var s = this.services;
          s.logger = baseLogger;
          s.resourceStore = this.store;
          s.languageUtils = lu;
          s.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            compatibilityJSON: this.options.compatibilityJSON,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
            s.formatter = createClassOnDemand(formatter);
            s.formatter.init(s, this.options);
            this.options.interpolation.format = s.formatter.format.bind(s.formatter);
          }
          s.interpolator = new Interpolator(this.options);
          s.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
          s.backendConnector.on('*', function (event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          if (this.modules.languageDetector) {
            s.languageDetector = createClassOnDemand(this.modules.languageDetector);
            if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s.i18nFormat.init) s.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on('*', function (event) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          this.modules.external.forEach(function (m) {
            if (m.init) m.init(_this2);
          });
        }
        this.format = this.options.interpolation.format;
        if (!callback) callback = noop;
        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
          var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn('init: no languageDetector is used and no lng is defined');
        }
        var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
        storeApi.forEach(function (fcName) {
          _this2[fcName] = function () {
            var _this2$store;
            return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
          };
        });
        var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
        storeApiChained.forEach(function (fcName) {
          _this2[fcName] = function () {
            var _this2$store2;
            (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
            return _this2;
          };
        });
        var deferred = defer();
        var load = function load() {
          var finish = function finish(err, t) {
            if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
            _this2.isInitialized = true;
            if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);
            _this2.emit('initialized', _this2.options);
            deferred.resolve(t);
            callback(err, t);
          };
          if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
          _this2.changeLanguage(_this2.options.lng, finish);
        };
        if (this.options.resources || !this.options.initImmediate) {
          load();
        } else {
          setTimeout(load, 0);
        }
        return deferred;
      }
    }, {
      key: "loadResources",
      value: function loadResources(language) {
        var _this3 = this;
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
        var usedCallback = callback;
        var usedLng = typeof language === 'string' ? language : this.language;
        if (typeof language === 'function') usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
          var toLoad = [];
          var append = function append(lng) {
            if (!lng) return;
            var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach(function (l) {
              if (toLoad.indexOf(l) < 0) toLoad.push(l);
            });
          };
          if (!usedLng) {
            var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach(function (l) {
              return append(l);
            });
          } else {
            append(usedLng);
          }
          if (this.options.preload) {
            this.options.preload.forEach(function (l) {
              return append(l);
            });
          }
          this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
            if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
            usedCallback(e);
          });
        } else {
          usedCallback(null);
        }
      }
    }, {
      key: "reloadResources",
      value: function reloadResources(lngs, ns, callback) {
        var deferred = defer();
        if (!lngs) lngs = this.languages;
        if (!ns) ns = this.options.ns;
        if (!callback) callback = noop;
        this.services.backendConnector.reload(lngs, ns, function (err) {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
    }, {
      key: "use",
      value: function use(module) {
        if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
        if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
        if (module.type === 'backend') {
          this.modules.backend = module;
        }
        if (module.type === 'logger' || module.log && module.warn && module.error) {
          this.modules.logger = module;
        }
        if (module.type === 'languageDetector') {
          this.modules.languageDetector = module;
        }
        if (module.type === 'i18nFormat') {
          this.modules.i18nFormat = module;
        }
        if (module.type === 'postProcessor') {
          postProcessor.addPostProcessor(module);
        }
        if (module.type === 'formatter') {
          this.modules.formatter = module;
        }
        if (module.type === '3rdParty') {
          this.modules.external.push(module);
        }
        return this;
      }
    }, {
      key: "setResolvedLanguage",
      value: function setResolvedLanguage(l) {
        if (!l || !this.languages) return;
        if (['cimode', 'dev'].indexOf(l) > -1) return;
        for (var li = 0; li < this.languages.length; li++) {
          var lngInLngs = this.languages[li];
          if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
          if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
            this.resolvedLanguage = lngInLngs;
            break;
          }
        }
      }
    }, {
      key: "changeLanguage",
      value: function changeLanguage(lng, callback) {
        var _this4 = this;
        this.isLanguageChangingTo = lng;
        var deferred = defer();
        this.emit('languageChanging', lng);
        var setLngProps = function setLngProps(l) {
          _this4.language = l;
          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
          _this4.resolvedLanguage = undefined;
          _this4.setResolvedLanguage(l);
        };
        var done = function done(err, l) {
          if (l) {
            setLngProps(l);
            _this4.translator.changeLanguage(l);
            _this4.isLanguageChangingTo = undefined;
            _this4.emit('languageChanged', l);
            _this4.logger.log('languageChanged', l);
          } else {
            _this4.isLanguageChangingTo = undefined;
          }
          deferred.resolve(function () {
            return _this4.t.apply(_this4, arguments);
          });
          if (callback) callback(err, function () {
            return _this4.t.apply(_this4, arguments);
          });
        };
        var setLng = function setLng(lngs) {
          if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
          var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
          if (l) {
            if (!_this4.language) {
              setLngProps(l);
            }
            if (!_this4.translator.language) _this4.translator.changeLanguage(l);
            if (_this4.services.languageDetector && _this4.services.languageDetector.cacheUserLanguage) _this4.services.languageDetector.cacheUserLanguage(l);
          }
          _this4.loadResources(l, function (err) {
            done(err, l);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          if (this.services.languageDetector.detect.length === 0) {
            this.services.languageDetector.detect().then(setLng);
          } else {
            this.services.languageDetector.detect(setLng);
          }
        } else {
          setLng(lng);
        }
        return deferred;
      }
    }, {
      key: "getFixedT",
      value: function getFixedT(lng, ns, keyPrefix) {
        var _this5 = this;
        var fixedT = function fixedT(key, opts) {
          var options;
          if (_typeof$3(opts) !== 'object') {
            for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              rest[_key3 - 2] = arguments[_key3];
            }
            options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
          } else {
            options = _objectSpread({}, opts);
          }
          options.lng = options.lng || fixedT.lng;
          options.lngs = options.lngs || fixedT.lngs;
          options.ns = options.ns || fixedT.ns;
          options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
          var keySeparator = _this5.options.keySeparator || '.';
          var resultKey;
          if (options.keyPrefix && Array.isArray(key)) {
            resultKey = key.map(function (k) {
              return "".concat(options.keyPrefix).concat(keySeparator).concat(k);
            });
          } else {
            resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
          }
          return _this5.t(resultKey, options);
        };
        if (typeof lng === 'string') {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        fixedT.keyPrefix = keyPrefix;
        return fixedT;
      }
    }, {
      key: "t",
      value: function t() {
        var _this$translator;
        return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
      }
    }, {
      key: "exists",
      value: function exists() {
        var _this$translator2;
        return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
      }
    }, {
      key: "setDefaultNamespace",
      value: function setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
    }, {
      key: "hasLoadedNamespace",
      value: function hasLoadedNamespace(ns) {
        var _this6 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (!this.isInitialized) {
          this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
          return false;
        }
        var lng = this.resolvedLanguage || this.languages[0];
        var fallbackLng = this.options ? this.options.fallbackLng : false;
        var lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === 'cimode') return true;
        var loadNotPending = function loadNotPending(l, n) {
          var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
          return loadState === -1 || loadState === 2;
        };
        if (options.precheck) {
          var preResult = options.precheck(this, loadNotPending);
          if (preResult !== undefined) return preResult;
        }
        if (this.hasResourceBundle(lng, ns)) return true;
        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
        return false;
      }
    }, {
      key: "loadNamespaces",
      value: function loadNamespaces(ns, callback) {
        var _this7 = this;
        var deferred = defer();
        if (!this.options.ns) {
          if (callback) callback();
          return Promise.resolve();
        }
        if (typeof ns === 'string') ns = [ns];
        ns.forEach(function (n) {
          if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
        });
        this.loadResources(function (err) {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
    }, {
      key: "loadLanguages",
      value: function loadLanguages(lngs, callback) {
        var deferred = defer();
        if (typeof lngs === 'string') lngs = [lngs];
        var preloaded = this.options.preload || [];
        var newLngs = lngs.filter(function (lng) {
          return preloaded.indexOf(lng) < 0;
        });
        if (!newLngs.length) {
          if (callback) callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources(function (err) {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
    }, {
      key: "dir",
      value: function dir(lng) {
        if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
        if (!lng) return 'rtl';
        var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
        var languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
        return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
      }
    }, {
      key: "cloneInstance",
      value: function cloneInstance() {
        var _this8 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
        var mergedOptions = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {
          isClone: true
        });
        var clone = new I18n(mergedOptions);
        if (options.debug !== undefined || options.prefix !== undefined) {
          clone.logger = clone.logger.clone(options);
        }
        var membersToCopy = ['store', 'services', 'language'];
        membersToCopy.forEach(function (m) {
          clone[m] = _this8[m];
        });
        clone.services = _objectSpread({}, this.services);
        clone.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        clone.translator = new Translator(clone.services, clone.options);
        clone.translator.on('*', function (event) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          clone.emit.apply(clone, [event].concat(args));
        });
        clone.init(mergedOptions, callback);
        clone.translator.options = clone.options;
        clone.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        return clone;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          options: this.options,
          store: this.store,
          language: this.language,
          languages: this.languages,
          resolvedLanguage: this.resolvedLanguage
        };
      }
    }]);
    return I18n;
  }(EventEmitter);
  _defineProperty$2(I18n, "createInstance", function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;
    return new I18n(options, callback);
  });
  var instance = I18n.createInstance();
  instance.createInstance = I18n.createInstance;

  instance.createInstance;
  instance.dir;
  instance.init;
  instance.loadResources;
  instance.reloadResources;
  instance.use;
  instance.changeLanguage;
  instance.getFixedT;
  instance.t;
  instance.exists;
  instance.setDefaultNamespace;
  instance.hasLoadedNamespace;
  instance.loadNamespaces;
  instance.loadLanguages;

  var arr$1 = [];
  var each$1 = arr$1.forEach;
  var slice$1 = arr$1.slice;
  function defaults$1(obj) {
    each$1.call(slice$1.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === undefined) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }

  // eslint-disable-next-line no-control-regex
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  var serializeCookie = function serializeCookie(name, val, options) {
    var opt = options || {};
    opt.path = opt.path || '/';
    var value = encodeURIComponent(val);
    var str = "".concat(name, "=").concat(value);
    if (opt.maxAge > 0) {
      var maxAge = opt.maxAge - 0;
      if (Number.isNaN(maxAge)) throw new Error('maxAge should be a Number');
      str += "; Max-Age=".concat(Math.floor(maxAge));
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError('option domain is invalid');
      }
      str += "; Domain=".concat(opt.domain);
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError('option path is invalid');
      }
      str += "; Path=".concat(opt.path);
    }
    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== 'function') {
        throw new TypeError('option expires is invalid');
      }
      str += "; Expires=".concat(opt.expires.toUTCString());
    }
    if (opt.httpOnly) str += '; HttpOnly';
    if (opt.secure) str += '; Secure';
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += '; SameSite=Strict';
          break;
        case 'lax':
          str += '; SameSite=Lax';
          break;
        case 'strict':
          str += '; SameSite=Strict';
          break;
        case 'none':
          str += '; SameSite=None';
          break;
        default:
          throw new TypeError('option sameSite is invalid');
      }
    }
    return str;
  };
  var cookie = {
    create: function create(name, value, minutes, domain) {
      var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        path: '/',
        sameSite: 'strict'
      };
      if (minutes) {
        cookieOptions.expires = new Date();
        cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);
      }
      if (domain) cookieOptions.domain = domain;
      document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);
    },
    read: function read(name) {
      var nameEQ = "".concat(name, "=");
      var ca = document.cookie.split(';');
      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
          c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    },
    remove: function remove(name) {
      this.create(name, '', -1);
    }
  };
  var cookie$1 = {
    name: 'cookie',
    lookup: function lookup(options) {
      var found;
      if (options.lookupCookie && typeof document !== 'undefined') {
        var c = cookie.read(options.lookupCookie);
        if (c) found = c;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupCookie && typeof document !== 'undefined') {
        cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
      }
    }
  };

  var querystring = {
    name: 'querystring',
    lookup: function lookup(options) {
      var found;
      if (typeof window !== 'undefined') {
        var search = window.location.search;
        if (!window.location.search && window.location.hash && window.location.hash.indexOf('?') > -1) {
          search = window.location.hash.substring(window.location.hash.indexOf('?'));
        }
        var query = search.substring(1);
        var params = query.split('&');
        for (var i = 0; i < params.length; i++) {
          var pos = params[i].indexOf('=');
          if (pos > 0) {
            var key = params[i].substring(0, pos);
            if (key === options.lookupQuerystring) {
              found = params[i].substring(pos + 1);
            }
          }
        }
      }
      return found;
    }
  };

  var hasLocalStorageSupport = null;
  var localStorageAvailable = function localStorageAvailable() {
    if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;
    try {
      hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;
      var testKey = 'i18next.translate.boo';
      window.localStorage.setItem(testKey, 'foo');
      window.localStorage.removeItem(testKey);
    } catch (e) {
      hasLocalStorageSupport = false;
    }
    return hasLocalStorageSupport;
  };
  var localStorage = {
    name: 'localStorage',
    lookup: function lookup(options) {
      var found;
      if (options.lookupLocalStorage && localStorageAvailable()) {
        var lng = window.localStorage.getItem(options.lookupLocalStorage);
        if (lng) found = lng;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupLocalStorage && localStorageAvailable()) {
        window.localStorage.setItem(options.lookupLocalStorage, lng);
      }
    }
  };

  var hasSessionStorageSupport = null;
  var sessionStorageAvailable = function sessionStorageAvailable() {
    if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;
    try {
      hasSessionStorageSupport = window !== 'undefined' && window.sessionStorage !== null;
      var testKey = 'i18next.translate.boo';
      window.sessionStorage.setItem(testKey, 'foo');
      window.sessionStorage.removeItem(testKey);
    } catch (e) {
      hasSessionStorageSupport = false;
    }
    return hasSessionStorageSupport;
  };
  var sessionStorage = {
    name: 'sessionStorage',
    lookup: function lookup(options) {
      var found;
      if (options.lookupSessionStorage && sessionStorageAvailable()) {
        var lng = window.sessionStorage.getItem(options.lookupSessionStorage);
        if (lng) found = lng;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupSessionStorage && sessionStorageAvailable()) {
        window.sessionStorage.setItem(options.lookupSessionStorage, lng);
      }
    }
  };

  var navigator$1 = {
    name: 'navigator',
    lookup: function lookup(options) {
      var found = [];
      if (typeof navigator !== 'undefined') {
        if (navigator.languages) {
          // chrome only; not an array, so can't use .push.apply instead of iterating
          for (var i = 0; i < navigator.languages.length; i++) {
            found.push(navigator.languages[i]);
          }
        }
        if (navigator.userLanguage) {
          found.push(navigator.userLanguage);
        }
        if (navigator.language) {
          found.push(navigator.language);
        }
      }
      return found.length > 0 ? found : undefined;
    }
  };

  var htmlTag = {
    name: 'htmlTag',
    lookup: function lookup(options) {
      var found;
      var htmlTag = options.htmlTag || (typeof document !== 'undefined' ? document.documentElement : null);
      if (htmlTag && typeof htmlTag.getAttribute === 'function') {
        found = htmlTag.getAttribute('lang');
      }
      return found;
    }
  };

  var path = {
    name: 'path',
    lookup: function lookup(options) {
      var found;
      if (typeof window !== 'undefined') {
        var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
        if (language instanceof Array) {
          if (typeof options.lookupFromPathIndex === 'number') {
            if (typeof language[options.lookupFromPathIndex] !== 'string') {
              return undefined;
            }
            found = language[options.lookupFromPathIndex].replace('/', '');
          } else {
            found = language[0].replace('/', '');
          }
        }
      }
      return found;
    }
  };

  var subdomain = {
    name: 'subdomain',
    lookup: function lookup(options) {
      // If given get the subdomain index else 1
      var lookupFromSubdomainIndex = typeof options.lookupFromSubdomainIndex === 'number' ? options.lookupFromSubdomainIndex + 1 : 1;
      // get all matches if window.location. is existing
      // first item of match is the match itself and the second is the first group macht which sould be the first subdomain match
      // is the hostname no public domain get the or option of localhost
      var language = typeof window !== 'undefined' && window.location && window.location.hostname && window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);

      // if there is no match (null) return undefined
      if (!language) return undefined;
      // return the given group match
      return language[lookupFromSubdomainIndex];
    }
  };

  function getDefaults$1() {
    return {
      order: ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag'],
      lookupQuerystring: 'lng',
      lookupCookie: 'i18next',
      lookupLocalStorage: 'i18nextLng',
      lookupSessionStorage: 'i18nextLng',
      // cache user language
      caches: ['localStorage'],
      excludeCacheFor: ['cimode']
      // cookieMinutes: 10,
      // cookieDomain: 'myDomain'
    };
  }
  var Browser = /*#__PURE__*/function () {
    function Browser(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck$1(this, Browser);
      this.type = 'languageDetector';
      this.detectors = {};
      this.init(services, options);
    }
    _createClass$1(Browser, [{
      key: "init",
      value: function init(services) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        this.services = services;
        this.options = defaults$1(options, this.options || {}, getDefaults$1());

        // backwards compatibility
        if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
        this.i18nOptions = i18nOptions;
        this.addDetector(cookie$1);
        this.addDetector(querystring);
        this.addDetector(localStorage);
        this.addDetector(sessionStorage);
        this.addDetector(navigator$1);
        this.addDetector(htmlTag);
        this.addDetector(path);
        this.addDetector(subdomain);
      }
    }, {
      key: "addDetector",
      value: function addDetector(detector) {
        this.detectors[detector.name] = detector;
      }
    }, {
      key: "detect",
      value: function detect(detectionOrder) {
        var _this = this;
        if (!detectionOrder) detectionOrder = this.options.order;
        var detected = [];
        detectionOrder.forEach(function (detectorName) {
          if (_this.detectors[detectorName]) {
            var lookup = _this.detectors[detectorName].lookup(_this.options);
            if (lookup && typeof lookup === 'string') lookup = [lookup];
            if (lookup) detected = detected.concat(lookup);
          }
        });
        if (this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0
        return detected.length > 0 ? detected[0] : null; // a little backward compatibility
      }
    }, {
      key: "cacheUserLanguage",
      value: function cacheUserLanguage(lng, caches) {
        var _this2 = this;
        if (!caches) caches = this.options.caches;
        if (!caches) return;
        if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
        caches.forEach(function (cacheName) {
          if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
        });
      }
    }]);
    return Browser;
  }();
  Browser.type = 'languageDetector';

  function _typeof$2(obj) { "@babel/helpers - typeof"; return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$2(obj); }
  var arr = [];
  var each = arr.forEach;
  var slice = arr.slice;
  function defaults(obj) {
    each.call(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === undefined) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }
  function hasXMLHttpRequest() {
    return typeof XMLHttpRequest === 'function' || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof$2(XMLHttpRequest)) === 'object';
  }
  function isPromise(maybePromise) {
    return !!maybePromise && typeof maybePromise.then === 'function';
  }
  function makePromise(maybePromise) {
    if (isPromise(maybePromise)) {
      return maybePromise;
    }
    return Promise.resolve(maybePromise);
  }

  function commonjsRequire(path) {
  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }

  var getFetch$1 = {exports: {}};

  var browserPonyfill = {exports: {}};

  var hasRequiredBrowserPonyfill;

  function requireBrowserPonyfill () {
  	if (hasRequiredBrowserPonyfill) return browserPonyfill.exports;
  	hasRequiredBrowserPonyfill = 1;
  	(function (module, exports) {
  		var global = typeof self !== 'undefined' ? self : commonjsGlobal;
  		var __self__ = (function () {
  		function F() {
  		this.fetch = false;
  		this.DOMException = global.DOMException;
  		}
  		F.prototype = global;
  		return new F();
  		})();
  		(function(self) {

  		((function (exports) {

  		  var support = {
  		    searchParams: 'URLSearchParams' in self,
  		    iterable: 'Symbol' in self && 'iterator' in Symbol,
  		    blob:
  		      'FileReader' in self &&
  		      'Blob' in self &&
  		      (function() {
  		        try {
  		          new Blob();
  		          return true
  		        } catch (e) {
  		          return false
  		        }
  		      })(),
  		    formData: 'FormData' in self,
  		    arrayBuffer: 'ArrayBuffer' in self
  		  };

  		  function isDataView(obj) {
  		    return obj && DataView.prototype.isPrototypeOf(obj)
  		  }

  		  if (support.arrayBuffer) {
  		    var viewClasses = [
  		      '[object Int8Array]',
  		      '[object Uint8Array]',
  		      '[object Uint8ClampedArray]',
  		      '[object Int16Array]',
  		      '[object Uint16Array]',
  		      '[object Int32Array]',
  		      '[object Uint32Array]',
  		      '[object Float32Array]',
  		      '[object Float64Array]'
  		    ];

  		    var isArrayBufferView =
  		      ArrayBuffer.isView ||
  		      function(obj) {
  		        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
  		      };
  		  }

  		  function normalizeName(name) {
  		    if (typeof name !== 'string') {
  		      name = String(name);
  		    }
  		    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
  		      throw new TypeError('Invalid character in header field name')
  		    }
  		    return name.toLowerCase()
  		  }

  		  function normalizeValue(value) {
  		    if (typeof value !== 'string') {
  		      value = String(value);
  		    }
  		    return value
  		  }

  		  // Build a destructive iterator for the value list
  		  function iteratorFor(items) {
  		    var iterator = {
  		      next: function() {
  		        var value = items.shift();
  		        return {done: value === undefined, value: value}
  		      }
  		    };

  		    if (support.iterable) {
  		      iterator[Symbol.iterator] = function() {
  		        return iterator
  		      };
  		    }

  		    return iterator
  		  }

  		  function Headers(headers) {
  		    this.map = {};

  		    if (headers instanceof Headers) {
  		      headers.forEach(function(value, name) {
  		        this.append(name, value);
  		      }, this);
  		    } else if (Array.isArray(headers)) {
  		      headers.forEach(function(header) {
  		        this.append(header[0], header[1]);
  		      }, this);
  		    } else if (headers) {
  		      Object.getOwnPropertyNames(headers).forEach(function(name) {
  		        this.append(name, headers[name]);
  		      }, this);
  		    }
  		  }

  		  Headers.prototype.append = function(name, value) {
  		    name = normalizeName(name);
  		    value = normalizeValue(value);
  		    var oldValue = this.map[name];
  		    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  		  };

  		  Headers.prototype['delete'] = function(name) {
  		    delete this.map[normalizeName(name)];
  		  };

  		  Headers.prototype.get = function(name) {
  		    name = normalizeName(name);
  		    return this.has(name) ? this.map[name] : null
  		  };

  		  Headers.prototype.has = function(name) {
  		    return this.map.hasOwnProperty(normalizeName(name))
  		  };

  		  Headers.prototype.set = function(name, value) {
  		    this.map[normalizeName(name)] = normalizeValue(value);
  		  };

  		  Headers.prototype.forEach = function(callback, thisArg) {
  		    for (var name in this.map) {
  		      if (this.map.hasOwnProperty(name)) {
  		        callback.call(thisArg, this.map[name], name, this);
  		      }
  		    }
  		  };

  		  Headers.prototype.keys = function() {
  		    var items = [];
  		    this.forEach(function(value, name) {
  		      items.push(name);
  		    });
  		    return iteratorFor(items)
  		  };

  		  Headers.prototype.values = function() {
  		    var items = [];
  		    this.forEach(function(value) {
  		      items.push(value);
  		    });
  		    return iteratorFor(items)
  		  };

  		  Headers.prototype.entries = function() {
  		    var items = [];
  		    this.forEach(function(value, name) {
  		      items.push([name, value]);
  		    });
  		    return iteratorFor(items)
  		  };

  		  if (support.iterable) {
  		    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  		  }

  		  function consumed(body) {
  		    if (body.bodyUsed) {
  		      return Promise.reject(new TypeError('Already read'))
  		    }
  		    body.bodyUsed = true;
  		  }

  		  function fileReaderReady(reader) {
  		    return new Promise(function(resolve, reject) {
  		      reader.onload = function() {
  		        resolve(reader.result);
  		      };
  		      reader.onerror = function() {
  		        reject(reader.error);
  		      };
  		    })
  		  }

  		  function readBlobAsArrayBuffer(blob) {
  		    var reader = new FileReader();
  		    var promise = fileReaderReady(reader);
  		    reader.readAsArrayBuffer(blob);
  		    return promise
  		  }

  		  function readBlobAsText(blob) {
  		    var reader = new FileReader();
  		    var promise = fileReaderReady(reader);
  		    reader.readAsText(blob);
  		    return promise
  		  }

  		  function readArrayBufferAsText(buf) {
  		    var view = new Uint8Array(buf);
  		    var chars = new Array(view.length);

  		    for (var i = 0; i < view.length; i++) {
  		      chars[i] = String.fromCharCode(view[i]);
  		    }
  		    return chars.join('')
  		  }

  		  function bufferClone(buf) {
  		    if (buf.slice) {
  		      return buf.slice(0)
  		    } else {
  		      var view = new Uint8Array(buf.byteLength);
  		      view.set(new Uint8Array(buf));
  		      return view.buffer
  		    }
  		  }

  		  function Body() {
  		    this.bodyUsed = false;

  		    this._initBody = function(body) {
  		      this._bodyInit = body;
  		      if (!body) {
  		        this._bodyText = '';
  		      } else if (typeof body === 'string') {
  		        this._bodyText = body;
  		      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
  		        this._bodyBlob = body;
  		      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
  		        this._bodyFormData = body;
  		      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
  		        this._bodyText = body.toString();
  		      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
  		        this._bodyArrayBuffer = bufferClone(body.buffer);
  		        // IE 10-11 can't handle a DataView body.
  		        this._bodyInit = new Blob([this._bodyArrayBuffer]);
  		      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
  		        this._bodyArrayBuffer = bufferClone(body);
  		      } else {
  		        this._bodyText = body = Object.prototype.toString.call(body);
  		      }

  		      if (!this.headers.get('content-type')) {
  		        if (typeof body === 'string') {
  		          this.headers.set('content-type', 'text/plain;charset=UTF-8');
  		        } else if (this._bodyBlob && this._bodyBlob.type) {
  		          this.headers.set('content-type', this._bodyBlob.type);
  		        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
  		          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
  		        }
  		      }
  		    };

  		    if (support.blob) {
  		      this.blob = function() {
  		        var rejected = consumed(this);
  		        if (rejected) {
  		          return rejected
  		        }

  		        if (this._bodyBlob) {
  		          return Promise.resolve(this._bodyBlob)
  		        } else if (this._bodyArrayBuffer) {
  		          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
  		        } else if (this._bodyFormData) {
  		          throw new Error('could not read FormData body as blob')
  		        } else {
  		          return Promise.resolve(new Blob([this._bodyText]))
  		        }
  		      };

  		      this.arrayBuffer = function() {
  		        if (this._bodyArrayBuffer) {
  		          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
  		        } else {
  		          return this.blob().then(readBlobAsArrayBuffer)
  		        }
  		      };
  		    }

  		    this.text = function() {
  		      var rejected = consumed(this);
  		      if (rejected) {
  		        return rejected
  		      }

  		      if (this._bodyBlob) {
  		        return readBlobAsText(this._bodyBlob)
  		      } else if (this._bodyArrayBuffer) {
  		        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
  		      } else if (this._bodyFormData) {
  		        throw new Error('could not read FormData body as text')
  		      } else {
  		        return Promise.resolve(this._bodyText)
  		      }
  		    };

  		    if (support.formData) {
  		      this.formData = function() {
  		        return this.text().then(decode)
  		      };
  		    }

  		    this.json = function() {
  		      return this.text().then(JSON.parse)
  		    };

  		    return this
  		  }

  		  // HTTP methods whose capitalization should be normalized
  		  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  		  function normalizeMethod(method) {
  		    var upcased = method.toUpperCase();
  		    return methods.indexOf(upcased) > -1 ? upcased : method
  		  }

  		  function Request(input, options) {
  		    options = options || {};
  		    var body = options.body;

  		    if (input instanceof Request) {
  		      if (input.bodyUsed) {
  		        throw new TypeError('Already read')
  		      }
  		      this.url = input.url;
  		      this.credentials = input.credentials;
  		      if (!options.headers) {
  		        this.headers = new Headers(input.headers);
  		      }
  		      this.method = input.method;
  		      this.mode = input.mode;
  		      this.signal = input.signal;
  		      if (!body && input._bodyInit != null) {
  		        body = input._bodyInit;
  		        input.bodyUsed = true;
  		      }
  		    } else {
  		      this.url = String(input);
  		    }

  		    this.credentials = options.credentials || this.credentials || 'same-origin';
  		    if (options.headers || !this.headers) {
  		      this.headers = new Headers(options.headers);
  		    }
  		    this.method = normalizeMethod(options.method || this.method || 'GET');
  		    this.mode = options.mode || this.mode || null;
  		    this.signal = options.signal || this.signal;
  		    this.referrer = null;

  		    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
  		      throw new TypeError('Body not allowed for GET or HEAD requests')
  		    }
  		    this._initBody(body);
  		  }

  		  Request.prototype.clone = function() {
  		    return new Request(this, {body: this._bodyInit})
  		  };

  		  function decode(body) {
  		    var form = new FormData();
  		    body
  		      .trim()
  		      .split('&')
  		      .forEach(function(bytes) {
  		        if (bytes) {
  		          var split = bytes.split('=');
  		          var name = split.shift().replace(/\+/g, ' ');
  		          var value = split.join('=').replace(/\+/g, ' ');
  		          form.append(decodeURIComponent(name), decodeURIComponent(value));
  		        }
  		      });
  		    return form
  		  }

  		  function parseHeaders(rawHeaders) {
  		    var headers = new Headers();
  		    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  		    // https://tools.ietf.org/html/rfc7230#section-3.2
  		    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  		    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
  		      var parts = line.split(':');
  		      var key = parts.shift().trim();
  		      if (key) {
  		        var value = parts.join(':').trim();
  		        headers.append(key, value);
  		      }
  		    });
  		    return headers
  		  }

  		  Body.call(Request.prototype);

  		  function Response(bodyInit, options) {
  		    if (!options) {
  		      options = {};
  		    }

  		    this.type = 'default';
  		    this.status = options.status === undefined ? 200 : options.status;
  		    this.ok = this.status >= 200 && this.status < 300;
  		    this.statusText = 'statusText' in options ? options.statusText : 'OK';
  		    this.headers = new Headers(options.headers);
  		    this.url = options.url || '';
  		    this._initBody(bodyInit);
  		  }

  		  Body.call(Response.prototype);

  		  Response.prototype.clone = function() {
  		    return new Response(this._bodyInit, {
  		      status: this.status,
  		      statusText: this.statusText,
  		      headers: new Headers(this.headers),
  		      url: this.url
  		    })
  		  };

  		  Response.error = function() {
  		    var response = new Response(null, {status: 0, statusText: ''});
  		    response.type = 'error';
  		    return response
  		  };

  		  var redirectStatuses = [301, 302, 303, 307, 308];

  		  Response.redirect = function(url, status) {
  		    if (redirectStatuses.indexOf(status) === -1) {
  		      throw new RangeError('Invalid status code')
  		    }

  		    return new Response(null, {status: status, headers: {location: url}})
  		  };

  		  exports.DOMException = self.DOMException;
  		  try {
  		    new exports.DOMException();
  		  } catch (err) {
  		    exports.DOMException = function(message, name) {
  		      this.message = message;
  		      this.name = name;
  		      var error = Error(message);
  		      this.stack = error.stack;
  		    };
  		    exports.DOMException.prototype = Object.create(Error.prototype);
  		    exports.DOMException.prototype.constructor = exports.DOMException;
  		  }

  		  function fetch(input, init) {
  		    return new Promise(function(resolve, reject) {
  		      var request = new Request(input, init);

  		      if (request.signal && request.signal.aborted) {
  		        return reject(new exports.DOMException('Aborted', 'AbortError'))
  		      }

  		      var xhr = new XMLHttpRequest();

  		      function abortXhr() {
  		        xhr.abort();
  		      }

  		      xhr.onload = function() {
  		        var options = {
  		          status: xhr.status,
  		          statusText: xhr.statusText,
  		          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
  		        };
  		        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
  		        var body = 'response' in xhr ? xhr.response : xhr.responseText;
  		        resolve(new Response(body, options));
  		      };

  		      xhr.onerror = function() {
  		        reject(new TypeError('Network request failed'));
  		      };

  		      xhr.ontimeout = function() {
  		        reject(new TypeError('Network request failed'));
  		      };

  		      xhr.onabort = function() {
  		        reject(new exports.DOMException('Aborted', 'AbortError'));
  		      };

  		      xhr.open(request.method, request.url, true);

  		      if (request.credentials === 'include') {
  		        xhr.withCredentials = true;
  		      } else if (request.credentials === 'omit') {
  		        xhr.withCredentials = false;
  		      }

  		      if ('responseType' in xhr && support.blob) {
  		        xhr.responseType = 'blob';
  		      }

  		      request.headers.forEach(function(value, name) {
  		        xhr.setRequestHeader(name, value);
  		      });

  		      if (request.signal) {
  		        request.signal.addEventListener('abort', abortXhr);

  		        xhr.onreadystatechange = function() {
  		          // DONE (success or failure)
  		          if (xhr.readyState === 4) {
  		            request.signal.removeEventListener('abort', abortXhr);
  		          }
  		        };
  		      }

  		      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  		    })
  		  }

  		  fetch.polyfill = true;

  		  if (!self.fetch) {
  		    self.fetch = fetch;
  		    self.Headers = Headers;
  		    self.Request = Request;
  		    self.Response = Response;
  		  }

  		  exports.Headers = Headers;
  		  exports.Request = Request;
  		  exports.Response = Response;
  		  exports.fetch = fetch;

  		  Object.defineProperty(exports, '__esModule', { value: true });

  		  return exports;

  		}))({});
  		})(__self__);
  		__self__.fetch.ponyfill = true;
  		// Remove "polyfill" property added by whatwg-fetch
  		delete __self__.fetch.polyfill;
  		// Choose between native implementation (global) or custom implementation (__self__)
  		// var ctx = global.fetch ? global : __self__;
  		var ctx = __self__; // this line disable service worker support temporarily
  		exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
  		exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
  		exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
  		exports.Headers = ctx.Headers;
  		exports.Request = ctx.Request;
  		exports.Response = ctx.Response;
  		module.exports = exports; 
  	} (browserPonyfill, browserPonyfill.exports));
  	return browserPonyfill.exports;
  }

  (function (module, exports) {
  	var fetchApi;
  	if (typeof fetch === 'function') {
  	  if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal.fetch) {
  	    fetchApi = commonjsGlobal.fetch;
  	  } else if (typeof window !== 'undefined' && window.fetch) {
  	    fetchApi = window.fetch;
  	  } else {
  	    fetchApi = fetch;
  	  }
  	}

  	if (typeof commonjsRequire !== 'undefined' && (typeof window === 'undefined' || typeof window.document === 'undefined')) {
  	  var f = fetchApi || requireBrowserPonyfill();
  	  if (f.default) f = f.default;
  	  exports.default = f;
  	  module.exports = exports.default;
  	} 
  } (getFetch$1, getFetch$1.exports));

  var getFetchExports = getFetch$1.exports;
  var getFetch = /*@__PURE__*/getDefaultExportFromCjs(getFetchExports);

  var fetchNode = /*#__PURE__*/_mergeNamespaces({
    __proto__: null,
    default: getFetch
  }, [getFetchExports]);

  function _typeof$1(obj) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$1(obj); }
  var fetchApi;
  if (typeof fetch === 'function') {
    if (typeof global !== 'undefined' && global.fetch) {
      fetchApi = global.fetch;
    } else if (typeof window !== 'undefined' && window.fetch) {
      fetchApi = window.fetch;
    } else {
      fetchApi = fetch;
    }
  }
  var XmlHttpRequestApi;
  if (hasXMLHttpRequest()) {
    if (typeof global !== 'undefined' && global.XMLHttpRequest) {
      XmlHttpRequestApi = global.XMLHttpRequest;
    } else if (typeof window !== 'undefined' && window.XMLHttpRequest) {
      XmlHttpRequestApi = window.XMLHttpRequest;
    }
  }
  var ActiveXObjectApi;
  if (typeof ActiveXObject === 'function') {
    if (typeof global !== 'undefined' && global.ActiveXObject) {
      ActiveXObjectApi = global.ActiveXObject;
    } else if (typeof window !== 'undefined' && window.ActiveXObject) {
      ActiveXObjectApi = window.ActiveXObject;
    }
  }
  if (!fetchApi && fetchNode && !XmlHttpRequestApi && !ActiveXObjectApi) fetchApi = getFetch || fetchNode;
  if (typeof fetchApi !== 'function') fetchApi = undefined;
  var addQueryString = function addQueryString(url, params) {
    if (params && _typeof$1(params) === 'object') {
      var queryString = '';
      for (var paramName in params) {
        queryString += '&' + encodeURIComponent(paramName) + '=' + encodeURIComponent(params[paramName]);
      }
      if (!queryString) return url;
      url = url + (url.indexOf('?') !== -1 ? '&' : '?') + queryString.slice(1);
    }
    return url;
  };
  var fetchIt = function fetchIt(url, fetchOptions, callback) {
    fetchApi(url, fetchOptions).then(function (response) {
      if (!response.ok) return callback(response.statusText || 'Error', {
        status: response.status
      });
      response.text().then(function (data) {
        callback(null, {
          status: response.status,
          data: data
        });
      }).catch(callback);
    }).catch(callback);
  };
  var omitFetchOptions = false;
  var requestWithFetch = function requestWithFetch(options, url, payload, callback) {
    if (options.queryStringParams) {
      url = addQueryString(url, options.queryStringParams);
    }
    var headers = defaults({}, typeof options.customHeaders === 'function' ? options.customHeaders() : options.customHeaders);
    if (payload) headers['Content-Type'] = 'application/json';
    var reqOptions = typeof options.requestOptions === 'function' ? options.requestOptions(payload) : options.requestOptions;
    var fetchOptions = defaults({
      method: payload ? 'POST' : 'GET',
      body: payload ? options.stringify(payload) : undefined,
      headers: headers
    }, omitFetchOptions ? {} : reqOptions);
    try {
      fetchIt(url, fetchOptions, callback);
    } catch (e) {
      if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf('not implemented') < 0) {
        return callback(e);
      }
      try {
        Object.keys(reqOptions).forEach(function (opt) {
          delete fetchOptions[opt];
        });
        fetchIt(url, fetchOptions, callback);
        omitFetchOptions = true;
      } catch (err) {
        callback(err);
      }
    }
  };
  var requestWithXmlHttpRequest = function requestWithXmlHttpRequest(options, url, payload, callback) {
    if (payload && _typeof$1(payload) === 'object') {
      payload = addQueryString('', payload).slice(1);
    }
    if (options.queryStringParams) {
      url = addQueryString(url, options.queryStringParams);
    }
    try {
      var x;
      if (XmlHttpRequestApi) {
        x = new XmlHttpRequestApi();
      } else {
        x = new ActiveXObjectApi('MSXML2.XMLHTTP.3.0');
      }
      x.open(payload ? 'POST' : 'GET', url, 1);
      if (!options.crossDomain) {
        x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      }
      x.withCredentials = !!options.withCredentials;
      if (payload) {
        x.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      }
      if (x.overrideMimeType) {
        x.overrideMimeType('application/json');
      }
      var h = options.customHeaders;
      h = typeof h === 'function' ? h() : h;
      if (h) {
        for (var i in h) {
          x.setRequestHeader(i, h[i]);
        }
      }
      x.onreadystatechange = function () {
        x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
          status: x.status,
          data: x.responseText
        });
      };
      x.send(payload);
    } catch (e) {
      console && console.log(e);
    }
  };
  var request = function request(options, url, payload, callback) {
    if (typeof payload === 'function') {
      callback = payload;
      payload = undefined;
    }
    callback = callback || function () {};
    if (fetchApi && url.indexOf('file:') !== 0) {
      return requestWithFetch(options, url, payload, callback);
    }
    if (hasXMLHttpRequest() || typeof ActiveXObject === 'function') {
      return requestWithXmlHttpRequest(options, url, payload, callback);
    }
    callback(new Error('No fetch and no xhr implementation found!'));
  };

  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  var getDefaults = function getDefaults() {
    return {
      loadPath: '/locales/{{lng}}/{{ns}}.json',
      addPath: '/locales/add/{{lng}}/{{ns}}',
      allowMultiLoading: false,
      parse: function parse(data) {
        return JSON.parse(data);
      },
      stringify: JSON.stringify,
      parsePayload: function parsePayload(namespace, key, fallbackValue) {
        return _defineProperty({}, key, fallbackValue || '');
      },
      parseLoadPayload: function parseLoadPayload(languages, namespaces) {
        return undefined;
      },
      request: request,
      reloadInterval: typeof window !== 'undefined' ? false : 60 * 60 * 1000,
      customHeaders: {},
      queryStringParams: {},
      crossDomain: false,
      withCredentials: false,
      overrideMimeType: false,
      requestOptions: {
        mode: 'cors',
        credentials: 'same-origin',
        cache: 'default'
      }
    };
  };
  var Backend = function () {
    function Backend(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, Backend);
      this.services = services;
      this.options = options;
      this.allOptions = allOptions;
      this.type = 'backend';
      this.init(services, options, allOptions);
    }
    _createClass(Backend, [{
      key: "init",
      value: function init(services) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        this.services = services;
        this.options = defaults(options, this.options || {}, getDefaults());
        this.allOptions = allOptions;
        if (this.services && this.options.reloadInterval) {
          setInterval(function () {
            return _this.reload();
          }, this.options.reloadInterval);
        }
      }
    }, {
      key: "readMulti",
      value: function readMulti(languages, namespaces, callback) {
        this._readAny(languages, languages, namespaces, namespaces, callback);
      }
    }, {
      key: "read",
      value: function read(language, namespace, callback) {
        this._readAny([language], language, [namespace], namespace, callback);
      }
    }, {
      key: "_readAny",
      value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {
        var _this2 = this;
        var loadPath = this.options.loadPath;
        if (typeof this.options.loadPath === 'function') {
          loadPath = this.options.loadPath(languages, namespaces);
        }
        loadPath = makePromise(loadPath);
        loadPath.then(function (resolvedLoadPath) {
          if (!resolvedLoadPath) return callback(null, {});
          var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {
            lng: languages.join('+'),
            ns: namespaces.join('+')
          });
          _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);
        });
      }
    }, {
      key: "loadUrl",
      value: function loadUrl(url, callback, languages, namespaces) {
        var _this3 = this;
        var lng = typeof languages === 'string' ? [languages] : languages;
        var ns = typeof namespaces === 'string' ? [namespaces] : namespaces;
        var payload = this.options.parseLoadPayload(lng, ns);
        this.options.request(this.options, url, payload, function (err, res) {
          if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback('failed loading ' + url + '; status code: ' + res.status, true);
          if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url + '; status code: ' + res.status, false);
          if (!res && err && err.message && err.message.indexOf('Failed to fetch') > -1) return callback('failed loading ' + url + ': ' + err.message, true);
          if (err) return callback(err, false);
          var ret, parseErr;
          try {
            if (typeof res.data === 'string') {
              ret = _this3.options.parse(res.data, languages, namespaces);
            } else {
              ret = res.data;
            }
          } catch (e) {
            parseErr = 'failed parsing ' + url + ' to json';
          }
          if (parseErr) return callback(parseErr, false);
          callback(null, ret);
        });
      }
    }, {
      key: "create",
      value: function create(languages, namespace, key, fallbackValue, callback) {
        var _this4 = this;
        if (!this.options.addPath) return;
        if (typeof languages === 'string') languages = [languages];
        var payload = this.options.parsePayload(namespace, key, fallbackValue);
        var finished = 0;
        var dataArray = [];
        var resArray = [];
        languages.forEach(function (lng) {
          var addPath = _this4.options.addPath;
          if (typeof _this4.options.addPath === 'function') {
            addPath = _this4.options.addPath(lng, namespace);
          }
          var url = _this4.services.interpolator.interpolate(addPath, {
            lng: lng,
            ns: namespace
          });
          _this4.options.request(_this4.options, url, payload, function (data, res) {
            finished += 1;
            dataArray.push(data);
            resArray.push(res);
            if (finished === languages.length) {
              if (typeof callback === 'function') callback(dataArray, resArray);
            }
          });
        });
      }
    }, {
      key: "reload",
      value: function reload() {
        var _this5 = this;
        var _this$services = this.services,
          backendConnector = _this$services.backendConnector,
          languageUtils = _this$services.languageUtils,
          logger = _this$services.logger;
        var currentLanguage = backendConnector.language;
        if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return;
        var toLoad = [];
        var append = function append(lng) {
          var lngs = languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };
        append(currentLanguage);
        if (this.allOptions.preload) this.allOptions.preload.forEach(function (l) {
          return append(l);
        });
        toLoad.forEach(function (lng) {
          _this5.allOptions.ns.forEach(function (ns) {
            backendConnector.read(lng, ns, 'read', null, null, function (err, data) {
              if (err) logger.warn("loading namespace ".concat(ns, " for language ").concat(lng, " failed"), err);
              if (!err && data) logger.log("loaded namespace ".concat(ns, " for language ").concat(lng), data);
              backendConnector.loaded("".concat(lng, "|").concat(ns), err, data);
            });
          });
        });
      }
    }]);
    return Backend;
  }();
  Backend.type = 'backend';

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  var _baseFindIndex = baseFindIndex$1;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

  function baseIsNaN$1(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN$1;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function strictIndexOf$1(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  var _strictIndexOf = strictIndexOf$1;

  var baseFindIndex = _baseFindIndex,
      baseIsNaN = _baseIsNaN,
      strictIndexOf = _strictIndexOf;

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf$1(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf$1;

  var baseIndexOf = _baseIndexOf;

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes$1(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes$1;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludesWith$1(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith$1;

  var SetCache = _SetCache,
      arrayIncludes = _arrayIncludes,
      arrayIncludesWith = _arrayIncludesWith,
      arrayMap$1 = _arrayMap,
      baseUnary = _baseUnary,
      cacheHas = _cacheHas;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */
  function baseIntersection$1(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith : arrayIncludes,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];
      if (othIndex && iteratee) {
        array = arrayMap$1(array, baseUnary(iteratee));
      }
      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
        ? new SetCache(othIndex && array)
        : undefined;
    }
    array = arrays[0];

    var index = -1,
        seen = caches[0];

    outer:
    while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (!(seen
            ? cacheHas(seen, computed)
            : includes(result, computed, comparator)
          )) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache
                ? cacheHas(cache, computed)
                : includes(arrays[othIndex], computed, comparator))
              ) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  var _baseIntersection = baseIntersection$1;

  var identity = identity_1,
      overRest = _overRest,
      setToString = _setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest$2(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  var _baseRest = baseRest$2;

  var isArrayLike$1 = isArrayLike_1,
      isObjectLike$1 = isObjectLike_1;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject$2(value) {
    return isObjectLike$1(value) && isArrayLike$1(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject$2;

  var isArrayLikeObject$1 = isArrayLikeObject_1;

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */
  function castArrayLikeObject$1(value) {
    return isArrayLikeObject$1(value) ? value : [];
  }

  var _castArrayLikeObject = castArrayLikeObject$1;

  var arrayMap = _arrayMap,
      baseIntersection = _baseIntersection,
      baseRest$1 = _baseRest,
      castArrayLikeObject = _castArrayLikeObject;

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */
  var intersection = baseRest$1(function(arrays) {
    var mapped = arrayMap(arrays, castArrayLikeObject);
    return (mapped.length && mapped[0] === arrays[0])
      ? baseIntersection(mapped)
      : [];
  });

  var intersection_1 = intersection;

  var intersection$1 = /*@__PURE__*/getDefaultExportFromCjs(intersection_1);

  var baseAssignValue$1 = _baseAssignValue,
      eq$1 = eq_1;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue$2(object, key, value) {
    if ((value !== undefined && !eq$1(object[key], value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue$1(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue$2;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */

  function createBaseFor$1(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  var _createBaseFor = createBaseFor$1;

  var createBaseFor = _createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor$1 = createBaseFor();

  var _baseFor = baseFor$1;

  var _cloneBuffer = {exports: {}};

  _cloneBuffer.exports;

  (function (module, exports) {
  	var root = _root;

  	/** Detect free variable `exports`. */
  	var freeExports = exports && !exports.nodeType && exports;

  	/** Detect free variable `module`. */
  	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  	/** Detect the popular CommonJS extension `module.exports`. */
  	var moduleExports = freeModule && freeModule.exports === freeExports;

  	/** Built-in value references. */
  	var Buffer = moduleExports ? root.Buffer : undefined,
  	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  	/**
  	 * Creates a clone of  `buffer`.
  	 *
  	 * @private
  	 * @param {Buffer} buffer The buffer to clone.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Buffer} Returns the cloned buffer.
  	 */
  	function cloneBuffer(buffer, isDeep) {
  	  if (isDeep) {
  	    return buffer.slice();
  	  }
  	  var length = buffer.length,
  	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  	  buffer.copy(result);
  	  return result;
  	}

  	module.exports = cloneBuffer; 
  } (_cloneBuffer, _cloneBuffer.exports));

  var _cloneBufferExports = _cloneBuffer.exports;

  var Uint8Array$1 = _Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer$1(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer$1;

  var cloneArrayBuffer = _cloneArrayBuffer;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray$1(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray$1;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */

  function copyArray$1(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray$1;

  var isObject$3 = isObject_1;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate$1 = (function() {
    function object() {}
    return function(proto) {
      if (!isObject$3(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate$1;

  var baseCreate = _baseCreate,
      getPrototype$1 = _getPrototype,
      isPrototype = _isPrototype;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject$1(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype$1(object))
      : {};
  }

  var _initCloneObject = initCloneObject$1;

  var baseGetTag = _baseGetTag,
      getPrototype = _getPrototype,
      isObjectLike = isObjectLike_1;

  /** `Object#toString` result references. */
  var objectTag = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject$1(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject$1;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function safeGet$2(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet$2;

  var assignValue = _assignValue,
      baseAssignValue = _baseAssignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject$1(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject$1;

  var copyObject = _copyObject,
      keysIn$1 = keysIn_1;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject$1(value) {
    return copyObject(value, keysIn$1(value));
  }

  var toPlainObject_1 = toPlainObject$1;

  var assignMergeValue$1 = _assignMergeValue,
      cloneBuffer = _cloneBufferExports,
      cloneTypedArray = _cloneTypedArray,
      copyArray = _copyArray,
      initCloneObject = _initCloneObject,
      isArguments = isArguments_1,
      isArray = isArray_1,
      isArrayLikeObject = isArrayLikeObject_1,
      isBuffer = isBufferExports,
      isFunction = isFunction_1,
      isObject$2 = isObject_1,
      isPlainObject = isPlainObject_1,
      isTypedArray = isTypedArray_1,
      safeGet$1 = _safeGet,
      toPlainObject = toPlainObject_1;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet$1(object, key),
        srcValue = safeGet$1(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue$1(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject$2(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue$1(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep$1;

  var Stack = _Stack,
      assignMergeValue = _assignMergeValue,
      baseFor = _baseFor,
      baseMergeDeep = _baseMergeDeep,
      isObject$1 = isObject_1,
      keysIn = keysIn_1,
      safeGet = _safeGet;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge$1(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack);
      if (isObject$1(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  var _baseMerge = baseMerge$1;

  var eq = eq_1,
      isArrayLike = isArrayLike_1,
      isIndex = _isIndex,
      isObject = isObject_1;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall$1(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall$1;

  var baseRest = _baseRest,
      isIterateeCall = _isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner$1(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  var _createAssigner = createAssigner$1;

  var baseMerge = _baseMerge,
      createAssigner = _createAssigner;

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  var merge_1 = merge;

  var merge$1 = /*@__PURE__*/getDefaultExportFromCjs(merge_1);

  var actions$8 = {
  	"new": "Neu Erstellen",
  	edit: "Bearbeiten",
  	show: "Anzeigen",
  	"delete": "Löschen",
  	bulkDelete: "Alle Löschen",
  	list: "Auflisten"
  };
  var buttons$8 = {
  	save: "Speichern",
  	addNewItem: "Neuen Eintrag hinzufügen",
  	filter: "Filter",
  	filterActive: "Filter ({{count}})",
  	applyChanges: "Änderungen übernehmen",
  	resetFilter: "Zurücksetzen",
  	confirmRemovalMany: "Bestätigen Sie das Löschen des Eintrag",
  	confirmRemovalMany_plural: "Bestätigen Sie das Löschen der {{count}} Einträge",
  	logout: "Abmelden",
  	login: "Anmelden",
  	seeTheDocumentation: "Siehe: <1>die Dokumentation</1>",
  	createFirstRecord: "Ersten Eintrag erstellen",
  	cancel: "Abbestellen",
  	confirm: "Bestätigen"
  };
  var components$8 = {
  	DropZone: {
  		placeholder: "Legen Sie Ihre Datei hier ab oder klicken Sie zum Durchsuchen",
  		acceptedSize: "Maximale Dateigröße: {{maxSize}}",
  		acceptedType: "Unterstützen: {{mimeTypes}}",
  		unsupportedSize: "Datei {{fileName}} ist zu groß",
  		unsupportedType: "Datei {{fileName}} hat einen nicht unterstützten Typ: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Deutsch",
  			en: "Englisch",
  			es: "Spanisch",
  			it: "Italienisch",
  			ja: "Japanisch",
  			pl: "Polnisch",
  			"pt-BR": "Portugiesisch (Brasilien)",
  			ua: "Ukrainisch",
  			"zh-CN": "Chinesisch"
  		}
  	},
  	Login: {
  		welcomeHeader: "Wilkommen",
  		welcomeMessage: "zu AdminJS - dem weltweit führenden, automatisch generierten Open-Source-Admin-Panel für Ihre Node.js-Anwendung, mit dem Sie alle Ihre Daten an einem Ort verwalten können",
  		properties: {
  			email: "Email",
  			password: "Passwort"
  		},
  		loginButton: "Einloggen"
  	}
  };
  var labels$8 = {
  	navigation: "Navigation",
  	pages: "Seiten",
  	selectedRecords: "Ausgewählt ({{selected}})",
  	filters: "Filter",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "App: {{version}}",
  	dashboard: "Dashboard"
  };
  var properties$8 = {
  	length: "Anzahl",
  	from: "Von",
  	to: "An"
  };
  var resources$8 = {
  };
  var messages$8 = {
  	successfullyBulkDeleted: "erfolgreich den Eintrag gelöscht",
  	successfullyBulkDeleted_plural: "erfolgreich {{count}} Einträge gelöscht",
  	successfullyDeleted: "Erfolgreich den gewählten Eintrag gelöscht",
  	successfullyUpdated: "Erfolgreich den gewählten Eintrag aktualisiert",
  	thereWereValidationErrors: "Es sind Validierungsfehler aufgetreten - bitte unten prüfen",
  	forbiddenError: "Sie können {{resourceId}} nicht {{actionName}}",
  	anyForbiddenError: "Sie können diese Aktion nicht durchführen",
  	successfullyCreated: "Erfolgreich einen neuen Eintrag erstellt",
  	bulkDeleteError: "Beim Löschen der Einträge ist ein Fehler aufgetreten, für weitere Informationen die Konsole prüfen",
  	errorFetchingRecords: "Es ist ein Fehler beim Abrufen der Einträge aufgetreten. In der Konsole finden Sie weitere Informationen",
  	errorFetchingRecord: "Es ist ein Fehler beim Abrufen des Eintrages aufgetreten. In der Konsole finden Sie weitere Informationen.",
  	noRecordsSelected: "Sie haben keine Einträge ausgewählt",
  	theseRecordsWillBeRemoved: "Der folgende Eintrag wird entfernt",
  	theseRecordsWillBeRemoved_plural: "Die folgenden Einträge werden entfernt",
  	pickSomeFirstToRemove: "Damit Einträge gelöscht werden können, müssen Sie diese vorher auswählen",
  	error404Resource: "Eintrag mit id: {{resourceId}} kann nicht gefunden werden",
  	error404Action: "Eintrag mit id: {{resourceId}} hat keine Aktion mit dem Namen: {{actionName}} oder Sie sind nicht berechtigt diese auszuführen!",
  	error404Record: "Eintrag mit id: {{resourceId}} hat keinen Eintrag mit der id: {{recordId}} oder Sie sind berechtigt diesen aufzurufen!",
  	seeConsoleForMore: "Siehe Entwicklerkonsole für weitere Details...",
  	noActionComponent: "Sie müssen eine Aktionskomponente für Ihre Aktion implementieren",
  	noRecordsInResource: "Es gibt keine Einträge in dieser Ressource",
  	noRecords: "Keine Einträge",
  	confirmDelete: "Wollen Sie wirklich diesen Eintrag löschen?",
  	welcomeOnBoard_title: "Willkommen an Bord!",
  	welcomeOnBoard_subtitle: "Jetzt gehören Sie zu uns! Wir haben ein paar Tipps für Sie vorbereitet, damit Sie loslegen können:",
  	addingResources_title: "Ressourcen Hinzufügen",
  	addingResources_subtitle: "So fügen Sie neue Ressourcen zur Seitenleiste hinzu",
  	customizeResources_title: "Ressourcen anpassen",
  	customizeResources_subtitle: "Definieren von Verhalten, Hinzufügen von Eigenschaften und mehr...",
  	customizeActions_title: "Aktionen anpassen",
  	customizeActions_subtitle: "Ändern bestehender und Hinzufügen neuer Aktionen",
  	writeOwnComponents_title: "Komponenten schreiben",
  	writeOwnComponents_subtitle: "Wie man das Aussehen von AdminJS ändert",
  	customDashboard_title: "Benutzerdefiniertes Dashboard",
  	customDashboard_subtitle: "So ändern Sie diese Ansicht und fügen neue Seiten in der Seitenleiste hinzu",
  	roleBasedAccess_title: "Rollenbasierte Zugriffskontrolle",
  	roleBasedAccess_subtitle: "Erstellen von Benutzerrollen und Berechtigungen in AdminJS",
  	community_title: "Treten Sie der Slack-Community bei",
  	community_subtitle: "Sprechen Sie mit den Entwicklern von AdminJS und anderen AdminJS-Anwendern",
  	foundBug_title: "Sie haben einen Fehler gefunden? Sie brauchen eine Verbesserung?",
  	foundBug_subtitle: "Erstellen Sie ein Ticket in unserem GitHub Repo",
  	needMoreSolutions_title: "Benötigen Sie fortschrittlichere Lösungen?",
  	needMoreSolutions_subtitle: "Wir sind hier, um Ihnen ein schönes UX/UI-Design und eine maßgeschneiderte Software zu bieten, die (nicht nur) auf AdminJS basiert.",
  	invalidCredentials: "Falsche E-Mail und/oder falsches Passwort",
  	pageNotFound_title: "Seite nicht gefunden",
  	pageNotFound_subtitle: "Buchseite <strong>\"{{pageName}}\"</strong> ist nicht vorhanden",
  	componentNotFound_title: "Keine Komponente angegeben",
  	componentNotFound_subtitle: "Sie müssen die Komponente angeben, die dieses Element rendert"
  };
  var deLocale = {
  	actions: actions$8,
  	buttons: buttons$8,
  	components: components$8,
  	labels: labels$8,
  	properties: properties$8,
  	resources: resources$8,
  	messages: messages$8
  };

  var actions$7 = {
  	"new": "Create new",
  	edit: "Edit",
  	show: "Show",
  	"delete": "Delete",
  	bulkDelete: "Delete all",
  	list: "List"
  };
  var buttons$7 = {
  	save: "Save",
  	addNewItem: "Add new item",
  	filter: "Filter",
  	filterActive: "Filter ({{count}})",
  	applyChanges: "Apply changes",
  	resetFilter: "Reset",
  	confirmRemovalMany: "Confirm the removal of {{count}} record",
  	confirmRemovalMany_plural: "Confirm the removal of {{count}} records",
  	logout: "Log out",
  	login: "Log in",
  	seeTheDocumentation: "See: <1>the documentation</1>",
  	createFirstRecord: "Create first record",
  	cancel: "Cancel",
  	confirm: "Confirm"
  };
  var components$7 = {
  	DropZone: {
  		placeholder: "Drop your file here, or click to browse",
  		acceptedSize: "Max size: {{maxSize}}",
  		acceptedType: "Supports: {{mimeTypes}}",
  		unsupportedSize: "File {{fileName}} is too big",
  		unsupportedType: "File {{fileName}} has unsupported type: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "German",
  			en: "English",
  			es: "Spanish",
  			it: "Italian",
  			ja: "Japanese",
  			pl: "Polish",
  			"pt-BR": "Portuguese (Brazil)",
  			ua: "Ukrainian",
  			"zh-CN": "Chinese"
  		}
  	},
  	Login: {
  		welcomeHeader: "Welcome",
  		welcomeMessage: "to AdminJS - the world's leading open-source auto-generated admin panel for your Node.js application that allows you to manage all your data in one place",
  		properties: {
  			email: "Email",
  			password: "Password"
  		},
  		loginButton: "Login"
  	}
  };
  var labels$7 = {
  	navigation: "Navigation",
  	pages: "Pages",
  	selectedRecords: "Selected ({{selected}})",
  	filters: "Filters",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "App: {{version}}",
  	dashboard: "Dashboard"
  };
  var properties$7 = {
  	length: "Length",
  	from: "From",
  	to: "To"
  };
  var resources$7 = {
  };
  var messages$7 = {
  	successfullyBulkDeleted: "Successfully removed {{count}} record",
  	successfullyBulkDeleted_plural: "Successfully removed {{count}} records",
  	successfullyDeleted: "Successfully deleted given record",
  	successfullyUpdated: "Successfully updated given record",
  	thereWereValidationErrors: "There are validation errors - check them out below",
  	forbiddenError: "You cannot perform action {{actionName}} on {{resourceId}}",
  	anyForbiddenError: "You cannot perform given action",
  	successfullyCreated: "Successfully created a new record",
  	bulkDeleteError: "There was an error deleting records. Check out console to see more information",
  	errorFetchingRecords: "There was an error fetching records. Check out console to see more information",
  	errorFetchingRecord: "There was an error fetching record. Check out console to see more information",
  	noRecordsSelected: "You have not selected any records",
  	theseRecordsWillBeRemoved: "Following record will be removed",
  	theseRecordsWillBeRemoved_plural: "Following records will be removed",
  	pickSomeFirstToRemove: "In order to remove records, you have to pick them first",
  	error404Resource: "Resource of given id: {{resourceId}} cannot be found",
  	error404Action: "Resource of given id: {{resourceId}} does not have an action with name: {{actionName}} or you are not authorized to use it!",
  	error404Record: "Resource of given id: {{resourceId}} does not have a record with id: {{recordId}} or you are not authorized to use it!",
  	seeConsoleForMore: "See development console for more details...",
  	noActionComponent: "You have to implement action component for your Action",
  	noRecordsInResource: "There are no records in this resource",
  	noRecords: "No records",
  	confirmDelete: "Do you really want to remove this item?",
  	welcomeOnBoard_title: "Welcome on Board!",
  	welcomeOnBoard_subtitle: "Now you are one of us! We prepared a few tips for you to start:",
  	addingResources_title: "Adding Resources",
  	addingResources_subtitle: "How to add new resources to the sidebar",
  	customizeResources_title: "Customize Resources",
  	customizeResources_subtitle: "Defining behavior, adding properties and more...",
  	customizeActions_title: "Customize Actions",
  	customizeActions_subtitle: "Modifying existing actions and adding new",
  	writeOwnComponents_title: "Write Components",
  	writeOwnComponents_subtitle: "How to modify the Look and Feel of AdminJS",
  	customDashboard_title: "Custom Dashboard",
  	customDashboard_subtitle: "How to modify this view and add new Pages on the sidebar",
  	roleBasedAccess_title: "Role-Based Access Control",
  	roleBasedAccess_subtitle: "Create user roles and permissions in AdminJS",
  	community_title: "Join the slack community",
  	community_subtitle: "Talk with the creators of AdminJS and other AdminJS users",
  	foundBug_title: "Found a Bug? need improvement?",
  	foundBug_subtitle: "Raise an issue on our GitHub repo",
  	needMoreSolutions_title: "Need more advanced solutions?",
  	needMoreSolutions_subtitle: "We are here to provide you a beautiful UX/UI design and tailor made software based (not only) on AdminJS",
  	invalidCredentials: "Wrong email and/or password",
  	keyPlaceholder: "KEY",
  	valuePlaceholder: "VALUE",
  	initialKey: "Key-{{number}}",
  	keyInUse: "Object keys must be unique",
  	keyValuePropertyDefaultDescription: "All values are stored as text. Keys must be unique, duplicate keys will not be saved.",
  	pageNotFound_title: "Page not found",
  	pageNotFound_subtitle: "Page <strong>\"{{pageName}}\"</strong> does not exist",
  	componentNotFound_title: "No component specified",
  	componentNotFound_subtitle: "You have to specify component which will render this element"
  };
  var enLocale = {
  	actions: actions$7,
  	buttons: buttons$7,
  	components: components$7,
  	labels: labels$7,
  	properties: properties$7,
  	resources: resources$7,
  	messages: messages$7
  };

  var actions$6 = {
  	"new": "Crear nuevo",
  	edit: "Editar",
  	show: "Espectáculo",
  	"delete": "Borrar",
  	bulkDelete: "Eliminar todos",
  	list: "Lista"
  };
  var buttons$6 = {
  	save: "Guardar",
  	addNewItem: "Agregar nuevo elemento",
  	filter: "Filtrar",
  	filterActive: "Filtrar ({{count}})",
  	applyChanges: "Aplicar cambios",
  	resetFilter: "Reiniciar",
  	confirmRemovalMany: "Confirmar la eliminación de {{count}} registro",
  	confirmRemovalMany_plural: "Confirmar la eliminación de {{count}} registros",
  	logout: "Cerrar sesión",
  	login: "Acceso",
  	seeTheDocumentation: "Ver: <1>la documentación</1>",
  	createFirstRecord: "Crear primer registro",
  	cancel: "Cancelar",
  	confirm: "Confirmar"
  };
  var components$6 = {
  	DropZone: {
  		placeholder: "Suelte su archivo aquí, o haga clic para navegar",
  		acceptedSize: "Tamaño máximo: {{maxSize}}",
  		acceptedType: "Apoya: {{mimeTypes}}",
  		unsupportedSize: "Archivo {{fileName}} es demasiado grande",
  		unsupportedType: "Archivo {{fileName}} tiene un tipo no compatible: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Alemán",
  			en: "Inglés",
  			es: "Español",
  			it: "Italiano",
  			ja: "Japonés",
  			pl: "Polaco",
  			"pt-BR": "Portugués (Brasil)",
  			ua: "Ucranio",
  			"zh-CN": "Chino"
  		}
  	},
  	Login: {
  		welcomeHeader: "Bienvenido",
  		welcomeMessage: "a AdminJS: el panel de administración generado automáticamente de código abierto líder en el mundo para su aplicación Node.js que le permite administrar todos sus datos en un solo lugar",
  		properties: {
  			email: "Correo electrónico",
  			password: "Contraseña"
  		},
  		loginButton: "Conectarse"
  	}
  };
  var labels$6 = {
  	navigation: "Navegación",
  	pages: "Paginas",
  	selectedRecords: "Seleccionado ({{selected}})",
  	filters: "filtros",
  	adminVersion: "Administración: {{version}}",
  	appVersion: "aplicación: {{version}}",
  	dashboard: "Panel"
  };
  var properties$6 = {
  	length: "Longitud",
  	from: "De",
  	to: "A"
  };
  var resources$6 = {
  };
  var messages$6 = {
  	successfullyBulkDeleted: "eliminado con éxito {{count}} registro",
  	successfullyBulkDeleted_plural: "eliminado con éxito {{count}} registros",
  	successfullyDeleted: "Registro dado eliminado con éxito",
  	successfullyUpdated: "Registro dado actualizado con éxito",
  	thereWereValidationErrors: "Hay errores de validación. Compruébelos a continuación.",
  	forbiddenError: "No puede realizar la acción {{actionName}} en {{resourceId}}",
  	anyForbiddenError: "No puede realizar la acción dada",
  	successfullyCreated: "Se creó con éxito un nuevo registro",
  	bulkDeleteError: "Hubo un error al eliminar los registros. Consulte la consola para ver más información.",
  	errorFetchingRecords: "Se produjo un error al obtener registros. Consulte la consola para ver más información.",
  	errorFetchingRecord: "Hubo un error al obtener el registro. Consulta la consola para ver más información.",
  	noRecordsSelected: "No ha seleccionado ningún registro",
  	theseRecordsWillBeRemoved: "Se eliminará el siguiente registro",
  	theseRecordsWillBeRemoved_plural: "Se eliminarán los siguientes registros",
  	pickSomeFirstToRemove: "Para eliminar registros, primero debe elegirlos",
  	error404Resource: "Recurso de identificación dada: {{resourceId}} no pudo ser encontrado",
  	error404Action: "Recurso de identificación dada: {{resourceId}} no tiene una acción con nombre: {{actionName}} ¡o usted no está autorizado a usarlo!",
  	error404Record: "Recurso de identificación dada: {{resourceId}} no tiene registro con id: {{recordId}} ¡o usted no está autorizado a usarlo!",
  	seeConsoleForMore: "Consulte la consola de desarrollo para obtener más detalles...",
  	noActionComponent: "Tienes que implementar el componente de acción para tu Acción",
  	noRecordsInResource: "No hay registros en este recurso",
  	noRecords: "No hay registros",
  	confirmDelete: "¿Realmente desea eliminar este elemento?",
  	welcomeOnBoard_title: "¡La bienvenida a bordo!",
  	welcomeOnBoard_subtitle: "¡Ahora eres uno de nosotros! ",
  	addingResources_title: "Adición de recursos",
  	addingResources_subtitle: "Cómo agregar nuevos recursos a la barra lateral",
  	customizeResources_title: "Personalizar recursos",
  	customizeResources_subtitle: "Definición de comportamiento, adición de propiedades y más...",
  	customizeActions_title: "Personalizar acciones",
  	customizeActions_subtitle: "Modificación de acciones existentes y adición de nuevas",
  	writeOwnComponents_title: "Escribir componentes",
  	writeOwnComponents_subtitle: "Cómo modificar la apariencia de AdminJS",
  	customDashboard_title: "Tablero personalizado",
  	customDashboard_subtitle: "Cómo modificar esta vista y agregar nuevas páginas en la barra lateral",
  	roleBasedAccess_title: "Control de acceso basado en roles",
  	roleBasedAccess_subtitle: "Crear roles de usuario y permisos en AdminJS",
  	community_title: "Únete a la comunidad de holgura",
  	community_subtitle: "Hable con los creadores de AdminJS y otros usuarios de AdminJS",
  	foundBug_title: "¿Encontraste un error? ",
  	foundBug_subtitle: "Plantear un problema en nuestro repositorio de GitHub",
  	needMoreSolutions_title: "¿Necesita soluciones más avanzadas?",
  	needMoreSolutions_subtitle: "Estamos aquí para brindarle un hermoso diseño de UX/UI y un software personalizado basado (no solo) en AdminJS",
  	invalidCredentials: "Email y/o contraseña incorrectos",
  	keyPlaceholder: "LLAVE",
  	valuePlaceholder: "VALOR",
  	initialKey: "Llave-{{number}}",
  	keyInUse: "Las claves de objeto deben ser únicas.",
  	keyValuePropertyDefaultDescription: "Todos los valores se almacenan como texto. ",
  	pageNotFound_title: "Página no encontrada",
  	pageNotFound_subtitle: "Página <strong>\"{{pageName}}\"</strong> no existe",
  	componentNotFound_title: "Ningún componente especificado",
  	componentNotFound_subtitle: "Tienes que especificar el componente que representará este elemento."
  };
  var esLocale = {
  	actions: actions$6,
  	buttons: buttons$6,
  	components: components$6,
  	labels: labels$6,
  	properties: properties$6,
  	resources: resources$6,
  	messages: messages$6
  };

  var actions$5 = {
  	"new": "Crea nuovo",
  	edit: "Modifica",
  	show: "Mostra",
  	"delete": "Elimina",
  	bulkDelete: "Elimina selezionati",
  	list: "Lista"
  };
  var buttons$5 = {
  	save: "Salva",
  	addNewItem: "Aggiungi nuovo elemento",
  	filter: "Filtro",
  	filterActive: "Filtro ({{count}})",
  	applyChanges: "Applica modifiche",
  	resetFilter: "Resetta filtro",
  	confirmRemovalMany: "Conferma la rimozione di  {{count}} elementi",
  	confirmRemovalMany_plural: "Conferma la rimozione di  {{count}} elementi",
  	logout: "Esci",
  	login: "Accedi",
  	seeTheDocumentation: "Vedi: <1>La documentazione</1>",
  	createFirstRecord: "Crea il primo elemento",
  	cancel: "Annulla",
  	confirm: "Confermare"
  };
  var components$5 = {
  	DropZone: {
  		placeholder: "Trascina qui il tuo file o fai clic per sfogliarlo",
  		acceptedSize: "Dimensione massima: {{maxSize}}",
  		acceptedType: "Supporta: {{mimeTypes}}",
  		unsupportedSize: "Il file {{fileName}} è troppo grande",
  		unsupportedType: "Il file {{fileName}} ha un tipo non supportato: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Tedesco",
  			en: "Inglese",
  			es: "spagnolo",
  			it: "Italiano",
  			ja: "Giapponese",
  			pl: "Polacco",
  			"pt-BR": "Portoghese (Brasile)",
  			ua: "ucraino",
  			"zh-CN": "Cinese"
  		}
  	},
  	Login: {
  		welcomeHeader: "Benvenuto",
  		welcomeMessage: "a Adminjs – il principale pannello di amministrazione open-source per la tua applicazione Node.js che ti consente di gestire tutti i tuoi dati in un unico luogo",
  		properties: {
  			email: "Email",
  			password: "Password"
  		},
  		loginButton: "Accedi"
  	}
  };
  var labels$5 = {
  	navigation: "Navigazione",
  	pages: "Pagine",
  	selectedRecords: "Selezionati ({{selected}})",
  	filters: "Filtri",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "App: {{version}}",
  	dashboard: "Dashboard"
  };
  var properties$5 = {
  	length: "Lunghezza",
  	from: "Da",
  	to: "A"
  };
  var resources$5 = {
  };
  var messages$5 = {
  	successfullyBulkDeleted: "Rimossi con successo {{count}} Elementi",
  	successfullyBulkDeleted_plural: "Rimossi con successo {{count}} Elementi",
  	successfullyDeleted: "Elemento selezionato rimosso con successo",
  	successfullyUpdated: "Elemento aggiornato rimosso con successo",
  	thereWereValidationErrors: "Ci sono degli errori di validazione - Controllali sotto",
  	forbiddenError: "Non puoi eseguire {{actionName}} su {{resourceId}}",
  	anyForbiddenError: "Non puoi eseguire questa azione",
  	successfullyCreated: "Nuovo elemento creato con successo",
  	bulkDeleteError: "Si è verificato un errore durante la rimozione degli elementi, controlla la console per maggiori informazioni",
  	errorFetchingRecords: "Si è verificato un errore durante la raccolta degli elementi, controlla la console per maggiori informazioni",
  	errorFetchingRecord: "Si è verificato un errore durante la raccolta degli elementi, controlla la console per maggiori informazioni",
  	noRecordsSelected: "Non hai selezionato nessun elemento",
  	theseRecordsWillBeRemoved: "I seguenti elementi verranno rimossi",
  	theseRecordsWillBeRemoved_plural: "I seguenti elementi verranno rimossi",
  	pickSomeFirstToRemove: "Per rimuovere nuovi elementi, devi prima aggiungerne almeno uno",
  	error404Resource: "La risorsa: {{resourceId}} Non può essere trovata",
  	error404Action: "l' azione: {{resourceId}} non ha un azione col nome di : {{actionName}} o non sei autorizzato ad usarla!",
  	error404Record: "La risorsa: {{resourceId}} non ha un elemento: {{recordId}} o non sei autorizzato ad usarla!",
  	seeConsoleForMore: "Guarda la console di sviluppo per maggiori dettagli...",
  	noActionComponent: "Devi implementare un componente per la tua zione",
  	noRecordsInResource: "Non ci sono elementi in questa risorsa",
  	noRecords: "Nessun elemento",
  	confirmDelete: "Sicuro di voler eleminare questo elemento?",
  	welcomeOnBoard_title: "Benvenuto a bordo!",
  	welcomeOnBoard_subtitle: "Sei ora uno di noi! Preparati per alcuni consigli per iniziare:",
  	addingResources_title: "Aggiungendo elementi",
  	addingResources_subtitle: "Come aggiungere nuove risorse nella colonna laterale",
  	customizeResources_title: "Personalizzare le risorse",
  	customizeResources_subtitle: "Definire il comportamento, aggiungere propietà e altro...",
  	customizeActions_title: "Personalizzare le azioni",
  	customizeActions_subtitle: "Modificare azioni esistenti e crearne delle nuove",
  	writeOwnComponents_title: "Scrivi componenti personalizzati",
  	writeOwnComponents_subtitle: "Come modificare il look e il feel di Adminjs",
  	customDashboard_title: "Dashboard personalizzata",
  	customDashboard_subtitle: "Come modificare questa vista e aggiungere pagine in basso a sinistra",
  	roleBasedAccess_title: "Accesso basato su ruoli",
  	roleBasedAccess_subtitle: "Crea utenti e permessi su AdminJS",
  	community_title: "Entra nella community di slack",
  	community_subtitle: "Parla con i creatori di adminJS e altri utenti",
  	foundBug_title: "Trovato un bug? Ti serve un implementazione?",
  	foundBug_subtitle: "Apri una segnalazione sul nostro GitHub",
  	needMoreSolutions_title: "Ti servono soluzioni più avanzate?",
  	needMoreSolutions_subtitle: "Siamo qui per fortnirti una bella UI/UX e un software personalizzato (non solo) su AdminJS",
  	invalidCredentials: "E-mail o password errati",
  	pageNotFound_title: "pagina non trovata",
  	pageNotFound_subtitle: "Pagina <strong>\"{{pageName}}\"</strong> non esiste",
  	componentNotFound_title: "Nessun componente specificato",
  	componentNotFound_subtitle: "Devi specificare il componente che renderà questo elemento"
  };
  var itLocale = {
  	actions: actions$5,
  	buttons: buttons$5,
  	components: components$5,
  	labels: labels$5,
  	properties: properties$5,
  	resources: resources$5,
  	messages: messages$5
  };

  var actions$4 = {
  	"new": "新規作成",
  	edit: "編集",
  	show: "表示",
  	"delete": "削除",
  	bulkDelete: "すべて削除",
  	list: "一覧"
  };
  var buttons$4 = {
  	save: "保存",
  	addNewItem: "新しいアイテムを追加",
  	filter: "フィルタ",
  	filterActive: "フィルタ ({{count}})",
  	applyChanges: "変更を適用",
  	resetFilter: "リセット",
  	confirmRemovalMany: "{{count}} 件のレコードを削除しますか",
  	confirmRemovalMany_plural: "{{count}} 件のレコードを削除しますか",
  	logout: "ログアウト",
  	login: "ログイン",
  	seeTheDocumentation: "参照: <1>ドキュメンテーション</1>",
  	createFirstRecord: "最初のレコードを作成",
  	cancel: "キャンセル",
  	confirm: "確認"
  };
  var components$4 = {
  	DropZone: {
  		placeholder: "ファイルをここにドロップするか、クリックしてブラウズ",
  		acceptedSize: "最大サイズ: {{maxSize}}",
  		acceptedType: "サポート: {{mimeTypes}}",
  		unsupportedSize: "ファイル {{fileName}} は大きすぎます",
  		unsupportedType: "ファイル {{fileName}} の種類はサポートされていません: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "ドイツ語",
  			en: "英語",
  			es: "スペイン語",
  			it: "イタリア語",
  			ja: "日本語",
  			pl: "ポーランド語",
  			"pt-BR": "ポルトガル語（ブラジル）",
  			ua: "ウクライナ語",
  			"zh-CN": "中国語"
  		}
  	},
  	Login: {
  		welcomeHeader: "ようこそ",
  		welcomeMessage: "AdminJSへようこそ。これは、Node.jsアプリケーションのための世界トップクラスのオープンソースの自動生成管理パネルで、すべてのデータを1つの場所で管理できます。",
  		properties: {
  			email: "メールアドレス",
  			password: "パスワード"
  		},
  		loginButton: "ログイン"
  	}
  };
  var labels$4 = {
  	navigation: "ナビゲーション",
  	pages: "ページ",
  	selectedRecords: "選択済み（{{selected}}）",
  	filters: "フィルタ",
  	adminVersion: "管理者: {{version}}",
  	appVersion: "アプリ: {{version}}",
  	dashboard: "ダッシュボード"
  };
  var properties$4 = {
  	length: "長さ",
  	from: "から",
  	to: "まで"
  };
  var resources$4 = {
  };
  var messages$4 = {
  	successfullyBulkDeleted: "{{count}} 件のレコードを正常に削除しました",
  	successfullyBulkDeleted_plural: "{{count}} 件のレコードを正常に削除しました",
  	successfullyDeleted: "指定されたレコードを正常に削除しました",
  	successfullyUpdated: "指定されたレコードを正常に更新しました",
  	thereWereValidationErrors: "検証エラーがあります - 以下を確認してください",
  	forbiddenError: "{{actionName}} アクションを {{resourceId}} で実行することはできません",
  	anyForbiddenError: "指定されたアクションは実行できません",
  	successfullyCreated: "新しいレコードを正常に作成しました",
  	bulkDeleteError: "レコードの削除中にエラーが発生しました。詳細についてはコンソールを確認してください",
  	errorFetchingRecords: "レコードの取得中にエラーが発生しました。詳細についてはコンソールを確認してください",
  	errorFetchingRecord: "レコードの取得中にエラーが発生しました。詳細についてはコンソールを確認してください",
  	noRecordsSelected: "レコードが選択されていません",
  	theseRecordsWillBeRemoved: "以下のレコードが削除されます",
  	theseRecordsWillBeRemoved_plural: "以下のレコードが削除されます",
  	pickSomeFirstToRemove: "レコードを削除するには、まずそれらを選択する必要があります",
  	error404Resource: "指定されたIDのリソースは見つかりません: {{resourceId}}",
  	error404Action: "指定されたIDのリソースには {{actionName}} という名前のアクションが存在しないか、使用する権限がありません！",
  	error404Record: "指定されたIDのリソースには {{recordId}} というIDのレコードが存在しないか、使用する権限がありません！",
  	seeConsoleForMore: "詳細情報は開発コンソールを参照してください...",
  	noActionComponent: "アクションに対するアクションコンポーネントを実装する必要があります",
  	noRecordsInResource: "このリソースにはレコードがありません",
  	noRecords: "レコードがありません",
  	confirmDelete: "本当にこのアイテムを削除しますか？",
  	welcomeOnBoard_title: "ようこそ！",
  	welcomeOnBoard_subtitle: "これで私たちの一員です！始めるためのいくつかのヒントを用意しました：",
  	addingResources_title: "リソースの追加",
  	addingResources_subtitle: "サイドバーに新しいリソースを追加する方法",
  	customizeResources_title: "リソースのカスタマイズ",
  	customizeResources_subtitle: "動作の定義、プロパティの追加など...",
  	customizeActions_title: "アクションのカスタマイズ",
  	customizeActions_subtitle: "既存のアクションの変更と新規追加",
  	writeOwnComponents_title: "コンポーネントの作成",
  	writeOwnComponents_subtitle: "AdminJSの外観と操作性を変更する方法",
  	customDashboard_title: "カスタムダッシュボード",
  	customDashboard_subtitle: "このビューの変更とサイドバーに新しいページを追加する方法",
  	roleBasedAccess_title: "ロールベースのアクセス制御",
  	roleBasedAccess_subtitle: "AdminJSでユーザーロールとアクセス権を作成する方法",
  	community_title: "Slackコミュニティに参加",
  	community_subtitle: "AdminJSのクリエーターおよび他のAdminJSユーザーとの会話",
  	foundBug_title: "バグを見つけましたか？改善が必要ですか？",
  	foundBug_subtitle: "GitHubリポジトリで問題を提起してください",
  	needMoreSolutions_title: "より高度なソリューションが必要ですか？",
  	needMoreSolutions_subtitle: "美しいUX/UIデザインと、AdminJSをベースにした（だけでない）ソフトウェアを提供します",
  	invalidCredentials: "間違ったメールアドレスと/またはパスワード",
  	keyPlaceholder: "キー",
  	valuePlaceholder: "値",
  	initialKey: "キー-{{number}}",
  	keyInUse: "オブジェクトキーは一意でなければなりません",
  	keyValuePropertyDefaultDescription: "すべての値はテキストとして保存されます。キーは一意でなければならず、重複するキーは保存されません。",
  	pageNotFound_title: "ページが見つかりません",
  	pageNotFound_subtitle: "ページ <strong>\"{{pageName}}\"</strong> は存在しません",
  	componentNotFound_title: "指定されたコンポーネントがありません",
  	componentNotFound_subtitle: "この要素をレンダリングするコンポーネントを指定する必要があります"
  };
  var jaLocale = {
  	actions: actions$4,
  	buttons: buttons$4,
  	components: components$4,
  	labels: labels$4,
  	properties: properties$4,
  	resources: resources$4,
  	messages: messages$4
  };

  var actions$3 = {
  	"new": "Nowy",
  	edit: "Edycja",
  	show: "Podgląd",
  	"delete": "Usuń",
  	bulkDelete: "Usuń wszystko",
  	list: "Lista"
  };
  var buttons$3 = {
  	save: "Zapisz",
  	addNewItem: "Nowy",
  	filter: "Filtry",
  	filterActive: "Filtry ({{count}})",
  	applyChanges: "Zastosuj zmiany",
  	resetFilter: "Wyczyść",
  	confirmRemovalMany: "Potwierdź usunięcie {{count}} pozycji",
  	confirmRemovalMany_plural: "Potwierdź usunięcie {{count}} pozycji",
  	logout: "Wyloguj",
  	login: "Zaloguj",
  	seeTheDocumentation: "Zajrzyj: <1>do dokumentacji</1>",
  	createFirstRecord: "Utwórz pierwszy rekord",
  	cancel: "Anuluj",
  	confirm: "Potwierdź"
  };
  var labels$3 = {
  	navigation: "Nawigacja",
  	pages: "Strony",
  	selectedRecords: "Wybrano ({{selected}})",
  	filters: "Filtry",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "Aplikacja: {{version}}"
  };
  var properties$3 = {
  	length: "Długość",
  	from: "Od",
  	to: "Do"
  };
  var components$3 = {
  	DropZone: {
  		placeholder: "Przeciągnij plik tutaj lub kliknij aby wybrać",
  		acceptedSize: "Maks. rozmiar: {{maxSize}}",
  		acceptedType: "Dozwolone pliki: {{mimeTypes}}",
  		unsupportedSize: "Plik {{fileName}} jest zbyt duży",
  		unsupportedType: "Plik {{fileName}} jest niedozwolonego typu: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Niemiecki",
  			en: "Angielski",
  			es: "Hiszpański",
  			it: "Włoski",
  			ja: "Japoński",
  			pl: "Polski",
  			"pt-BR": "Portugalski (Brazylia)",
  			ua: "Ukraiński",
  			"zh-CN": "chiński"
  		}
  	},
  	Login: {
  		welcomeHeader: "Witaj",
  		welcomeMessage: "AdminJS - najlepszy admin framework dla aplikacji Node.js, oparty na React.",
  		properties: {
  			email: "Email",
  			password: "Hasło"
  		},
  		loginButton: "Zaloguj"
  	}
  };
  var resources$3 = {
  };
  var messages$3 = {
  	successfullyBulkDeleted: "Poprawnie usunięto {{count}} rekordów",
  	successfullyBulkDeleted_plural: "Poprawnie usunięto {{count}} rekordów",
  	successfullyDeleted: "Poprawnie usunięto wybrany rekord",
  	successfullyUpdated: "Poprawnie zaktualizowano wybrany rekord",
  	thereWereValidationErrors: "Błędy walidacji - sprawdź poniżej",
  	forbiddenError: "Nie masz uprawnień do akcji {{actionName}} na {{resourceId}}",
  	anyForbiddenError: "Nie masz uprawnień tej akcji.",
  	successfullyCreated: "Poprawnie utworzono nowy rekord",
  	bulkDeleteError: "Wystąpiły błędy podczas usuwania rekordów. Przejrzyj wpisy w konsoli aby zobaczyć szczegóły.",
  	errorFetchingRecords: "Wystąpiły błędy podczas pobierania danych. Przejrzyj wpisy w konsoli aby zobaczyć szczegóły.",
  	errorFetchingRecord: "Wystąpiły błędy podczas pobierania rekordu. Przejrzyj wpisy w konsoli aby zobaczyć szczegóły.",
  	noRecordsSelected: "NIe zostały wybrane żadne rekordy.",
  	theseRecordsWillBeRemoved: "Wybrany rekord zostanie usunięty.",
  	theseRecordsWillBeRemoved_plural: "Wybrane rekordy zostanią usunięte.",
  	pickSomeFirstToRemove: "Aby usunąć rekordy należy je najpierw wybrać",
  	error404Resource: "Nie można znaleźć zasobu o id: {{resourceId}}",
  	error404Action: "Do zasobu o id: {{resourceId}} nie została przypisana akcja {{actionName}} lub nie masz uprawnień do jej użycia.",
  	error404Record: "Zasób o id: {{resourceId}} nie zaiera rekordu o id: {{recordId}} lub nie masz do niego dostępu.",
  	seeConsoleForMore: "Przejrzyj zapisy w konsoli aby zobaczyć więcej szczególów ...",
  	noActionComponent: "Musisz zaiplementować komponent dla twojej akcji.",
  	noRecordsInResource: "Ten zasób nie posiada rekordów.",
  	noRecords: "Brak danych.",
  	confirmDelete: "Czy potwierdzasz usunięcie tej pozycji?",
  	welcomeOnBoard_title: "Witamy na pokładzie!",
  	welcomeOnBoard_subtitle: "Od teraz jesteś jednym z nas! Przygotowaliśmy dla Ciebie kilka wskazówek:",
  	addingResources_title: "Dodawanie zasobów",
  	addingResources_subtitle: "Jak dodać nowe zasoby do menu bocznego",
  	customizeResources_title: "Indywidualne zasoby",
  	customizeResources_subtitle: "Definiowanie sposobu zachowania, dodawanie właściwości i więcej...",
  	customizeActions_title: "Indywidualne akcje",
  	customizeActions_subtitle: "Modyfikowanie istniejących akcji i tworzenie nowych",
  	writeOwnComponents_title: "Tworzenie nowych komponentów",
  	writeOwnComponents_subtitle: "Jak zmodyfikować wygląd i zachowanie AdminJS?",
  	customDashboard_title: "Indywidualny panel sterowania",
  	customDashboard_subtitle: "Jak zmodyfikować widok i dodać nowe strony do panelu bocznego",
  	roleBasedAccess_title: "Kontrola dostępu oparta o role",
  	roleBasedAccess_subtitle: "Tworzenie roli użytkownika i uprawnień w AdminJS",
  	community_title: "Dołącz do zespołu na Slack.",
  	community_subtitle: "Wymieniaj informacje z twórcami AdminJS i innymi użytkownikami.",
  	foundBug_title: "Znalazłeś błąd? Potrzebujesz nowych funkcji?",
  	foundBug_subtitle: "Zgłoś problem w repozytoriun GitHub.",
  	needMoreSolutions_title: "Szukasz innych rozwiązań?",
  	needMoreSolutions_subtitle: "Jesteśmy tutaj, aby dostarczyć Ci wpaniały projekt UX/UI i dostosować do Twoich potrzeb panel AdminJS",
  	invalidCredentials: "Błędny email i/lub hasło",
  	pageNotFound_title: "Strona nie znaleziona",
  	pageNotFound_subtitle: "Strona <strong>\"{{pageName}}\"</strong> nie istnieje",
  	componentNotFound_title: "Nie określono komponentu",
  	componentNotFound_subtitle: "Musisz określić komponent, który wyrenderuje ten element"
  };
  var plLocale = {
  	actions: actions$3,
  	buttons: buttons$3,
  	labels: labels$3,
  	properties: properties$3,
  	components: components$3,
  	resources: resources$3,
  	messages: messages$3
  };

  var actions$2 = {
  	"new": "Criar novo(a)",
  	edit: "Editar",
  	show: "Exibir",
  	"delete": "Excluir",
  	bulkDelete: "Excluir tudo",
  	list: "Listar"
  };
  var buttons$2 = {
  	save: "Salvar",
  	addNewItem: "Adicionar Novo Item",
  	filter: "Filtrar",
  	filterActive: "Filtrar ({{count}})",
  	applyChanges: "Aplicar mudanças",
  	resetFilter: "Redefinir",
  	confirmRemovalMany: "Confirma a remoção de {{count}} registro",
  	confirmRemovalMany_plural: "Confirma a remoção de {{count}} registros",
  	logout: "Sair",
  	login: "Entrar",
  	seeTheDocumentation: "Ver: <1>a documentação</1>",
  	createFirstRecord: "Criar Primeiro Registro"
  };
  var components$2 = {
  	DropZone: {
  		placeholder: "Solte seu arquivo aqui ou clique para navegar",
  		acceptedSize: "Tamanho máximo: {{maxSize}}",
  		acceptedType: "Suporta: {{mimeTypes}}",
  		unsupportedSize: "O arquivo {{fileName}} é muito grande",
  		unsupportedType: "O arquivo {{fileName}} tem um tipo não compatível: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Alemão",
  			en: "Inglês",
  			es: "Espanhol",
  			it: "Italiano",
  			ja: "Japonês",
  			pl: "Polonês",
  			"pt-BR": "Português (Brasil)",
  			ua: "Ucraniano",
  			"zh-CN": "Chinês"
  		}
  	},
  	Login: {
  		welcomeHeader: "Bem-vindo",
  		welcomeMessage: "Ao AdminJS - o melhor framework admin para aplicações Node.js, baseado em React.",
  		properties: {
  			email: "Email",
  			password: "Senha"
  		},
  		loginButton: "Login"
  	}
  };
  var labels$2 = {
  	navigation: "Navegação",
  	pages: "Páginas",
  	selectedRecords: "Selecionado ({{selected}})",
  	filters: "Filtros",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "App: {{version}}",
  	dashboard: "Dashboard"
  };
  var properties$2 = {
  	length: "Tamanho",
  	from: "De",
  	to: "Até"
  };
  var resources$2 = {
  };
  var messages$2 = {
  	successfullyBulkDeleted: "{{count}} registro removido com sucesso",
  	successfullyBulkDeleted_plural: "{{count}} registros removidos com sucesso",
  	successfullyDeleted: "Registro excluído com sucesso",
  	successfullyUpdated: "Registro atualizado com sucesso",
  	thereWereValidationErrors: "Existem erros de validação - confira-os abaixo",
  	forbiddenError: "Você não pode executar a ação {{actionName}} em {{resourceId}}",
  	anyForbiddenError: "Você não pode executar a ação solicitada",
  	successfullyCreated: "Novo registro criado com sucesso",
  	bulkDeleteError: "Houve um erro ao excluir os registros. Verifique os logs para mais informações",
  	errorFetchingRecords: "Houve um erro ao obter os registros. Verifique os logs para mais informações",
  	errorFetchingRecord: "Houve um erro ao obter o registro, Verifique os logs para mais informações",
  	noRecordsSelected: "Você não selecionou nenhum registro",
  	theseRecordsWillBeRemoved: "O registro a seguir será excluído",
  	theseRecordsWillBeRemoved_plural: "Os registros a seguir serão excluídos",
  	pickSomeFirstToRemove: "Para remover registros você precisa selecioná-los primeiro",
  	error404Resource: "Recurso indentificado pelo id: {{resourceId}} não pôde ser encontrado",
  	error404Action: "Recurso indentificado pelo id: {{resourceId}} não possui uma ação com nome: {{actionName}} ou você não está autorizado a usá-la!",
  	error404Record: "Recurso indentificado pelo id: {{resourceId}} não possui um registro com id: {{recordId}} ou você não está autorizado a acessá-lo!",
  	seeConsoleForMore: "Veja o console de desenvolvimento para mais detalhes...",
  	noActionComponent: "Você precisa implementar componente de ação para a sua Ação",
  	noRecordsInResource: "Não existem registros neste recurso",
  	noRecords: "Nenhum registro",
  	confirmDelete: "Você tem certeza que deseja remover este item? Essa ação é irreversível",
  	welcomeOnBoard_title: "Bem-vindo à bordo!",
  	welcomeOnBoard_subtitle: "Agora você é um de nós! Preparamos algumas dicas para você começar:",
  	addingResources_title: "Adicionando Recursos",
  	addingResources_subtitle: "Como adicionar novos recursos à barra lateral",
  	customizeResources_title: "Personalizar Recursos",
  	customizeResources_subtitle: "Definindo comportamento, adicionando propriedades e mais...",
  	customizeActions_title: "Personalizar Ações",
  	customizeActions_subtitle: "Modificar ações existentes e adicionar novas",
  	writeOwnComponents_title: "Escrever Componentes",
  	writeOwnComponents_subtitle: "Como modificar o visual do AdminJS",
  	customDashboard_title: "Dashboard Personalizado",
  	customDashboard_subtitle: "Como modificar esta página e adicionar novas páginas à barra lateral",
  	roleBasedAccess_title: "Controle de Acesso Baseado em Perfil",
  	roleBasedAccess_subtitle: "Criar perfis de usuário e permissões no AdminJS",
  	community_title: "Junte-se à comunidade slack",
  	community_subtitle: "Fale com os criadores do AdminJS e outros usuários do AdminJS",
  	foundBug_title: "Encontrou um Bug? Precisa de alguma melhoria?",
  	foundBug_subtitle: "Levante um issue em nosso repositório no GitHub",
  	needMoreSolutions_title: "Precisa de mais soluções avançadas?",
  	needMoreSolutions_subtitle: "Estamos aqui para te entregar um belo desenho de UX/UI e software feito sob medida baseado (não apenas) no AdminJS",
  	invalidCredentials: "Nome de usuário e/ou senha incorretos",
  	pageNotFound_title: "Página não encontrada",
  	pageNotFound_subtitle: "Página <strong>\"{{pageName}}\"</strong> não existe",
  	componentNotFound_title: "Nenhum componente especificado",
  	componentNotFound_subtitle: "Você tem que especificar o componente que renderizará este elemento"
  };
  var ptBrLocale = {
  	actions: actions$2,
  	buttons: buttons$2,
  	components: components$2,
  	labels: labels$2,
  	properties: properties$2,
  	resources: resources$2,
  	messages: messages$2
  };

  var actions$1 = {
  	"new": "Створити новий",
  	edit: "Редагувати",
  	show: "Показати",
  	"delete": "Видалити",
  	bulkDelete: "Видалити всі",
  	list: "Список"
  };
  var buttons$1 = {
  	save: "Зберегти",
  	addNewItem: "Додати новий елемент",
  	filter: "Фільтр",
  	filterActive: "Фільтр ({{count}})",
  	applyChanges: "Застосувати зміни",
  	resetFilter: "Очистити фільтри",
  	confirmRemovalMany: "Підтвердити видалення {{count}} запису",
  	confirmRemovalMany_plural: "Підтвердити видалення {{count}} записів",
  	logout: "Вийти",
  	login: "Увійти",
  	seeTheDocumentation: "Дивіться: <1>документація</1>",
  	createFirstRecord: "Створити перший запис",
  	contactUs: "Зв'язатися з нами",
  	cancel: "Cкасувати",
  	confirm: "Підтвердити"
  };
  var components$1 = {
  	DropZone: {
  		placeholder: "Перетягніть свій файл сюди або натисніть, щоб переглянути",
  		acceptedSize: "Максимальний розмір: {{maxSize}}",
  		acceptedType: "Підтримує: {{mimeTypes}}",
  		unsupportedSize: "Файл {{fileName}} завеликий",
  		unsupportedType: "Тип файлу {{fileName}} не підтримується: {{fileType}}"
  	},
  	LanguageSelector: {
  		availableLanguages: {
  			de: "Німецький",
  			en: "англійська",
  			es: "Іспанська",
  			it: "італійська",
  			ja: "японський",
  			pl: "польський",
  			"pt-BR": "португальська (Бразилія)",
  			ua: "українська",
  			"zh-CN": "китайський"
  		}
  	},
  	Login: {
  		welcomeHeader: "Ласкаво просимо",
  		welcomeMessage: "до AdminJS - провідної адміністраційної панелі з відкритим кодом для програм Node.js, яка дозволяє керувати всіма своїми даними в одному місці",
  		properties: {
  			email: "Електронна пошта",
  			password: "Пароль"
  		},
  		loginButton: "Увійдіть в систему"
  	}
  };
  var labels$1 = {
  	navigation: "Навігація",
  	pages: "Сторінки",
  	selectedRecords: "Вибрано ({{selected}})",
  	filters: "Фільтри",
  	adminVersion: "Версія AdminJS: {{version}}",
  	appVersion: "Версія додатку: {{version}}",
  	dashboard: "Панель приладів"
  };
  var properties$1 = {
  	length: "Довжина",
  	from: "Від",
  	to: "До",
  	email: "Електронна пошта",
  	password: "Пароль"
  };
  var resources$1 = {
  };
  var messages$1 = {
  	successfullyBulkDeleted: "Успішно видалено {{count}} запис",
  	successfullyBulkDeleted_plural: "Успішно видалено {{count}} записів",
  	successfullyDeleted: "Успішно видалено вибраний запис",
  	successfullyUpdated: "Успішно оновлено вибраний запис",
  	thereWereValidationErrors: "Є помилки валідації – перегляньте їх нижче",
  	forbiddenError: "Ви не можете виконувати дії {{actionName}} на {{resourceId}}",
  	anyForbiddenError: "Ви не можете виконати задану дію",
  	successfullyCreated: "Успішно створено новий запис",
  	bulkDeleteError: "Під час видалення записів сталася помилка. Перейдіть до консолі, щоб переглянути додаткову інформацію",
  	errorFetchingRecords: "Під час отримання записів сталася помилка. Перейдіть до консолі, щоб переглянути додаткову інформацію",
  	errorFetchingRecord: "Під час отримання запису сталася помилка. Перейдіть до консолі, щоб переглянути додаткову інформацію",
  	noRecordsSelected: "Ви не вибрали жодного запису",
  	theseRecordsWillBeRemoved: "Наступний запис буде видалено",
  	theseRecordsWillBeRemoved_plural: "Наступні записи буде видалено",
  	pickSomeFirstToRemove: "Щоб видалити записи, спочатку їх потрібно вибрати",
  	error404Resource: "Ресурс із зазначеним ID: {{resourceId}} не знайдено",
  	error404Action: "Ресурс із зазначеним ID: {{resourceId}} не має дії з назвою: {{actionName}} або Ви не маєте права використовувати його!",
  	error404Record: "Ресурс із зазначеним ID: {{resourceId}} не має запису з ID: {{recordId}} або Ви не маєте права використовувати його!",
  	seeConsoleForMore: "Дивіться консоль розробки, щоб дізнатися більше...",
  	noActionComponent: "Ви повинні заімплементувати ActionComponent для своєї дії",
  	noRecordsInResource: "У цьому ресурсі немає записів",
  	noRecords: "Немає записів",
  	confirmDelete: "Ви дійсно хочете видалити цей елемент?",
  	welcomeOnBoard_title: "Ласкаво просимо на борт!",
  	welcomeOnBoard_subtitle: "Тепер Ви один із нас! Ми підготували для Вас кілька порад для початку:",
  	addingResources_title: "Додавання ресурсів",
  	addingResources_subtitle: "Як додати нові ресурси до бічної панелі",
  	customizeResources_title: "Налаштування ресурсів",
  	customizeResources_subtitle: "Визначення поведінки, додавання властивостей тощо...",
  	customizeActions_title: "Налаштування дій",
  	customizeActions_subtitle: "Змінення існуючих дій і додавання нових",
  	writeOwnComponents_title: "Написання компонентів",
  	writeOwnComponents_subtitle: "Як змінити зовнішній вигляд AdminJS",
  	customDashboard_title: "Панелі приладів",
  	customDashboard_subtitle: "Як змінити цей екран та додати нові сторінки на бічній панелі»",
  	roleBasedAccess_title: "Контроль доступу на основі ролей",
  	roleBasedAccess_subtitle: "Створюйте ролі та дозволи користувачів у AdminJS",
  	community_title: "Приєднуйтесь до нашої спільноти на Slack'y",
  	community_subtitle: "Розмовляйте з розробниками та іншими користувачами AdminJS",
  	foundBug_title: "Знайшли помилку? Потребуєте покращення?",
  	foundBug_subtitle: "Опишіть проблему у нашому репозиторії GitHub",
  	needMoreSolutions_title: "Потрібні більш просунуті рішення?",
  	needMoreSolutions_subtitle: "Ми тут, щоб допомогти Вам з UX/UI дизайном та розробленням програмного забезпечення на основі (та не тільки) AdminJS",
  	invalidCredentials: "Неправильна адреса електронної пошти та/або пароль",
  	pageNotFound_title: "Сторінку не знайдено",
  	pageNotFound_subtitle: "Сторінка <strong>\"{{pageName}}\"</strong> не існує",
  	componentNotFound_title: "Компонент не вказано",
  	componentNotFound_subtitle: "Ви повинні вказати компонент, який буде рендерити цей елемент"
  };
  var uaLocale = {
  	actions: actions$1,
  	buttons: buttons$1,
  	components: components$1,
  	labels: labels$1,
  	properties: properties$1,
  	resources: resources$1,
  	messages: messages$1
  };

  var actions = {
  	"new": "创建",
  	edit: "编辑",
  	show: "显示",
  	"delete": "删除",
  	bulkDelete: "删除所有",
  	list: "列表"
  };
  var buttons = {
  	save: "保存",
  	addNewItem: "添加新的项目",
  	filter: "筛选",
  	filterActive: "筛选 ({{count}})",
  	applyChanges: "应用更改",
  	resetFilter: "重置筛选器",
  	confirmRemovalMany: "确认删除 {{count}} 个记录",
  	confirmRemovalMany_plural: "确认删除 {{count}} 个记录",
  	logout: "登出",
  	login: "登陆",
  	seeTheDocumentation: "参见: <1>文档</1>",
  	createFirstRecord: "创建第一个记录"
  };
  var labels = {
  	navigation: "导航",
  	pages: "页面",
  	selectedRecords: "已选中 ({{selected}})",
  	filters: "筛选器",
  	adminVersion: "Admin: {{version}}",
  	appVersion: "App: {{version}}",
  	dashboard: "仪表板"
  };
  var components = {
  	LanguageSelector: {
  		availableLanguages: {
  			de: "德语",
  			en: "英语",
  			es: "西班牙语",
  			it: "意大利语",
  			ja: "日语",
  			pl: "抛光",
  			"pt-BR": "葡萄牙语（巴西）",
  			ua: "乌克兰",
  			"zh-CN": "中国人"
  		}
  	},
  	Login: {
  		welcomeHeader: "欢迎",
  		welcomeMessage: "到 AdminJS – 世界领先的开源自动生成管理面板, 可用于你的 Node.js 应用程序, 以将所有数据汇于一处管理",
  		properties: {
  			email: "电子邮件",
  			password: "密码"
  		},
  		loginButton: "登录"
  	}
  };
  var properties = {
  	length: "长度",
  	from: "从",
  	to: "到"
  };
  var resources = {
  };
  var messages = {
  	successfullyBulkDeleted: "成功移除了 {{count}} 条记录",
  	successfullyBulkDeleted_plural: "成功移除了 {{count}} 条记录",
  	successfullyDeleted: "成功删除所选记录",
  	successfullyUpdated: "成功更新所选记录",
  	thereWereValidationErrors: "存在验证错误 - 见下方",
  	forbiddenError: "你不能在 {{resourceId}} 上使用 {{actionName}}",
  	anyForbiddenError: "你不能进行给定的操作",
  	successfullyCreated: "成功创建了新纪录",
  	bulkDeleteError: "删除记录时遇到错误, 检查控制台以获得更多信息",
  	errorFetchingRecords: "获取记录时遇到错误, 检查控制台以获得更多信息",
  	errorFetchingRecord: "获取记录时遇到错误, 检查控制台以获得更多信息",
  	noRecordsSelected: "尚未选择任何记录",
  	theseRecordsWillBeRemoved: "下面的记录将被删除",
  	theseRecordsWillBeRemoved_plural: "下面的记录将被删除",
  	pickSomeFirstToRemove: "若要删除记录, 需要先选出待删除的项目",
  	error404Resource: "找不到具有 id: {{resourceId}} 的资源",
  	error404Action: "具有 id: {{resourceId}} 的资源没有名为 {{actionName}} 的操作, 或你未被授权使用此操作!",
  	error404Record: "具有 id: {{resourceId}} 的资源中没有具有 id: {{recordId}} 的记录, 或你未被授权使用此记录!",
  	seeConsoleForMore: "检查开发控制台以获得更多信息...",
  	noActionComponent: "你必须为你的操作实现操作组件",
  	noRecordsInResource: "此资源中没有记录",
  	noRecords: "没有记录",
  	confirmDelete: "你真的想移除此项吗?",
  	welcomeOnBoard_title: "欢迎使用!",
  	welcomeOnBoard_subtitle: "现在你是我们的一员了! 我们为你准备了一些小贴士，供您使用。",
  	addingResources_title: "添加资源",
  	addingResources_subtitle: "如何向侧边栏添加资源",
  	customizeResources_title: "自定义资源",
  	customizeResources_subtitle: "定义行为、添加属性等...",
  	customizeActions_title: "自定义操作",
  	customizeActions_subtitle: "编辑已有的操作或添加新的操作",
  	writeOwnComponents_title: "编写组件",
  	writeOwnComponents_subtitle: "如何修改 AdminJS 的外观",
  	customDashboard_title: "自定义仪表板",
  	customDashboard_subtitle: "如何修改此视图、并在侧边栏添加新页面",
  	roleBasedAccess_title: "基于角色的访问控制",
  	roleBasedAccess_subtitle: "在 AdminJS 中创建用户角色和权限",
  	community_title: "加入 Slack 社群",
  	community_subtitle: "与 AdminJS 的开发者以及其他 AdminJS 用户交流",
  	foundBug_title: "发现 Bug? 需要改进?",
  	foundBug_subtitle: "在 GitHub 仓库提交 issue",
  	needMoreSolutions_title: "需要更多高级解决方案?",
  	needMoreSolutions_subtitle: "我们已经准备好为您提供优美的 UX/UI 设计, 并量身定制基于 AdminJS 等的软件",
  	invalidCredentials: "错误的电子邮箱或密码",
  	pageNotFound_title: "找不到网页",
  	pageNotFound_subtitle: "页 <strong>“{{pageName}}“</strong> 不存在",
  	componentNotFound_title: "未指定组件",
  	componentNotFound_subtitle: "您必须指定将呈现此元素的组件"
  };
  var zhCNLocale = {
  	actions: actions,
  	buttons: buttons,
  	labels: labels,
  	components: components,
  	properties: properties,
  	resources: resources,
  	messages: messages
  };

  const DEFAULT_LOAD = 'currentOnly';
  const DEFAULT_NS = 'translation';
  const defaultConfig = {
    debug: "development" === 'development',
    partialBundledLanguages: true,
    interpolation: {
      escapeValue: false
    },
    ns: [DEFAULT_NS],
    defaultNS: DEFAULT_NS,
    fallbackNS: DEFAULT_NS,
    load: DEFAULT_LOAD,
    react: {
      useSuspense: false
    },
    resources: {},
    parseMissingKeyHandler: (key, defaultValue) => defaultValue ?? startCase$1(key),
    get initImmediate() {
      return typeof window !== 'undefined';
    }
  };

  const locales = {
    de: deLocale,
    en: enLocale,
    es: esLocale,
    it: itLocale,
    ja: jaLocale,
    pl: plLocale,
    'pt-BR': ptBrLocale,
    ua: uaLocale,
    'zh-CN': zhCNLocale
  };

  /* eslint-disable function-paren-newline */
  /* eslint-disable implicit-arrow-linebreak */

  /**
    Initializes i18n translations based on provided configuration.
    @function
    @param {Locale} config - The configuration object for initializing i18n
    @returns {{i18n: i18next}} - An object containing an i18n instance.
  */
  const initTranslations = config => {
    const {
      language = 'en',
      availableLanguages = [],
      translations,
      localeDetection = false,
      withBackend = false,
      ...i18nConfig
    } = config;
    const combinedConfig = merge$1(defaultConfig, i18nConfig, {
      supportedLngs: availableLanguages,
      fallbackLng: i18nConfig.fallbackLng || language
    });
    const instance$1 = instance.createInstance(combinedConfig);
    if (!instance$1.isInitialized) {
      if (localeDetection) {
        instance$1.use(Browser);
      }
      if (withBackend) {
        instance$1.use(Backend);
      }
      instance$1.use(initReactI18next).init(combinedConfig);
    }
    const buildInTranslations = intersection$1(Object.keys(locales), availableLanguages);
    if (buildInTranslations.length) {
      buildInTranslations.forEach(lang => instance$1.addResourceBundle(lang, DEFAULT_NS, flat.flatten(locales[lang])));
    }
    if (translations) {
      Object.keys(translations).forEach(lang => instance$1.addResourceBundle(lang, DEFAULT_NS, flat.flatten(translations[lang]), true, true));
    }
    return {
      i18n: instance$1
    };
  };

  const env = {
    NODE_ENV: "development" 
  };
  const store = createStore(window.REDUX_STATE);
  const theme = window.THEME;
  const {
    locale
  } = store.getState();
  const {
    i18n
  } = initTranslations(locale);
  const Application = /*#__PURE__*/React__default$1.default.createElement(require$$3.Provider, {
    store: store
  }, /*#__PURE__*/React__default$1.default.createElement(styledComponents.ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React__default$1.default.createElement(I18nextProvider, {
    i18n: i18n
  }, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.BrowserRouter, null, /*#__PURE__*/React__default$1.default.createElement(React$1.Suspense, {
    fallback: /*#__PURE__*/React__default$1.default.createElement(AppLoader, null)
  }, /*#__PURE__*/React__default$1.default.createElement(OverridableApp, null))))));
  const loginAppProps = window.__APP_STATE__ ?? {};
  const LoginApplication = /*#__PURE__*/React__default$1.default.createElement(require$$3.Provider, {
    store: store
  }, /*#__PURE__*/React__default$1.default.createElement(styledComponents.ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React__default$1.default.createElement(I18nextProvider, {
    i18n: i18n
  }, /*#__PURE__*/React__default$1.default.createElement(reactRouterDom.BrowserRouter, null, /*#__PURE__*/React__default$1.default.createElement(React$1.Suspense, {
    fallback: /*#__PURE__*/React__default$1.default.createElement(AppLoader, null)
  }, /*#__PURE__*/React__default$1.default.createElement(Login$1, loginAppProps))))));

  // eslint-disable-next-line no-undef
  window.regeneratorRuntime = regeneratorRuntime;
  var bundleEntry = {
    withNotice,
    Application,
    OriginalApplication: App,
    LoginApplication,
    ViewHelpers,
    UserComponents: {},
    ApiClient,
    BasePropertyComponent: BasePropertyComponentExtended,
    CleanPropertyComponent,
    env,
    ...AppComponents,
    ...ActionComponents,
    ...Hooks,
    flat
  };

  return bundleEntry;

})(styled, React, ReactRedux, ReactRouterDOM, ReactRouter, AdminJSDesignSystem, ReactDOM, Redux);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
